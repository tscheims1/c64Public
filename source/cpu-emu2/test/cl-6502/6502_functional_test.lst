AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6010 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 21-oct-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    2
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    3
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    4
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    5
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    6
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    7
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    8
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    9
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   10
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   11
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            endif
000c :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0017 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0018 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 : 1702             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0026 : 1802                     dw  abs1+1
0028 : 1902                     dw  abs1+2
002a : 1a02                     dw  abs1+3
002c : 1b02                     dw  abs7f
002e : 1f01             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0030 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0032 : 0402                     dw  abst+1
0034 : 0502                     dw  abst+2
0036 : 0602                     dw  abst+3
0038 : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003a : 4e02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003c : 4f02                     dw  absAN+1
003e : 5002                     dw  absAN+2
0040 : 5102                     dw  absAN+3
0042 : 5202             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0044 : 5302                     dw  absEO+1
0046 : 5402                     dw  absEO+2
0048 : 5502                     dw  absEO+3
004a : 4a02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004c : 4b02                     dw  absOR+1
004e : 4c02                     dw  absOR+2
0050 : 4d02                     dw  absOR+3
                        ;add/subtract indirect pointers
0052 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0054 : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0056 : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0058 : 0501             sbiy2   dw  sba2-$ff
005a :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;5 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 000000                   ds  3               ;fill remaining bytes
0208 :                  data_bss
                            if load_data_direct = 1
0208 : 2900             ex_andi and #0              ;execute immediate opcodes
020a : 60                       rts
020b : 4900             ex_eori eor #0              ;execute immediate opcodes
020d : 60                       rts
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   12
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

020e : 0900             ex_orai ora #0              ;execute immediate opcodes
0210 : 60                       rts
0211 : 6900             ex_adci adc #0              ;execute immediate opcodes
0213 : 60                       rts
0214 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0216 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
0217 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021b : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021c : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0220 :                  rASL                        ;expected result ASL & ROL -carry  
0220 : 86048200         rROL    db  $86,$04,$82,0   ; "
0224 : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0228 :                  rLSR                        ;expected result LSR & ROR -carry
0228 : 61412000         rROR    db  $61,$41,$20,0   ; "
022c : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0230 :                  fASL                        ;expected flags for shifts
0230 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
0234 : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0238 :                  fLSR
0238 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
023c : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0240 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
0245 : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
024a : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
024e : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0252 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0256 : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
025a : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
025e : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0262 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0266 : 02800080         absflo  db  fz,fn,0,fn
026a :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   13
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
0412 : 4c1204          >        jmp *           ;failed anyway
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
0421 : 4c2104          >        jmp *           ;failed anyway
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
0430 : 4c3004          >        jmp *           ;failed anyway
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0435 : 4c3504          >        jmp *           ;failed anyway
                        
0438 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   14
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0438 : ad0002          >            lda test_case   ;previous test
043b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
043d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
043f : a901            >            lda #test_num   ;*** next tests' number
0441 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   15
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0444 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0446 :                  range_loop
0446 : 88                       dey             ;next relative address
0447 : 98                       tya
0448 : aa                       tax             ;precharge count to end of loop
0449 : 1008                     bpl range_fw    ;calculate relative address
044b : 18                       clc             ;avoid branch self or to relative address of branch
044c : 6902                     adc #2
044e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
044f : ea                       nop
0450 : ea                       nop
0451 : ea                       nop
0452 : ea                       nop
0453 :                  range_fw
0453 : ea                       nop
0454 : ea                       nop
0455 : ea                       nop
0456 : ea                       nop
0457 : ea                       nop
0458 : 497f                     eor #$7f        ;complement except sign
045a : 8de604                   sta range_adr   ;load into test target
045d : a900                     lda #0          ;should set zero flag in status register
045f : 4ce504                   jmp range_op
                                
0462 : ca                       dex             ; offset landing zone - backward branch too far
0463 : ca                       dex
0464 : ca                       dex
0465 : ca                       dex
0466 : ca                       dex
                                ;relative address target field with branch under test in the middle
0467 : ca                       dex             ;-128 - max backward
0468 : ca                       dex
0469 : ca                       dex
046a : ca                       dex
046b : ca                       dex
046c : ca                       dex
046d : ca                       dex
046e : ca                       dex
046f : ca                       dex             ;-120
0470 : ca                       dex
0471 : ca                       dex
0472 : ca                       dex
0473 : ca                       dex
0474 : ca                       dex
0475 : ca                       dex
0476 : ca                       dex
0477 : ca                       dex
0478 : ca                       dex
0479 : ca                       dex             ;-110
047a : ca                       dex
047b : ca                       dex
047c : ca                       dex
047d : ca                       dex
047e : ca                       dex
047f : ca                       dex
0480 : ca                       dex
0481 : ca                       dex
0482 : ca                       dex
0483 : ca                       dex             ;-100
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   16
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex
0487 : ca                       dex
0488 : ca                       dex
0489 : ca                       dex
048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex             ;-90
048e : ca                       dex
048f : ca                       dex
0490 : ca                       dex
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex             ;-80
0498 : ca                       dex
0499 : ca                       dex
049a : ca                       dex
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex             ;-70
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex             ;-60
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex             ;-50
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex             ;-40
04c0 : ca                       dex
04c1 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   17
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex             ;-30
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex             ;-20
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex             ;-10
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex             ;-3
04e5 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
04e6 =                  range_adr   = *+1       ;modifiable relative address
04e5 : f03e                     beq *+64        ;+64 if called without modification
04e7 : ca                       dex             ;+0
04e8 : ca                       dex
04e9 : ca                       dex
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex             ;+10
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex             ;+20
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   18
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex
0505 : ca                       dex             ;+30
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex             ;+40
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex             ;+50
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex             ;+60
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex             ;+70
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex             ;+80
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   19
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex             ;+90
0542 : ca                       dex
0543 : ca                       dex
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex             ;+100
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex             ;+110
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex             ;+120
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ea                       nop             ;offset landing zone - forward branch too far
0567 : ea                       nop
0568 : ea                       nop
0569 : ea                       nop
056a : ea                       nop
056b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
056d : 4c6d05          >        jmp *           ;failed anyway
                        
0570 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0571 : ea                       nop
0572 : ea                       nop
0573 : ea                       nop
0574 : ea                       nop
0575 :                  range_ok
0575 : ea                       nop
0576 : ea                       nop
0577 : ea                       nop
0578 : ea                       nop
0579 : ea                       nop
057a : c000                     cpy #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   20
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

057c : f003                     beq range_end   
057e : 4c4604                   jmp range_loop
0581 :                  range_end               ;range test successful
                            endif
                                next_test
0581 : ad0002          >            lda test_case   ;previous test
0584 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0586 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
0588 : a902            >            lda #test_num   ;*** next tests' number
058a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
058d : c001                     cpy #1          ;testing BNE true
058f : d003                     bne test_bne
                                trap 
0591 : 4c9105          >        jmp *           ;failed anyway
                        
0594 :                  test_bne
0594 : a900                     lda #0 
0596 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
0598 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
059a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
059c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
059e : c901                     cmp #1
                                trap_eq 
05a0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05a2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05a4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05a6 : aa                       tax 
05a7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05ab : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05ad : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05af : e001                     cpx #1
                                trap_eq 
05b1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05b3 : b0fe            >        bcs *           ;failed carry set
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   21
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_pl
05b5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05b7 : a8                       tay 
05b8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
05ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05bc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05be : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05c0 : c001                     cpy #1
                                trap_eq 
05c2 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05c4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
05c8 : ad0002          >            lda test_case   ;previous test
05cb : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
05cf : a903            >            lda #test_num   ;*** next tests' number
05d1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
05d4 : a2ff                     ldx #$ff        ;initialize stack
05d6 : 9a                       txs
05d7 : a955                     lda #$55
05d9 : 48                       pha
05da : a9aa                     lda #$aa
05dc : 48                       pha
05dd : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
05e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e2 : ba                       tsx
05e3 : 8a                       txa             ;overwrite accu
05e4 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
05e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e8 : 68                       pla
05e9 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
05eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
05ed : 68                       pla
05ee : c955                     cmp #$55
                                trap_ne
05f0 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   22
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
05f2 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
05f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05f7 : ba                       tsx
05f8 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
05fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
05fc : ad0002          >            lda test_case   ;previous test
05ff : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0601 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
0603 : a904            >            lda #test_num   ;*** next tests' number
0605 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
0608 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
060a : 48              >            pha         ;use stack to load status
060b : 28              >            plp
                        
060c : 101a                     bpl nbr1        ;branches should not be taken
060e : 501b                     bvc nbr2
0610 : 901c                     bcc nbr3
0612 : d01d                     bne nbr4
0614 : 3003                     bmi br1         ;branches should be taken
                                trap 
0616 : 4c1606          >        jmp *           ;failed anyway
                        
0619 : 7003             br1     bvs br2
                                trap 
061b : 4c1b06          >        jmp *           ;failed anyway
                        
061e : b003             br2     bcs br3
                                trap 
0620 : 4c2006          >        jmp *           ;failed anyway
                        
0623 : f00f             br3     beq br4
                                trap 
0625 : 4c2506          >        jmp *           ;failed anyway
                        
0628 :                  nbr1
                                trap            ;previous bpl taken 
0628 : 4c2806          >        jmp *           ;failed anyway
                        
062b :                  nbr2
                                trap            ;previous bvc taken
062b : 4c2b06          >        jmp *           ;failed anyway
                        
062e :                  nbr3
                                trap            ;previous bcc taken
062e : 4c2e06          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   23
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0631 :                  nbr4
                                trap            ;previous bne taken
0631 : 4c3106          >        jmp *           ;failed anyway
                        
0634 : 08               br4     php
0635 : ba                       tsx
0636 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
0638 : d0fe            >        bne *           ;failed not equal (non zero)
                        
063a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
063b : 0908            >            ora #decmode        ;ignore decimal mode bit
063d : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
063f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0641 : ba                       tsx
0642 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
0644 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
0646 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
0648 : 48              >            pha         ;use stack to load status
0649 : 28              >            plp
                        
064a : 301a                     bmi nbr11       ;branches should not be taken
064c : 701b                     bvs nbr12
064e : b01c                     bcs nbr13
0650 : f01d                     beq nbr14
0652 : 1003                     bpl br11        ;branches should be taken
                                trap 
0654 : 4c5406          >        jmp *           ;failed anyway
                        
0657 : 5003             br11    bvc br12
                                trap 
0659 : 4c5906          >        jmp *           ;failed anyway
                        
065c : 9003             br12    bcc br13
                                trap 
065e : 4c5e06          >        jmp *           ;failed anyway
                        
0661 : d00f             br13    bne br14
                                trap 
0663 : 4c6306          >        jmp *           ;failed anyway
                        
0666 :                  nbr11
                                trap            ;previous bmi taken 
0666 : 4c6606          >        jmp *           ;failed anyway
                        
0669 :                  nbr12
                                trap            ;previous bvs taken 
0669 : 4c6906          >        jmp *           ;failed anyway
                        
066c :                  nbr13
                                trap            ;previous bcs taken 
066c : 4c6c06          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   24
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

066f :                  nbr14
                                trap            ;previous beq taken 
066f : 4c6f06          >        jmp *           ;failed anyway
                        
0672 : 08               br14    php
0673 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0674 : 0908            >            ora #decmode        ;ignore decimal mode bit
0676 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0678 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
067a : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
067c : 48              >            pha         ;use stack to load status
067d : 28              >            plp
                        
067e : d002                     bne brzs1
0680 : f003                     beq brzs2
0682 :                  brzs1
                                trap            ;branch zero/non zero
0682 : 4c8206          >        jmp *           ;failed anyway
                        
0685 : b002             brzs2   bcs brzs3
0687 : 9003                     bcc brzs4
0689 :                  brzs3
                                trap            ;branch carry/no carry
0689 : 4c8906          >        jmp *           ;failed anyway
                        
068c : 3002             brzs4   bmi brzs5
068e : 1003                     bpl brzs6
0690 :                  brzs5
                                trap            ;branch minus/plus
0690 : 4c9006          >        jmp *           ;failed anyway
                        
0693 : 7002             brzs6   bvs brzs7
0695 : 5003                     bvc brzs8
0697 :                  brzs7
                                trap            ;branch overflow/no overflow
0697 : 4c9706          >        jmp *           ;failed anyway
                        
069a :                  brzs8
                                set_stat carry
                       >            load_flag carry
069a : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
069c : 48              >            pha         ;use stack to load status
069d : 28              >            plp
                        
069e : f002                     beq brcs1
06a0 : d003                     bne brcs2
06a2 :                  brcs1
                                trap            ;branch zero/non zero
06a2 : 4ca206          >        jmp *           ;failed anyway
                        
06a5 : 9002             brcs2   bcc brcs3
06a7 : b003                     bcs brcs4
06a9 :                  brcs3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   25
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap            ;branch carry/no carry
06a9 : 4ca906          >        jmp *           ;failed anyway
                        
06ac : 3002             brcs4   bmi brcs5
06ae : 1003                     bpl brcs6
06b0 :                  brcs5
                                trap            ;branch minus/plus
06b0 : 4cb006          >        jmp *           ;failed anyway
                        
06b3 : 7002             brcs6   bvs brcs7
06b5 : 5003                     bvc brcs8
06b7 :                  brcs7
                                trap            ;branch overflow/no overflow
06b7 : 4cb706          >        jmp *           ;failed anyway
                        
                        
06ba :                  brcs8
                                set_stat minus
                       >            load_flag minus
06ba : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
06bc : 48              >            pha         ;use stack to load status
06bd : 28              >            plp
                        
06be : f002                     beq brmi1
06c0 : d003                     bne brmi2
06c2 :                  brmi1
                                trap            ;branch zero/non zero
06c2 : 4cc206          >        jmp *           ;failed anyway
                        
06c5 : b002             brmi2   bcs brmi3
06c7 : 9003                     bcc brmi4
06c9 :                  brmi3
                                trap            ;branch carry/no carry
06c9 : 4cc906          >        jmp *           ;failed anyway
                        
06cc : 1002             brmi4   bpl brmi5
06ce : 3003                     bmi brmi6
06d0 :                  brmi5
                                trap            ;branch minus/plus
06d0 : 4cd006          >        jmp *           ;failed anyway
                        
06d3 : 7002             brmi6   bvs brmi7
06d5 : 5003                     bvc brmi8
06d7 :                  brmi7
                                trap            ;branch overflow/no overflow
06d7 : 4cd706          >        jmp *           ;failed anyway
                        
06da :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
06da : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
06dc : 48              >            pha         ;use stack to load status
06dd : 28              >            plp
                        
06de : f002                     beq brvs1
06e0 : d003                     bne brvs2
06e2 :                  brvs1
                                trap            ;branch zero/non zero
06e2 : 4ce206          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   26
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

06e5 : b002             brvs2   bcs brvs3
06e7 : 9003                     bcc brvs4
06e9 :                  brvs3
                                trap            ;branch carry/no carry
06e9 : 4ce906          >        jmp *           ;failed anyway
                        
06ec : 3002             brvs4   bmi brvs5
06ee : 1003                     bpl brvs6
06f0 :                  brvs5
                                trap            ;branch minus/plus
06f0 : 4cf006          >        jmp *           ;failed anyway
                        
06f3 : 5002             brvs6   bvc brvs7
06f5 : 7003                     bvs brvs8
06f7 :                  brvs7
                                trap            ;branch overflow/no overflow
06f7 : 4cf706          >        jmp *           ;failed anyway
                        
06fa :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
06fa : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
06fc : 48              >            pha         ;use stack to load status
06fd : 28              >            plp
                        
06fe : f002                     beq brzc1
0700 : d003                     bne brzc2
0702 :                  brzc1
                                trap            ;branch zero/non zero
0702 : 4c0207          >        jmp *           ;failed anyway
                        
0705 : 9002             brzc2   bcc brzc3
0707 : b003                     bcs brzc4
0709 :                  brzc3
                                trap            ;branch carry/no carry
0709 : 4c0907          >        jmp *           ;failed anyway
                        
070c : 1002             brzc4   bpl brzc5
070e : 3003                     bmi brzc6
0710 :                  brzc5
                                trap            ;branch minus/plus
0710 : 4c1007          >        jmp *           ;failed anyway
                        
0713 : 5002             brzc6   bvc brzc7
0715 : 7003                     bvs brzc8
0717 :                  brzc7
                                trap            ;branch overflow/no overflow
0717 : 4c1707          >        jmp *           ;failed anyway
                        
071a :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
071a : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
071c : 48              >            pha         ;use stack to load status
071d : 28              >            plp
                        
071e : d002                     bne brcc1
0720 : f003                     beq brcc2
0722 :                  brcc1
                                trap            ;branch zero/non zero
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   27
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0722 : 4c2207          >        jmp *           ;failed anyway
                        
0725 : b002             brcc2   bcs brcc3
0727 : 9003                     bcc brcc4
0729 :                  brcc3
                                trap            ;branch carry/no carry
0729 : 4c2907          >        jmp *           ;failed anyway
                        
072c : 1002             brcc4   bpl brcc5
072e : 3003                     bmi brcc6
0730 :                  brcc5
                                trap            ;branch minus/plus
0730 : 4c3007          >        jmp *           ;failed anyway
                        
0733 : 5002             brcc6   bvc brcc7
0735 : 7003                     bvs brcc8
0737 :                  brcc7
                                trap            ;branch overflow/no overflow
0737 : 4c3707          >        jmp *           ;failed anyway
                        
073a :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
073a : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
073c : 48              >            pha         ;use stack to load status
073d : 28              >            plp
                        
073e : d002                     bne brpl1
0740 : f003                     beq brpl2
0742 :                  brpl1
                                trap            ;branch zero/non zero
0742 : 4c4207          >        jmp *           ;failed anyway
                        
0745 : 9002             brpl2   bcc brpl3
0747 : b003                     bcs brpl4
0749 :                  brpl3
                                trap            ;branch carry/no carry
0749 : 4c4907          >        jmp *           ;failed anyway
                        
074c : 3002             brpl4   bmi brpl5
074e : 1003                     bpl brpl6
0750 :                  brpl5
                                trap            ;branch minus/plus
0750 : 4c5007          >        jmp *           ;failed anyway
                        
0753 : 5002             brpl6   bvc brpl7
0755 : 7003                     bvs brpl8
0757 :                  brpl7
                                trap            ;branch overflow/no overflow
0757 : 4c5707          >        jmp *           ;failed anyway
                        
075a :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
075a : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
075c : 48              >            pha         ;use stack to load status
075d : 28              >            plp
                        
075e : d002                     bne brvc1
0760 : f003                     beq brvc2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   28
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0762 :                  brvc1
                                trap            ;branch zero/non zero
0762 : 4c6207          >        jmp *           ;failed anyway
                        
0765 : 9002             brvc2   bcc brvc3
0767 : b003                     bcs brvc4
0769 :                  brvc3
                                trap            ;branch carry/no carry
0769 : 4c6907          >        jmp *           ;failed anyway
                        
076c : 1002             brvc4   bpl brvc5
076e : 3003                     bmi brvc6
0770 :                  brvc5
                                trap            ;branch minus/plus
0770 : 4c7007          >        jmp *           ;failed anyway
                        
0773 : 7002             brvc6   bvs brvc7
0775 : 5003                     bvc brvc8
0777 :                  brvc7
                                trap            ;branch overflow/no overflow
0777 : 4c7707          >        jmp *           ;failed anyway
                        
077a :                  brvc8
                                next_test
077a : ad0002          >            lda test_case   ;previous test
077d : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
077f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
0781 : a905            >            lda #test_num   ;*** next tests' number
0783 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
0786 : a255                     ldx #$55        ;x & y protected
0788 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
078a : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
078c : 48              >            pha         ;use stack to load status
078d : a901            >            lda #1     ;precharge accu
078f : 28              >            plp
                        
0790 : 48                       pha
                                tst_a 1,$ff
0791 : 08              >            php         ;save flags
0792 : c901            >            cmp #1     ;test result
                       >            trap_ne
0794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0796 : 68              >            pla         ;load status
0797 : 48              >            pha
                       >            cmp_flag $ff
0798 : 0908            >            ora #decmode        ;ignore decimal mode bit
079a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
079c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   29
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

079e : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
079f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07a1 : 48              >            pha         ;use stack to load status
07a2 : a900            >            lda #0     ;precharge accu
07a4 : 28              >            plp
                        
07a5 : 48                       pha
                                tst_a 0,0
07a6 : 08              >            php         ;save flags
07a7 : c900            >            cmp #0     ;test result
                       >            trap_ne
07a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ab : 68              >            pla         ;load status
07ac : 48              >            pha
                       >            cmp_flag 0
07ad : 0908            >            ora #decmode        ;ignore decimal mode bit
07af : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07b3 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
07b4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07b6 : 48              >            pha         ;use stack to load status
07b7 : a9ff            >            lda #$ff     ;precharge accu
07b9 : 28              >            plp
                        
07ba : 48                       pha
                                tst_a $ff,$ff
07bb : 08              >            php         ;save flags
07bc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c0 : 68              >            pla         ;load status
07c1 : 48              >            pha
                       >            cmp_flag $ff
07c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
07c4 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
07c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07cb : 48              >            pha         ;use stack to load status
07cc : a901            >            lda #1     ;precharge accu
07ce : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   30
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

07cf : 48                       pha
                                tst_a 1,0
07d0 : 08              >            php         ;save flags
07d1 : c901            >            cmp #1     ;test result
                       >            trap_ne
07d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07d5 : 68              >            pla         ;load status
07d6 : 48              >            pha
                       >            cmp_flag 0
07d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
07d9 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07dd : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
07de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07e0 : 48              >            pha         ;use stack to load status
07e1 : a900            >            lda #0     ;precharge accu
07e3 : 28              >            plp
                        
07e4 : 48                       pha
                                tst_a 0,$ff
07e5 : 08              >            php         ;save flags
07e6 : c900            >            cmp #0     ;test result
                       >            trap_ne
07e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ea : 68              >            pla         ;load status
07eb : 48              >            pha
                       >            cmp_flag $ff
07ec : 0908            >            ora #decmode        ;ignore decimal mode bit
07ee : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07f2 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
07f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07f5 : 48              >            pha         ;use stack to load status
07f6 : a9ff            >            lda #$ff     ;precharge accu
07f8 : 28              >            plp
                        
07f9 : 48                       pha
                                tst_a $ff,0
07fa : 08              >            php         ;save flags
07fb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ff : 68              >            pla         ;load status
0800 : 48              >            pha
                       >            cmp_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   31
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0801 : 0908            >            ora #decmode        ;ignore decimal mode bit
0803 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0805 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0807 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
0808 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
080a : 48              >            pha         ;use stack to load status
080b : a900            >            lda #0     ;precharge accu
080d : 28              >            plp
                        
080e : 68                       pla
                                tst_a $ff,$ff-zero
080f : 08              >            php         ;save flags
0810 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0812 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0814 : 68              >            pla         ;load status
0815 : 48              >            pha
                       >            cmp_flag $ff-zero
0816 : 0908            >            ora #decmode        ;ignore decimal mode bit
0818 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
081a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
081c : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
081d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
081f : 48              >            pha         ;use stack to load status
0820 : a9ff            >            lda #$ff     ;precharge accu
0822 : 28              >            plp
                        
0823 : 68                       pla
                                tst_a 0,zero
0824 : 08              >            php         ;save flags
0825 : c900            >            cmp #0     ;test result
                       >            trap_ne
0827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0829 : 68              >            pla         ;load status
082a : 48              >            pha
                       >            cmp_flag zero
082b : 0908            >            ora #decmode        ;ignore decimal mode bit
082d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
082f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0831 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   32
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0832 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0834 : 48              >            pha         ;use stack to load status
0835 : a9fe            >            lda #$fe     ;precharge accu
0837 : 28              >            plp
                        
0838 : 68                       pla
                                tst_a 1,$ff-zero-minus
0839 : 08              >            php         ;save flags
083a : c901            >            cmp #1     ;test result
                       >            trap_ne
083c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
083e : 68              >            pla         ;load status
083f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
0840 : 0908            >            ora #decmode        ;ignore decimal mode bit
0842 : c97d            >            cmp #($ff-zero-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0846 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0847 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0849 : 48              >            pha         ;use stack to load status
084a : a900            >            lda #0     ;precharge accu
084c : 28              >            plp
                        
084d : 68                       pla
                                tst_a $ff,minus
084e : 08              >            php         ;save flags
084f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0853 : 68              >            pla         ;load status
0854 : 48              >            pha
                       >            cmp_flag minus
0855 : 0908            >            ora #decmode        ;ignore decimal mode bit
0857 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0859 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
085b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
085c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
085e : 48              >            pha         ;use stack to load status
085f : a9ff            >            lda #$ff     ;precharge accu
0861 : 28              >            plp
                        
0862 : 68                       pla
                                tst_a 0,$ff-minus
0863 : 08              >            php         ;save flags
0864 : c900            >            cmp #0     ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   33
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
0866 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0868 : 68              >            pla         ;load status
0869 : 48              >            pha
                       >            cmp_flag $ff-minus
086a : 0908            >            ora #decmode        ;ignore decimal mode bit
086c : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
086e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0870 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
0871 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0873 : 48              >            pha         ;use stack to load status
0874 : a9fe            >            lda #$fe     ;precharge accu
0876 : 28              >            plp
                        
0877 : 68                       pla
                                tst_a 1,0
0878 : 08              >            php         ;save flags
0879 : c901            >            cmp #1     ;test result
                       >            trap_ne
087b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
087d : 68              >            pla         ;load status
087e : 48              >            pha
                       >            cmp_flag 0
087f : 0908            >            ora #decmode        ;ignore decimal mode bit
0881 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0883 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0885 : 28              >            plp         ;restore status
                        
0886 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
0888 : d0fe            >        bne *           ;failed not equal (non zero)
                        
088a : c0aa                     cpy #$aa
                                trap_ne
088c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
088e : ad0002          >            lda test_case   ;previous test
0891 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0893 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
0895 : a906            >            lda #test_num   ;*** next tests' number
0897 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   34
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
089a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
089c : 48              >            pha         ;use stack to load status
089d : a93c            >            lda #$3c     ;precharge accu
089f : 28              >            plp
                        
08a0 : 49c3                     eor #$c3
                                tst_a $ff,fn
08a2 : 08              >            php         ;save flags
08a3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08a7 : 68              >            pla         ;load status
08a8 : 48              >            pha
                       >            cmp_flag fn
08a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
08ab : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08af : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
08b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08b2 : 48              >            pha         ;use stack to load status
08b3 : a9c3            >            lda #$c3     ;precharge accu
08b5 : 28              >            plp
                        
08b6 : 49c3                     eor #$c3
                                tst_a 0,fz
08b8 : 08              >            php         ;save flags
08b9 : c900            >            cmp #0     ;test result
                       >            trap_ne
08bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08bd : 68              >            pla         ;load status
08be : 48              >            pha
                       >            cmp_flag fz
08bf : 0908            >            ora #decmode        ;ignore decimal mode bit
08c1 : c93a            >            cmp #(fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08c5 : 28              >            plp         ;restore status
                        
                                next_test
08c6 : ad0002          >            lda test_case   ;previous test
08c9 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
08cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
08cd : a907            >            lda #test_num   ;*** next tests' number
08cf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   35
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
08d2 : a224                     ldx #$24
08d4 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
08d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08d8 : 48              >            pha         ;use stack to load status
08d9 : a918            >            lda #$18     ;precharge accu
08db : 28              >            plp
                        
08dc : ea                       nop
                                tst_a $18,0
08dd : 08              >            php         ;save flags
08de : c918            >            cmp #$18     ;test result
                       >            trap_ne
08e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08e2 : 68              >            pla         ;load status
08e3 : 48              >            pha
                       >            cmp_flag 0
08e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
08e6 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08ea : 28              >            plp         ;restore status
                        
08eb : e024                     cpx #$24
                                trap_ne
08ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
08ef : c042                     cpy #$42
                                trap_ne
08f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
08f3 : a2db                     ldx #$db
08f5 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
08f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08f9 : 48              >            pha         ;use stack to load status
08fa : a9e7            >            lda #$e7     ;precharge accu
08fc : 28              >            plp
                        
08fd : ea                       nop
                                tst_a $e7,$ff
08fe : 08              >            php         ;save flags
08ff : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
0901 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0903 : 68              >            pla         ;load status
0904 : 48              >            pha
                       >            cmp_flag $ff
0905 : 0908            >            ora #decmode        ;ignore decimal mode bit
0907 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   36
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
0909 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
090b : 28              >            plp         ;restore status
                        
090c : e0db                     cpx #$db
                                trap_ne
090e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0910 : c0bd                     cpy #$bd
                                trap_ne
0912 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0914 : ad0002          >            lda test_case   ;previous test
0917 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0919 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
091b : a908            >            lda #test_num   ;*** next tests' number
091d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
0920 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
0922 : 48              >            pha         ;use stack to load status
0923 : 28              >            plp
                        
0924 : a946                     lda #'F'
0926 : a241                     ldx #'A'
0928 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
092a : 4cc437                   jmp test_far
092d : ea                       nop
092e : ea                       nop
                                trap_ne         ;runover protection
092f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0931 : e8                       inx
0932 : e8                       inx
0933 :                  far_ret 
                                trap_eq         ;returned flags OK?
0933 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0935 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0937 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0939 : 50fe            >        bvc *           ;failed overflow clear
                        
093b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
093d : d0fe            >        bne *           ;failed not equal (non zero)
                        
093f : e042                     cpx #('A'+1)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   37
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
0941 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0943 : c04f                     cpy #('R'-3)
                                trap_ne
0945 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0947 : ca                       dex
0948 : c8                       iny
0949 : c8                       iny
094a : c8                       iny
094b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
094d : 4c5609                   jmp test_near
0950 : ea                       nop
0951 : ea                       nop
                                trap_ne         ;runover protection
0952 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0954 : e8                       inx
0955 : e8                       inx
0956 :                  test_near
                                trap_eq         ;passed flags OK?
0956 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
0958 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
095a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
095c : 50fe            >        bvc *           ;failed overflow clear
                        
095e : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0960 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0962 : e041                     cpx #'A'
                                trap_ne
0964 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0966 : c052                     cpy #'R'
                                trap_ne
0968 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
096a : ad0002          >            lda test_case   ;previous test
096d : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
096f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
0971 : a909            >            lda #test_num   ;*** next tests' number
0973 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0976 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   38
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0978 : 48              >            pha         ;use stack to load status
0979 : 28              >            plp
                        
097a : a949                     lda #'I'
097c : a24e                     ldx #'N'
097e : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0980 : 6cf237                   jmp (ptr_tst_ind)
0983 : ea                       nop
                                trap_ne         ;runover protection
0984 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0986 : 88                       dey
0987 : 88                       dey
0988 :                  ind_ret 
0988 : 08                       php             ;either SP or Y count will fail, if we do not hit
0989 : 88                       dey
098a : 88                       dey
098b : 88                       dey
098c : 28                       plp
                                trap_eq         ;returned flags OK?
098d : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
098f : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0991 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0993 : 50fe            >        bvc *           ;failed overflow clear
                        
0995 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0997 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0999 : e04f                     cpx #('N'+1)
                                trap_ne
099b : d0fe            >        bne *           ;failed not equal (non zero)
                        
099d : c03e                     cpy #('D'-6)
                                trap_ne
099f : d0fe            >        bne *           ;failed not equal (non zero)
                        
09a1 : ba                       tsx             ;SP check
09a2 : e0ff                     cpx #$ff
                                trap_ne
09a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09a6 : ad0002          >            lda test_case   ;previous test
09a9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
09ad : a90a            >            lda #test_num   ;*** next tests' number
09af : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   39
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
09b2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
09b4 : 48              >            pha         ;use stack to load status
09b5 : 28              >            plp
                        
09b6 : a94a                     lda #'J'
09b8 : a253                     ldx #'S'
09ba : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
09bc : 202e38                   jsr test_jsr
09be =                  jsr_ret = *-1           ;last address of jsr = return address
09bf : 08                       php             ;either SP or Y count will fail, if we do not hit
09c0 : 88                       dey
09c1 : 88                       dey
09c2 : 88                       dey
09c3 : 28                       plp
                                trap_eq         ;returned flags OK?
09c4 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
09c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
09c8 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
09ca : 50fe            >        bvc *           ;failed overflow clear
                        
09cc : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
09ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d0 : e054                     cpx #('S'+1)
                                trap_ne
09d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d4 : c04c                     cpy #('R'-6)
                                trap_ne
09d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d8 : ba                       tsx             ;sp?
09d9 : e0ff                     cpx #$ff
                                trap_ne
09db : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09dd : ad0002          >            lda test_case   ;previous test
09e0 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
09e4 : a90b            >            lda #test_num   ;*** next tests' number
09e6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                       >            load_flag 0
09e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   40
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
09eb : 48              >            pha         ;use stack to load status
09ec : 28              >            plp
                        
09ed : a942                     lda #'B'
09ef : a252                     ldx #'R'
09f1 : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
09f3 : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
09f4 : 88                       dey             ;should not be executed
09f5 :                  brk_ret                 ;address of break return
09f5 : 08                       php             ;either SP or Y count will fail, if we do not hit
09f6 : 88                       dey
09f7 : 88                       dey
09f8 : 88                       dey
09f9 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
09fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
09fd : e053                     cpx #('R'+1)
                                trap_ne
09ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a01 : c045                     cpy #('K'-6)
                                trap_ne
0a03 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a05 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0a06 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a08 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a0c : ba                       tsx             ;sp?
0a0d : e0ff                     cpx #$ff
                                trap_ne
0a0f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0a11 : ad0002          >            lda test_case   ;previous test
0a14 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
0a18 : a90c            >            lda #test_num   ;*** next tests' number
0a1a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   41
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0a1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0a1f : 48              >            pha         ;use stack to load status
0a20 : 28              >            plp
                        
0a21 : 18                       clc
                                tst_stat $ff-carry
0a22 : 08              >            php         ;save status
0a23 : 68              >            pla         ;use stack to retrieve status
0a24 : 48              >            pha
                       >            cmp_flag $ff-carry
0a25 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a27 : c9fe            >            cmp #($ff-carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a2b : 28              >            plp         ;restore status
                        
0a2c : 38                       sec
                                tst_stat $ff
0a2d : 08              >            php         ;save status
0a2e : 68              >            pla         ;use stack to retrieve status
0a2f : 48              >            pha
                       >            cmp_flag $ff
0a30 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a32 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a36 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0a37 : 58                       cli
                                tst_stat $ff-intdis
0a38 : 08              >            php         ;save status
0a39 : 68              >            pla         ;use stack to retrieve status
0a3a : 48              >            pha
                       >            cmp_flag $ff-intdis
0a3b : 0908            >            ora #decmode        ;ignore decimal mode bit
0a3d : c9fb            >            cmp #($ff-intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a41 : 28              >            plp         ;restore status
                        
0a42 : 78                       sei
                                tst_stat $ff
0a43 : 08              >            php         ;save status
0a44 : 68              >            pla         ;use stack to retrieve status
0a45 : 48              >            pha
                       >            cmp_flag $ff
0a46 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a48 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   42
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
0a4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a4c : 28              >            plp         ;restore status
                        
                            endif
0a4d : d8                       cld
                                tst_stat $ff-decmode
0a4e : 08              >            php         ;save status
0a4f : 68              >            pla         ;use stack to retrieve status
0a50 : 48              >            pha
                       >            cmp_flag $ff-decmode
0a51 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a53 : c9ff            >            cmp #($ff-decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a57 : 28              >            plp         ;restore status
                        
0a58 : f8                       sed
                                tst_stat $ff
0a59 : 08              >            php         ;save status
0a5a : 68              >            pla         ;use stack to retrieve status
0a5b : 48              >            pha
                       >            cmp_flag $ff
0a5c : 0908            >            ora #decmode        ;ignore decimal mode bit
0a5e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a62 : 28              >            plp         ;restore status
                        
0a63 : b8                       clv
                                tst_stat $ff-overfl
0a64 : 08              >            php         ;save status
0a65 : 68              >            pla         ;use stack to retrieve status
0a66 : 48              >            pha
                       >            cmp_flag $ff-overfl
0a67 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a69 : c9bf            >            cmp #($ff-overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a6d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0a6e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a70 : 48              >            pha         ;use stack to load status
0a71 : 28              >            plp
                        
                                tst_stat 0
0a72 : 08              >            php         ;save status
0a73 : 68              >            pla         ;use stack to retrieve status
0a74 : 48              >            pha
                       >            cmp_flag 0
0a75 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a77 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   43
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                       >            trap_ne
0a79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a7b : 28              >            plp         ;restore status
                        
0a7c : 38                       sec
                                tst_stat carry
0a7d : 08              >            php         ;save status
0a7e : 68              >            pla         ;use stack to retrieve status
0a7f : 48              >            pha
                       >            cmp_flag carry
0a80 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a82 : c939            >            cmp #(carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a86 : 28              >            plp         ;restore status
                        
0a87 : 18                       clc
                                tst_stat 0  
0a88 : 08              >            php         ;save status
0a89 : 68              >            pla         ;use stack to retrieve status
0a8a : 48              >            pha
                       >            cmp_flag 0  
0a8b : 0908            >            ora #decmode        ;ignore decimal mode bit
0a8d : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a91 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0a92 : 78                       sei
                                tst_stat intdis
0a93 : 08              >            php         ;save status
0a94 : 68              >            pla         ;use stack to retrieve status
0a95 : 48              >            pha
                       >            cmp_flag intdis
0a96 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a98 : c93c            >            cmp #(intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a9c : 28              >            plp         ;restore status
                        
0a9d : 58                       cli
                                tst_stat 0
0a9e : 08              >            php         ;save status
0a9f : 68              >            pla         ;use stack to retrieve status
0aa0 : 48              >            pha
                       >            cmp_flag 0
0aa1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0aa3 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aa5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa7 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   44
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                            endif  
0aa8 : f8                       sed
                                tst_stat decmode
0aa9 : 08              >            php         ;save status
0aaa : 68              >            pla         ;use stack to retrieve status
0aab : 48              >            pha
                       >            cmp_flag decmode
0aac : 0908            >            ora #decmode        ;ignore decimal mode bit
0aae : c938            >            cmp #(decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ab0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ab2 : 28              >            plp         ;restore status
                        
0ab3 : d8                       cld
                                tst_stat 0  
0ab4 : 08              >            php         ;save status
0ab5 : 68              >            pla         ;use stack to retrieve status
0ab6 : 48              >            pha
                       >            cmp_flag 0  
0ab7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ab9 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0abb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0abd : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0abe : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0ac0 : 48              >            pha         ;use stack to load status
0ac1 : 28              >            plp
                        
                                tst_stat overfl
0ac2 : 08              >            php         ;save status
0ac3 : 68              >            pla         ;use stack to retrieve status
0ac4 : 48              >            pha
                       >            cmp_flag overfl
0ac5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ac7 : c978            >            cmp #(overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ac9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0acb : 28              >            plp         ;restore status
                        
0acc : b8                       clv
                                tst_stat 0
0acd : 08              >            php         ;save status
0ace : 68              >            pla         ;use stack to retrieve status
0acf : 48              >            pha
                       >            cmp_flag 0
0ad0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ad2 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ad4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   45
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0ad6 : 28              >            plp         ;restore status
                        
                                next_test
0ad7 : ad0002          >            lda test_case   ;previous test
0ada : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0adc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
0ade : a90d            >            lda #test_num   ;*** next tests' number
0ae0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0ae3 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0ae5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0ae7 : 48              >            pha         ;use stack to load status
0ae8 : 28              >            plp
                        
0ae9 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0aea : 08              >            php         ;save flags
0aeb : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0aed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aef : 68              >            pla         ;load status
0af0 : 48              >            pha
                       >            cmp_flag $ff-zero
0af1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0af3 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0af5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0af7 : 28              >            plp         ;restore status
                        
0af8 : e8                       inx             ;00
                                tst_x 0,$ff-minus
0af9 : 08              >            php         ;save flags
0afa : e000            >            cpx #0     ;test result
                       >            trap_ne
0afc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0afe : 68              >            pla         ;load status
0aff : 48              >            pha
                       >            cmp_flag $ff-minus
0b00 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b02 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b06 : 28              >            plp         ;restore status
                        
0b07 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0b08 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   46
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0b09 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b0d : 68              >            pla         ;load status
0b0e : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0b0f : 0908            >            ora #decmode        ;ignore decimal mode bit
0b11 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b15 : 28              >            plp         ;restore status
                        
0b16 : ca                       dex             ;00
                                tst_x 0,$ff-minus
0b17 : 08              >            php         ;save flags
0b18 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b1c : 68              >            pla         ;load status
0b1d : 48              >            pha
                       >            cmp_flag $ff-minus
0b1e : 0908            >            ora #decmode        ;ignore decimal mode bit
0b20 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b24 : 28              >            plp         ;restore status
                        
0b25 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0b26 : 08              >            php         ;save flags
0b27 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b2b : 68              >            pla         ;load status
0b2c : 48              >            pha
                       >            cmp_flag $ff-zero
0b2d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b2f : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b33 : 28              >            plp         ;restore status
                        
0b34 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0b35 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0b37 : 48              >            pha         ;use stack to load status
0b38 : 28              >            plp
                        
0b39 : e8                       inx             ;ff
                                tst_x $ff,minus
0b3a : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   47
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0b3b : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b3f : 68              >            pla         ;load status
0b40 : 48              >            pha
                       >            cmp_flag minus
0b41 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b43 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b47 : 28              >            plp         ;restore status
                        
0b48 : e8                       inx             ;00
                                tst_x 0,zero
0b49 : 08              >            php         ;save flags
0b4a : e000            >            cpx #0     ;test result
                       >            trap_ne
0b4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b4e : 68              >            pla         ;load status
0b4f : 48              >            pha
                       >            cmp_flag zero
0b50 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b52 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b56 : 28              >            plp         ;restore status
                        
0b57 : e8                       inx             ;01
                                tst_x 1,0
0b58 : 08              >            php         ;save flags
0b59 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b5d : 68              >            pla         ;load status
0b5e : 48              >            pha
                       >            cmp_flag 0
0b5f : 0908            >            ora #decmode        ;ignore decimal mode bit
0b61 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b65 : 28              >            plp         ;restore status
                        
0b66 : ca                       dex             ;00
                                tst_x 0,zero
0b67 : 08              >            php         ;save flags
0b68 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b6c : 68              >            pla         ;load status
0b6d : 48              >            pha
                       >            cmp_flag zero
0b6e : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   48
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0b70 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b74 : 28              >            plp         ;restore status
                        
0b75 : ca                       dex             ;ff
                                tst_x $ff,minus
0b76 : 08              >            php         ;save flags
0b77 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b7b : 68              >            pla         ;load status
0b7c : 48              >            pha
                       >            cmp_flag minus
0b7d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b7f : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b83 : 28              >            plp         ;restore status
                        
                        
0b84 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0b86 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0b88 : 48              >            pha         ;use stack to load status
0b89 : 28              >            plp
                        
0b8a : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0b8b : 08              >            php         ;save flags
0b8c : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0b8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b90 : 68              >            pla         ;load status
0b91 : 48              >            pha
                       >            cmp_flag $ff-zero
0b92 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b94 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b98 : 28              >            plp         ;restore status
                        
0b99 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0b9a : 08              >            php         ;save flags
0b9b : c000            >            cpy #0     ;test result
                       >            trap_ne
0b9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b9f : 68              >            pla         ;load status
0ba0 : 48              >            pha
                       >            cmp_flag $ff-minus
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   49
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0ba1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ba3 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ba5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ba7 : 28              >            plp         ;restore status
                        
0ba8 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0ba9 : 08              >            php         ;save flags
0baa : c001            >            cpy #1     ;test result
                       >            trap_ne
0bac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bae : 68              >            pla         ;load status
0baf : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0bb0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bb2 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb6 : 28              >            plp         ;restore status
                        
0bb7 : 88                       dey             ;00
                                tst_y 0,$ff-minus
0bb8 : 08              >            php         ;save flags
0bb9 : c000            >            cpy #0     ;test result
                       >            trap_ne
0bbb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bbd : 68              >            pla         ;load status
0bbe : 48              >            pha
                       >            cmp_flag $ff-minus
0bbf : 0908            >            ora #decmode        ;ignore decimal mode bit
0bc1 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bc5 : 28              >            plp         ;restore status
                        
0bc6 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0bc7 : 08              >            php         ;save flags
0bc8 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bcc : 68              >            pla         ;load status
0bcd : 48              >            pha
                       >            cmp_flag $ff-zero
0bce : 0908            >            ora #decmode        ;ignore decimal mode bit
0bd0 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bd2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bd4 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   50
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0bd5 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0bd6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0bd8 : 48              >            pha         ;use stack to load status
0bd9 : 28              >            plp
                        
0bda : c8                       iny             ;ff
                                tst_y $ff,0+minus
0bdb : 08              >            php         ;save flags
0bdc : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0be0 : 68              >            pla         ;load status
0be1 : 48              >            pha
                       >            cmp_flag 0+minus
0be2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0be4 : c9b8            >            cmp #(0+minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0be6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0be8 : 28              >            plp         ;restore status
                        
0be9 : c8                       iny             ;00
                                tst_y 0,zero
0bea : 08              >            php         ;save flags
0beb : c000            >            cpy #0     ;test result
                       >            trap_ne
0bed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bef : 68              >            pla         ;load status
0bf0 : 48              >            pha
                       >            cmp_flag zero
0bf1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bf3 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bf5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bf7 : 28              >            plp         ;restore status
                        
0bf8 : c8                       iny             ;01
                                tst_y 1,0
0bf9 : 08              >            php         ;save flags
0bfa : c001            >            cpy #1     ;test result
                       >            trap_ne
0bfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bfe : 68              >            pla         ;load status
0bff : 48              >            pha
                       >            cmp_flag 0
0c00 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c02 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c06 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   51
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0c07 : 88                       dey             ;00
                                tst_y 0,zero
0c08 : 08              >            php         ;save flags
0c09 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c0d : 68              >            pla         ;load status
0c0e : 48              >            pha
                       >            cmp_flag zero
0c0f : 0908            >            ora #decmode        ;ignore decimal mode bit
0c11 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c15 : 28              >            plp         ;restore status
                        
0c16 : 88                       dey             ;ff
                                tst_y $ff,minus
0c17 : 08              >            php         ;save flags
0c18 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c1c : 68              >            pla         ;load status
0c1d : 48              >            pha
                       >            cmp_flag minus
0c1e : 0908            >            ora #decmode        ;ignore decimal mode bit
0c20 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c24 : 28              >            plp         ;restore status
                        
                                        
0c25 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0c27 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c29 : 48              >            pha         ;use stack to load status
0c2a : 28              >            plp
                        
0c2b : 8a                       txa
                                tst_a $ff,$ff-zero
0c2c : 08              >            php         ;save flags
0c2d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0c2f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c31 : 68              >            pla         ;load status
0c32 : 48              >            pha
                       >            cmp_flag $ff-zero
0c33 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c35 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c39 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   52
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
0c3a : 08                       php
0c3b : e8                       inx             ;00
0c3c : 28                       plp
0c3d : 8a                       txa
                                tst_a 0,$ff-minus
0c3e : 08              >            php         ;save flags
0c3f : c900            >            cmp #0     ;test result
                       >            trap_ne
0c41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c43 : 68              >            pla         ;load status
0c44 : 48              >            pha
                       >            cmp_flag $ff-minus
0c45 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c47 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c4b : 28              >            plp         ;restore status
                        
0c4c : 08                       php
0c4d : e8                       inx             ;01
0c4e : 28                       plp
0c4f : 8a                       txa
                                tst_a 1,$ff-minus-zero
0c50 : 08              >            php         ;save flags
0c51 : c901            >            cmp #1     ;test result
                       >            trap_ne
0c53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c55 : 68              >            pla         ;load status
0c56 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0c57 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c59 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c5d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0c5e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c60 : 48              >            pha         ;use stack to load status
0c61 : 28              >            plp
                        
0c62 : 8a                       txa
                                tst_a 1,0
0c63 : 08              >            php         ;save flags
0c64 : c901            >            cmp #1     ;test result
                       >            trap_ne
0c66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c68 : 68              >            pla         ;load status
0c69 : 48              >            pha
                       >            cmp_flag 0
0c6a : 0908            >            ora #decmode        ;ignore decimal mode bit
0c6c : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   53
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                       >            trap_ne
0c6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c70 : 28              >            plp         ;restore status
                        
0c71 : 08                       php
0c72 : ca                       dex             ;00
0c73 : 28                       plp
0c74 : 8a                       txa
                                tst_a 0,zero
0c75 : 08              >            php         ;save flags
0c76 : c900            >            cmp #0     ;test result
                       >            trap_ne
0c78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c7a : 68              >            pla         ;load status
0c7b : 48              >            pha
                       >            cmp_flag zero
0c7c : 0908            >            ora #decmode        ;ignore decimal mode bit
0c7e : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c82 : 28              >            plp         ;restore status
                        
0c83 : 08                       php
0c84 : ca                       dex             ;ff
0c85 : 28                       plp
0c86 : 8a                       txa
                                tst_a $ff,minus
0c87 : 08              >            php         ;save flags
0c88 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0c8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c8c : 68              >            pla         ;load status
0c8d : 48              >            pha
                       >            cmp_flag minus
0c8e : 0908            >            ora #decmode        ;ignore decimal mode bit
0c90 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c94 : 28              >            plp         ;restore status
                        
                                                
0c95 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0c97 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c99 : 48              >            pha         ;use stack to load status
0c9a : 28              >            plp
                        
0c9b : 98                       tya
                                tst_a $ff,$ff-zero
0c9c : 08              >            php         ;save flags
0c9d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   54
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0c9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ca1 : 68              >            pla         ;load status
0ca2 : 48              >            pha
                       >            cmp_flag $ff-zero
0ca3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ca5 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ca7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ca9 : 28              >            plp         ;restore status
                        
0caa : 08                       php
0cab : c8                       iny             ;00
0cac : 28                       plp
0cad : 98                       tya
                                tst_a 0,$ff-minus
0cae : 08              >            php         ;save flags
0caf : c900            >            cmp #0     ;test result
                       >            trap_ne
0cb1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cb3 : 68              >            pla         ;load status
0cb4 : 48              >            pha
                       >            cmp_flag $ff-minus
0cb5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cb7 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cb9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cbb : 28              >            plp         ;restore status
                        
0cbc : 08                       php
0cbd : c8                       iny             ;01
0cbe : 28                       plp
0cbf : 98                       tya
                                tst_a 1,$ff-minus-zero
0cc0 : 08              >            php         ;save flags
0cc1 : c901            >            cmp #1     ;test result
                       >            trap_ne
0cc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cc5 : 68              >            pla         ;load status
0cc6 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0cc7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cc9 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ccb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ccd : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0cce : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0cd0 : 48              >            pha         ;use stack to load status
0cd1 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   55
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0cd2 : 98                       tya
                                tst_a 1,0
0cd3 : 08              >            php         ;save flags
0cd4 : c901            >            cmp #1     ;test result
                       >            trap_ne
0cd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cd8 : 68              >            pla         ;load status
0cd9 : 48              >            pha
                       >            cmp_flag 0
0cda : 0908            >            ora #decmode        ;ignore decimal mode bit
0cdc : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ce0 : 28              >            plp         ;restore status
                        
0ce1 : 08                       php
0ce2 : 88                       dey             ;00
0ce3 : 28                       plp
0ce4 : 98                       tya
                                tst_a 0,zero
0ce5 : 08              >            php         ;save flags
0ce6 : c900            >            cmp #0     ;test result
                       >            trap_ne
0ce8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cea : 68              >            pla         ;load status
0ceb : 48              >            pha
                       >            cmp_flag zero
0cec : 0908            >            ora #decmode        ;ignore decimal mode bit
0cee : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cf0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cf2 : 28              >            plp         ;restore status
                        
0cf3 : 08                       php
0cf4 : 88                       dey             ;ff
0cf5 : 28                       plp
0cf6 : 98                       tya
                                tst_a $ff,minus
0cf7 : 08              >            php         ;save flags
0cf8 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cfc : 68              >            pla         ;load status
0cfd : 48              >            pha
                       >            cmp_flag minus
0cfe : 0908            >            ora #decmode        ;ignore decimal mode bit
0d00 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d04 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   56
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0d05 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d07 : 48                       pha
0d08 : a2ff                     ldx #$ff        ;ff
0d0a : 8a                       txa
0d0b : 28                       plp             
0d0c : a8                       tay
                                tst_y $ff,$ff-zero
0d0d : 08              >            php         ;save flags
0d0e : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d12 : 68              >            pla         ;load status
0d13 : 48              >            pha
                       >            cmp_flag $ff-zero
0d14 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d16 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d1a : 28              >            plp         ;restore status
                        
0d1b : 08                       php
0d1c : e8                       inx             ;00
0d1d : 8a                       txa
0d1e : 28                       plp
0d1f : a8                       tay
                                tst_y 0,$ff-minus
0d20 : 08              >            php         ;save flags
0d21 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d25 : 68              >            pla         ;load status
0d26 : 48              >            pha
                       >            cmp_flag $ff-minus
0d27 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d29 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d2d : 28              >            plp         ;restore status
                        
0d2e : 08                       php
0d2f : e8                       inx             ;01
0d30 : 8a                       txa
0d31 : 28                       plp
0d32 : a8                       tay
                                tst_y 1,$ff-minus-zero
0d33 : 08              >            php         ;save flags
0d34 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d38 : 68              >            pla         ;load status
0d39 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d3a : 0908            >            ora #decmode        ;ignore decimal mode bit
0d3c : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   57
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                       >            trap_ne
0d3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d40 : 28              >            plp         ;restore status
                        
                                load_flag 0
0d41 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0d43 : 48                       pha
0d44 : a900                     lda #0
0d46 : 8a                       txa
0d47 : 28                       plp
0d48 : a8                       tay
                                tst_y 1,0
0d49 : 08              >            php         ;save flags
0d4a : c001            >            cpy #1     ;test result
                       >            trap_ne
0d4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d4e : 68              >            pla         ;load status
0d4f : 48              >            pha
                       >            cmp_flag 0
0d50 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d52 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d56 : 28              >            plp         ;restore status
                        
0d57 : 08                       php
0d58 : ca                       dex             ;00
0d59 : 8a                       txa
0d5a : 28                       plp
0d5b : a8                       tay
                                tst_y 0,zero
0d5c : 08              >            php         ;save flags
0d5d : c000            >            cpy #0     ;test result
                       >            trap_ne
0d5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d61 : 68              >            pla         ;load status
0d62 : 48              >            pha
                       >            cmp_flag zero
0d63 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d65 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d69 : 28              >            plp         ;restore status
                        
0d6a : 08                       php
0d6b : ca                       dex             ;ff
0d6c : 8a                       txa
0d6d : 28                       plp
0d6e : a8                       tay
                                tst_y $ff,minus
0d6f : 08              >            php         ;save flags
0d70 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   58
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0d72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d74 : 68              >            pla         ;load status
0d75 : 48              >            pha
                       >            cmp_flag minus
0d76 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d78 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d7c : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0d7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d7f : 48                       pha
0d80 : a0ff                     ldy #$ff        ;ff
0d82 : 98                       tya
0d83 : 28                       plp
0d84 : aa                       tax
                                tst_x $ff,$ff-zero
0d85 : 08              >            php         ;save flags
0d86 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0d88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d8a : 68              >            pla         ;load status
0d8b : 48              >            pha
                       >            cmp_flag $ff-zero
0d8c : 0908            >            ora #decmode        ;ignore decimal mode bit
0d8e : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d92 : 28              >            plp         ;restore status
                        
0d93 : 08                       php
0d94 : c8                       iny             ;00
0d95 : 98                       tya
0d96 : 28                       plp
0d97 : aa                       tax
                                tst_x 0,$ff-minus
0d98 : 08              >            php         ;save flags
0d99 : e000            >            cpx #0     ;test result
                       >            trap_ne
0d9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d9d : 68              >            pla         ;load status
0d9e : 48              >            pha
                       >            cmp_flag $ff-minus
0d9f : 0908            >            ora #decmode        ;ignore decimal mode bit
0da1 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0da3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0da5 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   59
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0da6 : 08                       php
0da7 : c8                       iny             ;01
0da8 : 98                       tya
0da9 : 28                       plp
0daa : aa                       tax
                                tst_x 1,$ff-minus-zero
0dab : 08              >            php         ;save flags
0dac : e001            >            cpx #1     ;test result
                       >            trap_ne
0dae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db0 : 68              >            pla         ;load status
0db1 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0db2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0db4 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0db6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db8 : 28              >            plp         ;restore status
                        
                                load_flag 0
0db9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0dbb : 48                       pha
0dbc : a900                     lda #0          ;preset status
0dbe : 98                       tya
0dbf : 28                       plp
0dc0 : aa                       tax
                                tst_x 1,0
0dc1 : 08              >            php         ;save flags
0dc2 : e001            >            cpx #1     ;test result
                       >            trap_ne
0dc4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dc6 : 68              >            pla         ;load status
0dc7 : 48              >            pha
                       >            cmp_flag 0
0dc8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0dca : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dcc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dce : 28              >            plp         ;restore status
                        
0dcf : 08                       php
0dd0 : 88                       dey             ;00
0dd1 : 98                       tya
0dd2 : 28                       plp
0dd3 : aa                       tax
                                tst_x 0,zero
0dd4 : 08              >            php         ;save flags
0dd5 : e000            >            cpx #0     ;test result
                       >            trap_ne
0dd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dd9 : 68              >            pla         ;load status
0dda : 48              >            pha
                       >            cmp_flag zero
0ddb : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   60
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0ddd : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ddf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0de1 : 28              >            plp         ;restore status
                        
0de2 : 08                       php
0de3 : 88                       dey             ;ff
0de4 : 98                       tya
0de5 : 28                       plp
0de6 : aa                       tax
                                tst_x $ff,minus
0de7 : 08              >            php         ;save flags
0de8 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0dea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dec : 68              >            pla         ;load status
0ded : 48              >            pha
                       >            cmp_flag minus
0dee : 0908            >            ora #decmode        ;ignore decimal mode bit
0df0 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0df2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0df4 : 28              >            plp         ;restore status
                        
                                next_test
0df5 : ad0002          >            lda test_case   ;previous test
0df8 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0dfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
0dfc : a90e            >            lda #test_num   ;*** next tests' number
0dfe : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
0e01 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
0e03 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e05 : 48              >            pha         ;use stack to load status
0e06 : 28              >            plp
                        
0e07 : 9a                       txs
0e08 : 08                       php
0e09 : ad0101                   lda $101
                                cmp_flag $ff
0e0c : 0908            >            ora #decmode        ;ignore decimal mode bit
0e0e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e10 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   61
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
0e12 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e14 : 48              >            pha         ;use stack to load status
0e15 : 28              >            plp
                        
0e16 : 9a                       txs
0e17 : 08                       php
0e18 : ad0101                   lda $101
                                cmp_flag 0
0e1b : 0908            >            ora #decmode        ;ignore decimal mode bit
0e1d : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e21 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
0e22 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e24 : 48              >            pha         ;use stack to load status
0e25 : 28              >            plp
                        
0e26 : 9a                       txs
0e27 : 08                       php
0e28 : ad0001                   lda $100
                                cmp_flag $ff
0e2b : 0908            >            ora #decmode        ;ignore decimal mode bit
0e2d : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e31 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e33 : 48              >            pha         ;use stack to load status
0e34 : 28              >            plp
                        
0e35 : 9a                       txs
0e36 : 08                       php
0e37 : ad0001                   lda $100
                                cmp_flag 0
0e3a : 0908            >            ora #decmode        ;ignore decimal mode bit
0e3c : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e40 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
0e41 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e43 : 48              >            pha         ;use stack to load status
0e44 : 28              >            plp
                        
0e45 : 9a                       txs
0e46 : 08                       php
0e47 : adff01                   lda $1ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   62
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                cmp_flag $ff
0e4a : 0908            >            ora #decmode        ;ignore decimal mode bit
0e4c : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e4e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e50 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e52 : 48              >            pha         ;use stack to load status
0e53 : 28              >            plp
                        
0e54 : 9a                       txs
0e55 : 08                       php
0e56 : adff01                   lda $1ff
                                cmp_flag 0
0e59 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e5b : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                
0e5d : a201                     ldx #1
0e5f : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
0e60 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e62 : 48              >            pha         ;use stack to load status
0e63 : 28              >            plp
                        
0e64 : ba                       tsx             ;clears Z, N
0e65 : 08                       php             ;sp=00
0e66 : e001                     cpx #1
                                trap_ne
0e68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e6a : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
0e6d : 0908            >            ora #decmode        ;ignore decimal mode bit
0e6f : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e73 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e75 : 48              >            pha         ;use stack to load status
0e76 : 28              >            plp
                        
0e77 : ba                       tsx             ;clears N, sets Z
0e78 : 08                       php             ;sp=ff
0e79 : e000                     cpx #0
                                trap_ne
0e7b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e7d : ad0001                   lda $100
                                cmp_flag $ff-minus
0e80 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e82 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   63
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_ne
0e84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e86 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e88 : 48              >            pha         ;use stack to load status
0e89 : 28              >            plp
                        
0e8a : ba                       tsx             ;clears N, sets Z
0e8b : 08                       php             ;sp=fe
0e8c : e0ff                     cpx #$ff
                                trap_ne
0e8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e90 : adff01                   lda $1ff
                                cmp_flag $ff-zero
0e93 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e95 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
0e99 : a201                     ldx #1
0e9b : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
0e9c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e9e : 48              >            pha         ;use stack to load status
0e9f : 28              >            plp
                        
0ea0 : ba                       tsx             ;clears Z, N
0ea1 : 08                       php             ;sp=00
0ea2 : e001                     cpx #1
                                trap_ne
0ea4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ea6 : ad0101                   lda $101
                                cmp_flag 0
0ea9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0eab : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ead : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0eaf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0eb1 : 48              >            pha         ;use stack to load status
0eb2 : 28              >            plp
                        
0eb3 : ba                       tsx             ;clears N, sets Z
0eb4 : 08                       php             ;sp=ff
0eb5 : e000                     cpx #0
                                trap_ne
0eb7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   64
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0eb9 : ad0001                   lda $100
                                cmp_flag zero
0ebc : 0908            >            ora #decmode        ;ignore decimal mode bit
0ebe : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ec0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0ec2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ec4 : 48              >            pha         ;use stack to load status
0ec5 : 28              >            plp
                        
0ec6 : ba                       tsx             ;clears N, sets Z
0ec7 : 08                       php             ;sp=fe
0ec8 : e0ff                     cpx #$ff
                                trap_ne
0eca : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ecc : adff01                   lda $1ff
                                cmp_flag minus
0ecf : 0908            >            ora #decmode        ;ignore decimal mode bit
0ed1 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ed3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ed5 : 68                       pla             ;sp=ff
                                next_test
0ed6 : ad0002          >            lda test_case   ;previous test
0ed9 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0edb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
0edd : a90f            >            lda #test_num   ;*** next tests' number
0edf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
0ee2 : a003                     ldy #3
0ee4 :                  tldx    
                                set_stat 0
                       >            load_flag 0
0ee4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ee6 : 48              >            pha         ;use stack to load status
0ee7 : 28              >            plp
                        
0ee8 : b613                     ldx zp1,y
0eea : 08                       php         ;test stores do not alter flags
0eeb : 8a                       txa
0eec : 49c3                     eor #$c3
0eee : 28                       plp
0eef : 990302                   sta abst,y
0ef2 : 08                       php         ;flags after load/store sequence
0ef3 : 49c3                     eor #$c3
0ef5 : d91702                   cmp abs1,y  ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   65
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
0ef8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0efa : 68                       pla         ;load status
                                eor_flag 0
0efb : 0908            >            ora #decmode        ;ignore decimal mode bit
0efd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0eff : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f02 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f04 : 88                       dey
0f05 : 10dd                     bpl tldx                  
                        
0f07 : a003                     ldy #3
0f09 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
0f09 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f0b : 48              >            pha         ;use stack to load status
0f0c : 28              >            plp
                        
0f0d : b613                     ldx zp1,y
0f0f : 08                       php         ;test stores do not alter flags
0f10 : 8a                       txa
0f11 : 49c3                     eor #$c3
0f13 : 28                       plp
0f14 : 990302                   sta abst,y
0f17 : 08                       php         ;flags after load/store sequence
0f18 : 49c3                     eor #$c3
0f1a : d91702                   cmp abs1,y  ;test result
                                trap_ne
0f1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f1f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f20 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f22 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f24 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f29 : 88                       dey
0f2a : 10dd                     bpl tldx1                  
                        
0f2c : a003                     ldy #3
0f2e :                  tldx2   
                                set_stat 0
                       >            load_flag 0
0f2e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f30 : 48              >            pha         ;use stack to load status
0f31 : 28              >            plp
                        
0f32 : be1702                   ldx abs1,y
0f35 : 08                       php         ;test stores do not alter flags
0f36 : 8a                       txa
0f37 : 49c3                     eor #$c3
0f39 : aa                       tax
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   66
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0f3a : 28                       plp
0f3b : 960c                     stx zpt,y
0f3d : 08                       php         ;flags after load/store sequence
0f3e : 49c3                     eor #$c3
0f40 : d91300                   cmp zp1,y   ;test result
                                trap_ne
0f43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f45 : 68                       pla         ;load status
                                eor_flag 0
0f46 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f48 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f4a : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f4f : 88                       dey
0f50 : 10dc                     bpl tldx2                  
                        
0f52 : a003                     ldy #3
0f54 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
0f54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f56 : 48              >            pha         ;use stack to load status
0f57 : 28              >            plp
                        
0f58 : be1702                   ldx abs1,y
0f5b : 08                       php         ;test stores do not alter flags
0f5c : 8a                       txa
0f5d : 49c3                     eor #$c3
0f5f : aa                       tax
0f60 : 28                       plp
0f61 : 960c                     stx zpt,y
0f63 : 08                       php         ;flags after load/store sequence
0f64 : 49c3                     eor #$c3
0f66 : d91300                   cmp zp1,y   ;test result
                                trap_ne
0f69 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f6b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f6c : 0908            >            ora #decmode        ;ignore decimal mode bit
0f6e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f70 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f73 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f75 : 88                       dey
0f76 : 10dc                     bpl tldx3
                                
0f78 : a003                     ldy #3      ;testing store result
0f7a : a200                     ldx #0
0f7c : b90c00           tstx    lda zpt,y
0f7f : 49c3                     eor #$c3
0f81 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
0f84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   67
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0f86 : 960c                     stx zpt,y   ;clear                
0f88 : b90302                   lda abst,y
0f8b : 49c3                     eor #$c3
0f8d : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
0f90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f92 : 8a                       txa
0f93 : 990302                   sta abst,y  ;clear                
0f96 : 88                       dey
0f97 : 10e3                     bpl tstx
                                next_test
0f99 : ad0002          >            lda test_case   ;previous test
0f9c : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0f9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
0fa0 : a910            >            lda #test_num   ;*** next tests' number
0fa2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
0fa5 : a0fd                     ldy #3+$fa
0fa7 : b619             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
0fa9 : 8a                       txa
0faa : 990901                   sta abst-$fa,y      ;no STX abs,y!
0fad : 88                       dey
0fae : c0fa                     cpy #$fa
0fb0 : b0f5                     bcs tldx4                  
0fb2 : a0fd                     ldy #3+$fa
0fb4 : be1d01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
0fb7 : 9612                     stx zpt-$fa&$ff,y
0fb9 : 88                       dey
0fba : c0fa                     cpy #$fa
0fbc : b0f6                     bcs tldx5                  
0fbe : a003                     ldy #3      ;testing wraparound result
0fc0 : a200                     ldx #0
0fc2 : b90c00           tstx1   lda zpt,y
0fc5 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
0fc8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fca : 960c                     stx zpt,y   ;clear                
0fcc : b90302                   lda abst,y
0fcf : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
0fd2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fd4 : 8a                       txa
0fd5 : 990302                   sta abst,y  ;clear                
0fd8 : 88                       dey
0fd9 : 10e7                     bpl tstx1
                                next_test
0fdb : ad0002          >            lda test_case   ;previous test
0fde : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0fe0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
0fe2 : a911            >            lda #test_num   ;*** next tests' number
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   68
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0fe4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
0fe7 : a203                     ldx #3
0fe9 :                  tldy    
                                set_stat 0
                       >            load_flag 0
0fe9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0feb : 48              >            pha         ;use stack to load status
0fec : 28              >            plp
                        
0fed : b413                     ldy zp1,x
0fef : 08                       php         ;test stores do not alter flags
0ff0 : 98                       tya
0ff1 : 49c3                     eor #$c3
0ff3 : 28                       plp
0ff4 : 9d0302                   sta abst,x
0ff7 : 08                       php         ;flags after load/store sequence
0ff8 : 49c3                     eor #$c3
0ffa : dd1702                   cmp abs1,x  ;test result
                                trap_ne
0ffd : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fff : 68                       pla         ;load status
                                eor_flag 0
1000 : 0908            >            ora #decmode        ;ignore decimal mode bit
1002 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1004 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1007 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1009 : ca                       dex
100a : 10dd                     bpl tldy                  
                        
100c : a203                     ldx #3
100e :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
100e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1010 : 48              >            pha         ;use stack to load status
1011 : 28              >            plp
                        
1012 : b413                     ldy zp1,x
1014 : 08                       php         ;test stores do not alter flags
1015 : 98                       tya
1016 : 49c3                     eor #$c3
1018 : 28                       plp
1019 : 9d0302                   sta abst,x
101c : 08                       php         ;flags after load/store sequence
101d : 49c3                     eor #$c3
101f : dd1702                   cmp abs1,x  ;test result
                                trap_ne
1022 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1024 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1025 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   69
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1027 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1029 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
102c : d0fe            >        bne *           ;failed not equal (non zero)
                        
102e : ca                       dex
102f : 10dd                     bpl tldy1                  
                        
1031 : a203                     ldx #3
1033 :                  tldy2   
                                set_stat 0
                       >            load_flag 0
1033 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1035 : 48              >            pha         ;use stack to load status
1036 : 28              >            plp
                        
1037 : bc1702                   ldy abs1,x
103a : 08                       php         ;test stores do not alter flags
103b : 98                       tya
103c : 49c3                     eor #$c3
103e : a8                       tay
103f : 28                       plp
1040 : 940c                     sty zpt,x
1042 : 08                       php         ;flags after load/store sequence
1043 : 49c3                     eor #$c3
1045 : d513                     cmp zp1,x   ;test result
                                trap_ne
1047 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1049 : 68                       pla         ;load status
                                eor_flag 0
104a : 0908            >            ora #decmode        ;ignore decimal mode bit
104c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
104e : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1051 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1053 : ca                       dex
1054 : 10dd                     bpl tldy2                  
                        
1056 : a203                     ldx #3
1058 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
1058 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
105a : 48              >            pha         ;use stack to load status
105b : 28              >            plp
                        
105c : bc1702                   ldy abs1,x
105f : 08                       php         ;test stores do not alter flags
1060 : 98                       tya
1061 : 49c3                     eor #$c3
1063 : a8                       tay
1064 : 28                       plp
1065 : 940c                     sty zpt,x
1067 : 08                       php         ;flags after load/store sequence
1068 : 49c3                     eor #$c3
106a : d513                     cmp zp1,x   ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   70
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
106c : d0fe            >        bne *           ;failed not equal (non zero)
                        
106e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
106f : 0908            >            ora #decmode        ;ignore decimal mode bit
1071 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1073 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1076 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1078 : ca                       dex
1079 : 10dd                     bpl tldy3
                        
107b : a203                     ldx #3      ;testing store result
107d : a000                     ldy #0
107f : b50c             tsty    lda zpt,x
1081 : 49c3                     eor #$c3
1083 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1085 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1087 : 940c                     sty zpt,x   ;clear                
1089 : bd0302                   lda abst,x
108c : 49c3                     eor #$c3
108e : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1091 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1093 : 8a                       txa
1094 : 9d0302                   sta abst,x  ;clear                
1097 : ca                       dex
1098 : 10e5                     bpl tsty
                                next_test
109a : ad0002          >            lda test_case   ;previous test
109d : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
109f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
10a1 : a912            >            lda #test_num   ;*** next tests' number
10a3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
10a6 : a2fd                     ldx #3+$fa
10a8 : b419             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
10aa : 98                       tya
10ab : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
10ae : ca                       dex
10af : e0fa                     cpx #$fa
10b1 : b0f5                     bcs tldy4                  
10b3 : a2fd                     ldx #3+$fa
10b5 : bc1d01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
10b8 : 9412                     sty zpt-$fa&$ff,x
10ba : ca                       dex
10bb : e0fa                     cpx #$fa
10bd : b0f6                     bcs tldy5                  
10bf : a203                     ldx #3      ;testing wraparound result
10c1 : a000                     ldy #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   71
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

10c3 : b50c             tsty1   lda zpt,x
10c5 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10c9 : 940c                     sty zpt,x   ;clear                
10cb : bd0302                   lda abst,x
10ce : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10d3 : 8a                       txa
10d4 : 9d0302                   sta abst,x  ;clear                
10d7 : ca                       dex
10d8 : 10e9                     bpl tsty1
                                next_test
10da : ad0002          >            lda test_case   ;previous test
10dd : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
10e1 : a913            >            lda #test_num   ;*** next tests' number
10e3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
10e6 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
10e8 : 48              >            pha         ;use stack to load status
10e9 : 28              >            plp
                        
10ea : a613                     ldx zp1
10ec : 08                       php         ;test stores do not alter flags
10ed : 8a                       txa
10ee : 49c3                     eor #$c3
10f0 : aa                       tax
10f1 : 28                       plp
10f2 : 8e0302                   stx abst
10f5 : 08                       php         ;flags after load/store sequence
10f6 : 49c3                     eor #$c3
10f8 : aa                       tax
10f9 : e0c3                     cpx #$c3    ;test result
                                trap_ne
10fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
10fd : 68                       pla         ;load status
                                eor_flag 0
10fe : 0908            >            ora #decmode        ;ignore decimal mode bit
1100 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1102 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1105 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1107 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   72
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1109 : 48              >            pha         ;use stack to load status
110a : 28              >            plp
                        
110b : a614                     ldx zp1+1
110d : 08                       php         ;test stores do not alter flags
110e : 8a                       txa
110f : 49c3                     eor #$c3
1111 : aa                       tax
1112 : 28                       plp
1113 : 8e0402                   stx abst+1
1116 : 08                       php         ;flags after load/store sequence
1117 : 49c3                     eor #$c3
1119 : aa                       tax
111a : e082                     cpx #$82    ;test result
                                trap_ne
111c : d0fe            >        bne *           ;failed not equal (non zero)
                        
111e : 68                       pla         ;load status
                                eor_flag 0
111f : 0908            >            ora #decmode        ;ignore decimal mode bit
1121 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1123 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1126 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1128 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
112a : 48              >            pha         ;use stack to load status
112b : 28              >            plp
                        
112c : a615                     ldx zp1+2
112e : 08                       php         ;test stores do not alter flags
112f : 8a                       txa
1130 : 49c3                     eor #$c3
1132 : aa                       tax
1133 : 28                       plp
1134 : 8e0502                   stx abst+2
1137 : 08                       php         ;flags after load/store sequence
1138 : 49c3                     eor #$c3
113a : aa                       tax
113b : e041                     cpx #$41    ;test result
                                trap_ne
113d : d0fe            >        bne *           ;failed not equal (non zero)
                        
113f : 68                       pla         ;load status
                                eor_flag 0
1140 : 0908            >            ora #decmode        ;ignore decimal mode bit
1142 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1144 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1147 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1149 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
114b : 48              >            pha         ;use stack to load status
114c : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   73
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
114d : a616                     ldx zp1+3
114f : 08                       php         ;test stores do not alter flags
1150 : 8a                       txa
1151 : 49c3                     eor #$c3
1153 : aa                       tax
1154 : 28                       plp
1155 : 8e0602                   stx abst+3
1158 : 08                       php         ;flags after load/store sequence
1159 : 49c3                     eor #$c3
115b : aa                       tax
115c : e000                     cpx #0      ;test result
                                trap_ne
115e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1160 : 68                       pla         ;load status
                                eor_flag 0
1161 : 0908            >            ora #decmode        ;ignore decimal mode bit
1163 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1165 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1168 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
116a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
116c : 48              >            pha         ;use stack to load status
116d : 28              >            plp
                        
116e : a613                     ldx zp1  
1170 : 08                       php         ;test stores do not alter flags
1171 : 8a                       txa
1172 : 49c3                     eor #$c3
1174 : aa                       tax
1175 : 28                       plp
1176 : 8e0302                   stx abst  
1179 : 08                       php         ;flags after load/store sequence
117a : 49c3                     eor #$c3
117c : aa                       tax
117d : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
117f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1181 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1182 : 0908            >            ora #decmode        ;ignore decimal mode bit
1184 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1186 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1189 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
118b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
118d : 48              >            pha         ;use stack to load status
118e : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   74
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

118f : a614                     ldx zp1+1
1191 : 08                       php         ;test stores do not alter flags
1192 : 8a                       txa
1193 : 49c3                     eor #$c3
1195 : aa                       tax
1196 : 28                       plp
1197 : 8e0402                   stx abst+1
119a : 08                       php         ;flags after load/store sequence
119b : 49c3                     eor #$c3
119d : aa                       tax
119e : e082                     cpx #$82    ;test result
                                trap_ne
11a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11a2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
11a5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11a7 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
11aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11ac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ae : 48              >            pha         ;use stack to load status
11af : 28              >            plp
                        
11b0 : a615                     ldx zp1+2
11b2 : 08                       php         ;test stores do not alter flags
11b3 : 8a                       txa
11b4 : 49c3                     eor #$c3
11b6 : aa                       tax
11b7 : 28                       plp
11b8 : 8e0502                   stx abst+2
11bb : 08                       php         ;flags after load/store sequence
11bc : 49c3                     eor #$c3
11be : aa                       tax
11bf : e041                     cpx #$41    ;test result
                                trap_ne     ;
11c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11c3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
11c6 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11c8 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
11cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11cf : 48              >            pha         ;use stack to load status
11d0 : 28              >            plp
                        
11d1 : a616                     ldx zp1+3
11d3 : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   75
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

11d4 : 8a                       txa
11d5 : 49c3                     eor #$c3
11d7 : aa                       tax
11d8 : 28                       plp
11d9 : 8e0602                   stx abst+3
11dc : 08                       php         ;flags after load/store sequence
11dd : 49c3                     eor #$c3
11df : aa                       tax
11e0 : e000                     cpx #0      ;test result
                                trap_ne
11e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11e4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
11e7 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11e9 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
11ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
11ee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
11f0 : 48              >            pha         ;use stack to load status
11f1 : 28              >            plp
                        
11f2 : ae1702                   ldx abs1  
11f5 : 08                       php         ;test stores do not alter flags
11f6 : 8a                       txa
11f7 : 49c3                     eor #$c3
11f9 : aa                       tax
11fa : 28                       plp
11fb : 860c                     stx zpt  
11fd : 08                       php         ;flags after load/store sequence
11fe : 49c3                     eor #$c3
1200 : c513                     cmp zp1     ;test result
                                trap_ne
1202 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1204 : 68                       pla         ;load status
                                eor_flag 0
1205 : 0908            >            ora #decmode        ;ignore decimal mode bit
1207 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1209 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
120c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
120e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1210 : 48              >            pha         ;use stack to load status
1211 : 28              >            plp
                        
1212 : ae1802                   ldx abs1+1
1215 : 08                       php         ;test stores do not alter flags
1216 : 8a                       txa
1217 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   76
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1219 : aa                       tax
121a : 28                       plp
121b : 860d                     stx zpt+1
121d : 08                       php         ;flags after load/store sequence
121e : 49c3                     eor #$c3
1220 : c514                     cmp zp1+1   ;test result
                                trap_ne
1222 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1224 : 68                       pla         ;load status
                                eor_flag 0
1225 : 0908            >            ora #decmode        ;ignore decimal mode bit
1227 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1229 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
122c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
122e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1230 : 48              >            pha         ;use stack to load status
1231 : 28              >            plp
                        
1232 : ae1902                   ldx abs1+2
1235 : 08                       php         ;test stores do not alter flags
1236 : 8a                       txa
1237 : 49c3                     eor #$c3
1239 : aa                       tax
123a : 28                       plp
123b : 860e                     stx zpt+2
123d : 08                       php         ;flags after load/store sequence
123e : 49c3                     eor #$c3
1240 : c515                     cmp zp1+2   ;test result
                                trap_ne
1242 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1244 : 68                       pla         ;load status
                                eor_flag 0
1245 : 0908            >            ora #decmode        ;ignore decimal mode bit
1247 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1249 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
124c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
124e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1250 : 48              >            pha         ;use stack to load status
1251 : 28              >            plp
                        
1252 : ae1a02                   ldx abs1+3
1255 : 08                       php         ;test stores do not alter flags
1256 : 8a                       txa
1257 : 49c3                     eor #$c3
1259 : aa                       tax
125a : 28                       plp
125b : 860f                     stx zpt+3
125d : 08                       php         ;flags after load/store sequence
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   77
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

125e : 49c3                     eor #$c3
1260 : c516                     cmp zp1+3   ;test result
                                trap_ne
1262 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1264 : 68                       pla         ;load status
                                eor_flag 0
1265 : 0908            >            ora #decmode        ;ignore decimal mode bit
1267 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1269 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
126c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
126e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1270 : 48              >            pha         ;use stack to load status
1271 : 28              >            plp
                        
1272 : ae1702                   ldx abs1  
1275 : 08                       php         ;test stores do not alter flags
1276 : 8a                       txa
1277 : 49c3                     eor #$c3
1279 : aa                       tax
127a : 28                       plp
127b : 860c                     stx zpt  
127d : 08                       php         ;flags after load/store sequence
127e : 49c3                     eor #$c3
1280 : aa                       tax
1281 : e413                     cpx zp1     ;test result
                                trap_ne
1283 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1285 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1286 : 0908            >            ora #decmode        ;ignore decimal mode bit
1288 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
128a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
128d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
128f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1291 : 48              >            pha         ;use stack to load status
1292 : 28              >            plp
                        
1293 : ae1802                   ldx abs1+1
1296 : 08                       php         ;test stores do not alter flags
1297 : 8a                       txa
1298 : 49c3                     eor #$c3
129a : aa                       tax
129b : 28                       plp
129c : 860d                     stx zpt+1
129e : 08                       php         ;flags after load/store sequence
129f : 49c3                     eor #$c3
12a1 : aa                       tax
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   78
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

12a2 : e414                     cpx zp1+1   ;test result
                                trap_ne
12a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12a6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
12a9 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12ab : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
12ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12b2 : 48              >            pha         ;use stack to load status
12b3 : 28              >            plp
                        
12b4 : ae1902                   ldx abs1+2
12b7 : 08                       php         ;test stores do not alter flags
12b8 : 8a                       txa
12b9 : 49c3                     eor #$c3
12bb : aa                       tax
12bc : 28                       plp
12bd : 860e                     stx zpt+2
12bf : 08                       php         ;flags after load/store sequence
12c0 : 49c3                     eor #$c3
12c2 : aa                       tax
12c3 : e415                     cpx zp1+2   ;test result
                                trap_ne
12c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12c7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12c8 : 0908            >            ora #decmode        ;ignore decimal mode bit
12ca : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12cc : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
12cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12d1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12d3 : 48              >            pha         ;use stack to load status
12d4 : 28              >            plp
                        
12d5 : ae1a02                   ldx abs1+3
12d8 : 08                       php         ;test stores do not alter flags
12d9 : 8a                       txa
12da : 49c3                     eor #$c3
12dc : aa                       tax
12dd : 28                       plp
12de : 860f                     stx zpt+3
12e0 : 08                       php         ;flags after load/store sequence
12e1 : 49c3                     eor #$c3
12e3 : aa                       tax
12e4 : e416                     cpx zp1+3   ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   79
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

12e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
12eb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12ed : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
12f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
12f2 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
12f4 : 48              >            pha         ;use stack to load status
12f5 : 28              >            plp
                        
12f6 : a2c3                     ldx #$c3
12f8 : 08                       php
12f9 : ec1702                   cpx abs1    ;test result
                                trap_ne
12fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
12fe : 68                       pla         ;load status
                                eor_flag 0
12ff : 0908            >            ora #decmode        ;ignore decimal mode bit
1301 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1303 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1306 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1308 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
130a : 48              >            pha         ;use stack to load status
130b : 28              >            plp
                        
130c : a282                     ldx #$82
130e : 08                       php
130f : ec1802                   cpx abs1+1  ;test result
                                trap_ne
1312 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1314 : 68                       pla         ;load status
                                eor_flag 0
1315 : 0908            >            ora #decmode        ;ignore decimal mode bit
1317 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1319 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
131c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
131e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1320 : 48              >            pha         ;use stack to load status
1321 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   80
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1322 : a241                     ldx #$41
1324 : 08                       php
1325 : ec1902                   cpx abs1+2  ;test result
                                trap_ne
1328 : d0fe            >        bne *           ;failed not equal (non zero)
                        
132a : 68                       pla         ;load status
                                eor_flag 0
132b : 0908            >            ora #decmode        ;ignore decimal mode bit
132d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
132f : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1332 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1334 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1336 : 48              >            pha         ;use stack to load status
1337 : 28              >            plp
                        
1338 : a200                     ldx #0
133a : 08                       php
133b : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
133e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1340 : 68                       pla         ;load status
                                eor_flag 0
1341 : 0908            >            ora #decmode        ;ignore decimal mode bit
1343 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1345 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1348 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
134a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
134c : 48              >            pha         ;use stack to load status
134d : 28              >            plp
                        
134e : a2c3                     ldx #$c3  
1350 : 08                       php
1351 : ec1702                   cpx abs1    ;test result
                                trap_ne
1354 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1356 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1357 : 0908            >            ora #decmode        ;ignore decimal mode bit
1359 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
135b : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
135e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   81
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag $ff
1360 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1362 : 48              >            pha         ;use stack to load status
1363 : 28              >            plp
                        
1364 : a282                     ldx #$82
1366 : 08                       php
1367 : ec1802                   cpx abs1+1  ;test result
                                trap_ne
136a : d0fe            >        bne *           ;failed not equal (non zero)
                        
136c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
136d : 0908            >            ora #decmode        ;ignore decimal mode bit
136f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1371 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1374 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1376 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1378 : 48              >            pha         ;use stack to load status
1379 : 28              >            plp
                        
137a : a241                     ldx #$41
137c : 08                       php
137d : ec1902                   cpx abs1+2  ;test result
                                trap_ne
1380 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1382 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1383 : 0908            >            ora #decmode        ;ignore decimal mode bit
1385 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1387 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
138a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
138c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
138e : 48              >            pha         ;use stack to load status
138f : 28              >            plp
                        
1390 : a200                     ldx #0
1392 : 08                       php
1393 : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
1396 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1398 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1399 : 0908            >            ora #decmode        ;ignore decimal mode bit
139b : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
139d : cd1f02                   cmp fLDx+3  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   82
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
13a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
13a2 : a200                     ldx #0
13a4 : a50c                     lda zpt  
13a6 : 49c3                     eor #$c3
13a8 : c513                     cmp zp1  
                                trap_ne     ;store to zp data
13aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
13ac : 860c                     stx zpt     ;clear                
13ae : ad0302                   lda abst  
13b1 : 49c3                     eor #$c3
13b3 : cd1702                   cmp abs1  
                                trap_ne     ;store to abs data
13b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13b8 : 8e0302                   stx abst    ;clear                
13bb : a50d                     lda zpt+1
13bd : 49c3                     eor #$c3
13bf : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
13c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13c3 : 860d                     stx zpt+1   ;clear                
13c5 : ad0402                   lda abst+1
13c8 : 49c3                     eor #$c3
13ca : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
13cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
13cf : 8e0402                   stx abst+1  ;clear                
13d2 : a50e                     lda zpt+2
13d4 : 49c3                     eor #$c3
13d6 : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
13d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13da : 860e                     stx zpt+2   ;clear                
13dc : ad0502                   lda abst+2
13df : 49c3                     eor #$c3
13e1 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
13e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13e6 : 8e0502                   stx abst+2  ;clear                
13e9 : a50f                     lda zpt+3
13eb : 49c3                     eor #$c3
13ed : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
13ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
13f1 : 860f                     stx zpt+3   ;clear                
13f3 : ad0602                   lda abst+3
13f6 : 49c3                     eor #$c3
13f8 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
13fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
13fd : 8e0602                   stx abst+3  ;clear                
                                next_test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   83
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1400 : ad0002          >            lda test_case   ;previous test
1403 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1405 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
1407 : a914            >            lda #test_num   ;*** next tests' number
1409 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
140c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
140e : 48              >            pha         ;use stack to load status
140f : 28              >            plp
                        
1410 : a413                     ldy zp1  
1412 : 08                       php         ;test stores do not alter flags
1413 : 98                       tya
1414 : 49c3                     eor #$c3
1416 : a8                       tay
1417 : 28                       plp
1418 : 8c0302                   sty abst  
141b : 08                       php         ;flags after load/store sequence
141c : 49c3                     eor #$c3
141e : a8                       tay
141f : c0c3                     cpy #$c3    ;test result
                                trap_ne
1421 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1423 : 68                       pla         ;load status
                                eor_flag 0
1424 : 0908            >            ora #decmode        ;ignore decimal mode bit
1426 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1428 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
142b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
142d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
142f : 48              >            pha         ;use stack to load status
1430 : 28              >            plp
                        
1431 : a414                     ldy zp1+1
1433 : 08                       php         ;test stores do not alter flags
1434 : 98                       tya
1435 : 49c3                     eor #$c3
1437 : a8                       tay
1438 : 28                       plp
1439 : 8c0402                   sty abst+1
143c : 08                       php         ;flags after load/store sequence
143d : 49c3                     eor #$c3
143f : a8                       tay
1440 : c082                     cpy #$82    ;test result
                                trap_ne
1442 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   84
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1444 : 68                       pla         ;load status
                                eor_flag 0
1445 : 0908            >            ora #decmode        ;ignore decimal mode bit
1447 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1449 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
144c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
144e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1450 : 48              >            pha         ;use stack to load status
1451 : 28              >            plp
                        
1452 : a415                     ldy zp1+2
1454 : 08                       php         ;test stores do not alter flags
1455 : 98                       tya
1456 : 49c3                     eor #$c3
1458 : a8                       tay
1459 : 28                       plp
145a : 8c0502                   sty abst+2
145d : 08                       php         ;flags after load/store sequence
145e : 49c3                     eor #$c3
1460 : a8                       tay
1461 : c041                     cpy #$41    ;test result
                                trap_ne
1463 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1465 : 68                       pla         ;load status
                                eor_flag 0
1466 : 0908            >            ora #decmode        ;ignore decimal mode bit
1468 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
146a : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
146d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
146f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1471 : 48              >            pha         ;use stack to load status
1472 : 28              >            plp
                        
1473 : a416                     ldy zp1+3
1475 : 08                       php         ;test stores do not alter flags
1476 : 98                       tya
1477 : 49c3                     eor #$c3
1479 : a8                       tay
147a : 28                       plp
147b : 8c0602                   sty abst+3
147e : 08                       php         ;flags after load/store sequence
147f : 49c3                     eor #$c3
1481 : a8                       tay
1482 : c000                     cpy #0      ;test result
                                trap_ne
1484 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1486 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   85
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag 0
1487 : 0908            >            ora #decmode        ;ignore decimal mode bit
1489 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
148b : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
148e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1490 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1492 : 48              >            pha         ;use stack to load status
1493 : 28              >            plp
                        
1494 : a413                     ldy zp1  
1496 : 08                       php         ;test stores do not alter flags
1497 : 98                       tya
1498 : 49c3                     eor #$c3
149a : a8                       tay
149b : 28                       plp
149c : 8c0302                   sty abst  
149f : 08                       php         ;flags after load/store sequence
14a0 : 49c3                     eor #$c3
14a2 : a8                       tay
14a3 : c0c3                     cpy #$c3    ;test result
                                trap_ne
14a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14a7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14a8 : 0908            >            ora #decmode        ;ignore decimal mode bit
14aa : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14ac : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
14af : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14b3 : 48              >            pha         ;use stack to load status
14b4 : 28              >            plp
                        
14b5 : a414                     ldy zp1+1
14b7 : 08                       php         ;test stores do not alter flags
14b8 : 98                       tya
14b9 : 49c3                     eor #$c3
14bb : a8                       tay
14bc : 28                       plp
14bd : 8c0402                   sty abst+1
14c0 : 08                       php         ;flags after load/store sequence
14c1 : 49c3                     eor #$c3
14c3 : a8                       tay
14c4 : c082                     cpy #$82   ;test result
                                trap_ne
14c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14c8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   86
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

14c9 : 0908            >            ora #decmode        ;ignore decimal mode bit
14cb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14cd : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
14d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14d4 : 48              >            pha         ;use stack to load status
14d5 : 28              >            plp
                        
14d6 : a415                     ldy zp1+2
14d8 : 08                       php         ;test stores do not alter flags
14d9 : 98                       tya
14da : 49c3                     eor #$c3
14dc : a8                       tay
14dd : 28                       plp
14de : 8c0502                   sty abst+2
14e1 : 08                       php         ;flags after load/store sequence
14e2 : 49c3                     eor #$c3
14e4 : a8                       tay
14e5 : c041                     cpy #$41    ;test result
                                trap_ne
14e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14e9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14ea : 0908            >            ora #decmode        ;ignore decimal mode bit
14ec : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14ee : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
14f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14f5 : 48              >            pha         ;use stack to load status
14f6 : 28              >            plp
                        
14f7 : a416                     ldy zp1+3
14f9 : 08                       php         ;test stores do not alter flags
14fa : 98                       tya
14fb : 49c3                     eor #$c3
14fd : a8                       tay
14fe : 28                       plp
14ff : 8c0602                   sty abst+3
1502 : 08                       php         ;flags after load/store sequence
1503 : 49c3                     eor #$c3
1505 : a8                       tay
1506 : c000                     cpy #0      ;test result
                                trap_ne
1508 : d0fe            >        bne *           ;failed not equal (non zero)
                        
150a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
150b : 0908            >            ora #decmode        ;ignore decimal mode bit
150d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   87
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
150f : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1512 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
1514 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1516 : 48              >            pha         ;use stack to load status
1517 : 28              >            plp
                        
1518 : ac1702                   ldy abs1  
151b : 08                       php         ;test stores do not alter flags
151c : 98                       tya
151d : 49c3                     eor #$c3
151f : a8                       tay
1520 : 28                       plp
1521 : 840c                     sty zpt  
1523 : 08                       php         ;flags after load/store sequence
1524 : 49c3                     eor #$c3
1526 : a8                       tay
1527 : c413                     cpy zp1     ;test result
                                trap_ne
1529 : d0fe            >        bne *           ;failed not equal (non zero)
                        
152b : 68                       pla         ;load status
                                eor_flag 0
152c : 0908            >            ora #decmode        ;ignore decimal mode bit
152e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1530 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1533 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1535 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1537 : 48              >            pha         ;use stack to load status
1538 : 28              >            plp
                        
1539 : ac1802                   ldy abs1+1
153c : 08                       php         ;test stores do not alter flags
153d : 98                       tya
153e : 49c3                     eor #$c3
1540 : a8                       tay
1541 : 28                       plp
1542 : 840d                     sty zpt+1
1544 : 08                       php         ;flags after load/store sequence
1545 : 49c3                     eor #$c3
1547 : a8                       tay
1548 : c414                     cpy zp1+1   ;test result
                                trap_ne
154a : d0fe            >        bne *           ;failed not equal (non zero)
                        
154c : 68                       pla         ;load status
                                eor_flag 0
154d : 0908            >            ora #decmode        ;ignore decimal mode bit
154f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   88
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1551 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1554 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1556 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1558 : 48              >            pha         ;use stack to load status
1559 : 28              >            plp
                        
155a : ac1902                   ldy abs1+2
155d : 08                       php         ;test stores do not alter flags
155e : 98                       tya
155f : 49c3                     eor #$c3
1561 : a8                       tay
1562 : 28                       plp
1563 : 840e                     sty zpt+2
1565 : 08                       php         ;flags after load/store sequence
1566 : 49c3                     eor #$c3
1568 : a8                       tay
1569 : c415                     cpy zp1+2   ;test result
                                trap_ne
156b : d0fe            >        bne *           ;failed not equal (non zero)
                        
156d : 68                       pla         ;load status
                                eor_flag 0
156e : 0908            >            ora #decmode        ;ignore decimal mode bit
1570 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1572 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1575 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1577 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1579 : 48              >            pha         ;use stack to load status
157a : 28              >            plp
                        
157b : ac1a02                   ldy abs1+3
157e : 08                       php         ;test stores do not alter flags
157f : 98                       tya
1580 : 49c3                     eor #$c3
1582 : a8                       tay
1583 : 28                       plp
1584 : 840f                     sty zpt+3
1586 : 08                       php         ;flags after load/store sequence
1587 : 49c3                     eor #$c3
1589 : a8                       tay
158a : c416                     cpy zp1+3   ;test result
                                trap_ne
158c : d0fe            >        bne *           ;failed not equal (non zero)
                        
158e : 68                       pla         ;load status
                                eor_flag 0
158f : 0908            >            ora #decmode        ;ignore decimal mode bit
1591 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1593 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   89
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1596 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1598 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
159a : 48              >            pha         ;use stack to load status
159b : 28              >            plp
                        
159c : ac1702                   ldy abs1  
159f : 08                       php         ;test stores do not alter flags
15a0 : 98                       tya
15a1 : 49c3                     eor #$c3
15a3 : a8                       tay
15a4 : 28                       plp
15a5 : 840c                     sty zpt  
15a7 : 08                       php         ;flags after load/store sequence
15a8 : 49c3                     eor #$c3
15aa : a8                       tay
15ab : c513                     cmp zp1     ;test result
                                trap_ne
15ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
15af : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15b0 : 0908            >            ora #decmode        ;ignore decimal mode bit
15b2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15b4 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
15b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15bb : 48              >            pha         ;use stack to load status
15bc : 28              >            plp
                        
15bd : ac1802                   ldy abs1+1
15c0 : 08                       php         ;test stores do not alter flags
15c1 : 98                       tya
15c2 : 49c3                     eor #$c3
15c4 : a8                       tay
15c5 : 28                       plp
15c6 : 840d                     sty zpt+1
15c8 : 08                       php         ;flags after load/store sequence
15c9 : 49c3                     eor #$c3
15cb : a8                       tay
15cc : c514                     cmp zp1+1   ;test result
                                trap_ne
15ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
15d0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15d1 : 0908            >            ora #decmode        ;ignore decimal mode bit
15d3 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15d5 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
15d8 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   90
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_stat $ff
                       >            load_flag $ff
15da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15dc : 48              >            pha         ;use stack to load status
15dd : 28              >            plp
                        
15de : ac1902                   ldy abs1+2
15e1 : 08                       php         ;test stores do not alter flags
15e2 : 98                       tya
15e3 : 49c3                     eor #$c3
15e5 : a8                       tay
15e6 : 28                       plp
15e7 : 840e                     sty zpt+2
15e9 : 08                       php         ;flags after load/store sequence
15ea : 49c3                     eor #$c3
15ec : a8                       tay
15ed : c515                     cmp zp1+2   ;test result
                                trap_ne
15ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
15f1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
15f4 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15f6 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
15f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15fd : 48              >            pha         ;use stack to load status
15fe : 28              >            plp
                        
15ff : ac1a02                   ldy abs1+3
1602 : 08                       php         ;test stores do not alter flags
1603 : 98                       tya
1604 : 49c3                     eor #$c3
1606 : a8                       tay
1607 : 28                       plp
1608 : 840f                     sty zpt+3
160a : 08                       php         ;flags after load/store sequence
160b : 49c3                     eor #$c3
160d : a8                       tay
160e : c516                     cmp zp1+3   ;test result
                                trap_ne
1610 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1612 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1613 : 0908            >            ora #decmode        ;ignore decimal mode bit
1615 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1617 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
161a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   91
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_stat 0
                       >            load_flag 0
161c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
161e : 48              >            pha         ;use stack to load status
161f : 28              >            plp
                        
1620 : a0c3                     ldy #$c3  
1622 : 08                       php
1623 : cc1702                   cpy abs1    ;test result
                                trap_ne
1626 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1628 : 68                       pla         ;load status
                                eor_flag 0
1629 : 0908            >            ora #decmode        ;ignore decimal mode bit
162b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
162d : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1630 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1632 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1634 : 48              >            pha         ;use stack to load status
1635 : 28              >            plp
                        
1636 : a082                     ldy #$82
1638 : 08                       php
1639 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
163c : d0fe            >        bne *           ;failed not equal (non zero)
                        
163e : 68                       pla         ;load status
                                eor_flag 0
163f : 0908            >            ora #decmode        ;ignore decimal mode bit
1641 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1643 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1646 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1648 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
164a : 48              >            pha         ;use stack to load status
164b : 28              >            plp
                        
164c : a041                     ldy #$41
164e : 08                       php
164f : cc1902                   cpy abs1+2  ;test result
                                trap_ne
1652 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1654 : 68                       pla         ;load status
                                eor_flag 0
1655 : 0908            >            ora #decmode        ;ignore decimal mode bit
1657 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   92
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1659 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
165c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
165e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1660 : 48              >            pha         ;use stack to load status
1661 : 28              >            plp
                        
1662 : a000                     ldy #0
1664 : 08                       php
1665 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
1668 : d0fe            >        bne *           ;failed not equal (non zero)
                        
166a : 68                       pla         ;load status
                                eor_flag 0
166b : 0908            >            ora #decmode        ;ignore decimal mode bit
166d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
166f : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1672 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1674 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1676 : 48              >            pha         ;use stack to load status
1677 : 28              >            plp
                        
1678 : a0c3                     ldy #$c3  
167a : 08                       php
167b : cc1702                   cpy abs1    ;test result
                                trap_ne
167e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1680 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1681 : 0908            >            ora #decmode        ;ignore decimal mode bit
1683 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1685 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1688 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
168a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
168c : 48              >            pha         ;use stack to load status
168d : 28              >            plp
                        
168e : a082                     ldy #$82
1690 : 08                       php
1691 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
1694 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   93
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1696 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1697 : 0908            >            ora #decmode        ;ignore decimal mode bit
1699 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
169b : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
169e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16a0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16a2 : 48              >            pha         ;use stack to load status
16a3 : 28              >            plp
                        
16a4 : a041                     ldy #$41
16a6 : 08                       php
16a7 : cc1902                   cpy abs1+2   ;test result
                                trap_ne
16aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
16ac : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16ad : 0908            >            ora #decmode        ;ignore decimal mode bit
16af : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16b1 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
16b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16b8 : 48              >            pha         ;use stack to load status
16b9 : 28              >            plp
                        
16ba : a000                     ldy #0
16bc : 08                       php
16bd : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
16c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16c2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
16c5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16c7 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
16ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
16cc : a000                     ldy #0
16ce : a50c                     lda zpt  
16d0 : 49c3                     eor #$c3
16d2 : c513                     cmp zp1  
                                trap_ne     ;store to zp   data
16d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   94
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

16d6 : 840c                     sty zpt     ;clear                
16d8 : ad0302                   lda abst  
16db : 49c3                     eor #$c3
16dd : cd1702                   cmp abs1  
                                trap_ne     ;store to abs   data
16e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16e2 : 8c0302                   sty abst    ;clear                
16e5 : a50d                     lda zpt+1
16e7 : 49c3                     eor #$c3
16e9 : c514                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
16eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
16ed : 840d                     sty zpt+1   ;clear                
16ef : ad0402                   lda abst+1
16f2 : 49c3                     eor #$c3
16f4 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
16f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16f9 : 8c0402                   sty abst+1  ;clear                
16fc : a50e                     lda zpt+2
16fe : 49c3                     eor #$c3
1700 : c515                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
1702 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1704 : 840e                     sty zpt+2   ;clear                
1706 : ad0502                   lda abst+2
1709 : 49c3                     eor #$c3
170b : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
170e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1710 : 8c0502                   sty abst+2  ;clear                
1713 : a50f                     lda zpt+3
1715 : 49c3                     eor #$c3
1717 : c516                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1719 : d0fe            >        bne *           ;failed not equal (non zero)
                        
171b : 840f                     sty zpt+3   ;clear                
171d : ad0602                   lda abst+3
1720 : 49c3                     eor #$c3
1722 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
1725 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1727 : 8c0602                   sty abst+3  ;clear                
                                next_test
172a : ad0002          >            lda test_case   ;previous test
172d : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
172f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
1731 : a915            >            lda #test_num   ;*** next tests' number
1733 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   95
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1736 : a203                     ldx #3
1738 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1738 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
173a : 48              >            pha         ;use stack to load status
173b : 28              >            plp
                        
173c : b513                     lda zp1,x
173e : 08                       php         ;test stores do not alter flags
173f : 49c3                     eor #$c3
1741 : 28                       plp
1742 : 9d0302                   sta abst,x
1745 : 08                       php         ;flags after load/store sequence
1746 : 49c3                     eor #$c3
1748 : dd1702                   cmp abs1,x  ;test result
                                trap_ne
174b : d0fe            >        bne *           ;failed not equal (non zero)
                        
174d : 68                       pla         ;load status
                                eor_flag 0
174e : 0908            >            ora #decmode        ;ignore decimal mode bit
1750 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1752 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1755 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1757 : ca                       dex
1758 : 10de                     bpl tldax                  
                        
175a : a203                     ldx #3
175c :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
175c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
175e : 48              >            pha         ;use stack to load status
175f : 28              >            plp
                        
1760 : b513                     lda zp1,x
1762 : 08                       php         ;test stores do not alter flags
1763 : 49c3                     eor #$c3
1765 : 28                       plp
1766 : 9d0302                   sta abst,x
1769 : 08                       php         ;flags after load/store sequence
176a : 49c3                     eor #$c3
176c : dd1702                   cmp abs1,x   ;test result
                                trap_ne
176f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1771 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1772 : 0908            >            ora #decmode        ;ignore decimal mode bit
1774 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1776 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1779 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   96
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
177b : ca                       dex
177c : 10de                     bpl tldax1                  
                        
177e : a203                     ldx #3
1780 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
1780 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1782 : 48              >            pha         ;use stack to load status
1783 : 28              >            plp
                        
1784 : bd1702                   lda abs1,x
1787 : 08                       php         ;test stores do not alter flags
1788 : 49c3                     eor #$c3
178a : 28                       plp
178b : 950c                     sta zpt,x
178d : 08                       php         ;flags after load/store sequence
178e : 49c3                     eor #$c3
1790 : d513                     cmp zp1,x   ;test result
                                trap_ne
1792 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1794 : 68                       pla         ;load status
                                eor_flag 0
1795 : 0908            >            ora #decmode        ;ignore decimal mode bit
1797 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1799 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
179c : d0fe            >        bne *           ;failed not equal (non zero)
                        
179e : ca                       dex
179f : 10df                     bpl tldax2                  
                        
17a1 : a203                     ldx #3
17a3 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
17a3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17a5 : 48              >            pha         ;use stack to load status
17a6 : 28              >            plp
                        
17a7 : bd1702                   lda abs1,x
17aa : 08                       php         ;test stores do not alter flags
17ab : 49c3                     eor #$c3
17ad : 28                       plp
17ae : 950c                     sta zpt,x
17b0 : 08                       php         ;flags after load/store sequence
17b1 : 49c3                     eor #$c3
17b3 : d513                     cmp zp1,x   ;test result
                                trap_ne
17b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17b7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
17ba : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
17bc : dd1c02                   cmp fLDx,x  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   97
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
17bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
17c1 : ca                       dex
17c2 : 10df                     bpl tldax3
                        
17c4 : a203                     ldx #3      ;testing store result
17c6 : a000                     ldy #0
17c8 : b50c             tstax   lda zpt,x
17ca : 49c3                     eor #$c3
17cc : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
17ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
17d0 : 940c                     sty zpt,x   ;clear                
17d2 : bd0302                   lda abst,x
17d5 : 49c3                     eor #$c3
17d7 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
17da : d0fe            >        bne *           ;failed not equal (non zero)
                        
17dc : 8a                       txa
17dd : 9d0302                   sta abst,x  ;clear                
17e0 : ca                       dex
17e1 : 10e5                     bpl tstax
                                next_test
17e3 : ad0002          >            lda test_case   ;previous test
17e6 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
17e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
17ea : a916            >            lda #test_num   ;*** next tests' number
17ec : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
17ef : a003                     ldy #3
17f1 :                  tlday    
                                set_stat 0
                       >            load_flag 0
17f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17f3 : 48              >            pha         ;use stack to load status
17f4 : 28              >            plp
                        
17f5 : b124                     lda (ind1),y
17f7 : 08                       php         ;test stores do not alter flags
17f8 : 49c3                     eor #$c3
17fa : 28                       plp
17fb : 990302                   sta abst,y
17fe : 08                       php         ;flags after load/store sequence
17ff : 49c3                     eor #$c3
1801 : d91702                   cmp abs1,y  ;test result
                                trap_ne
1804 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1806 : 68                       pla         ;load status
                                eor_flag 0
1807 : 0908            >            ora #decmode        ;ignore decimal mode bit
1809 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   98
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
180b : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
180e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1810 : 88                       dey
1811 : 10de                     bpl tlday                  
                        
1813 : a003                     ldy #3
1815 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
1815 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1817 : 48              >            pha         ;use stack to load status
1818 : 28              >            plp
                        
1819 : b124                     lda (ind1),y
181b : 08                       php         ;test stores do not alter flags
181c : 49c3                     eor #$c3
181e : 28                       plp
181f : 990302                   sta abst,y
1822 : 08                       php         ;flags after load/store sequence
1823 : 49c3                     eor #$c3
1825 : d91702                   cmp abs1,y  ;test result
                                trap_ne
1828 : d0fe            >        bne *           ;failed not equal (non zero)
                        
182a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
182b : 0908            >            ora #decmode        ;ignore decimal mode bit
182d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
182f : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
1832 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1834 : 88                       dey
1835 : 10de                     bpl tlday1                  
                        
1837 : a003                     ldy #3      ;testing store result
1839 : a200                     ldx #0
183b : b90302           tstay   lda abst,y
183e : 49c3                     eor #$c3
1840 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1843 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1845 : 8a                       txa
1846 : 990302                   sta abst,y  ;clear                
1849 : 88                       dey
184a : 10ef                     bpl tstay
                        
184c : a003                     ldy #3
184e :                  tlday2   
                                set_stat 0
                       >            load_flag 0
184e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1850 : 48              >            pha         ;use stack to load status
1851 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   99
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1852 : b91702                   lda abs1,y
1855 : 08                       php         ;test stores do not alter flags
1856 : 49c3                     eor #$c3
1858 : 28                       plp
1859 : 9130                     sta (indt),y
185b : 08                       php         ;flags after load/store sequence
185c : 49c3                     eor #$c3
185e : d124                     cmp (ind1),y    ;test result
                                trap_ne
1860 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1862 : 68                       pla         ;load status
                                eor_flag 0
1863 : 0908            >            ora #decmode        ;ignore decimal mode bit
1865 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1867 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
186a : d0fe            >        bne *           ;failed not equal (non zero)
                        
186c : 88                       dey
186d : 10df                     bpl tlday2                  
                        
186f : a003                     ldy #3
1871 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
1871 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1873 : 48              >            pha         ;use stack to load status
1874 : 28              >            plp
                        
1875 : b91702                   lda abs1,y
1878 : 08                       php         ;test stores do not alter flags
1879 : 49c3                     eor #$c3
187b : 28                       plp
187c : 9130                     sta (indt),y
187e : 08                       php         ;flags after load/store sequence
187f : 49c3                     eor #$c3
1881 : d124                     cmp (ind1),y   ;test result
                                trap_ne
1883 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1885 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1886 : 0908            >            ora #decmode        ;ignore decimal mode bit
1888 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
188a : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
188d : d0fe            >        bne *           ;failed not equal (non zero)
                        
188f : 88                       dey
1890 : 10df                     bpl tlday3
                                
1892 : a003                     ldy #3      ;testing store result
1894 : a200                     ldx #0
1896 : b90302           tstay1  lda abst,y
1899 : 49c3                     eor #$c3
189b : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
189e : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  100
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
18a0 : 8a                       txa
18a1 : 990302                   sta abst,y  ;clear                
18a4 : 88                       dey
18a5 : 10ef                     bpl tstay1
                                
18a7 : a206                     ldx #6
18a9 : a003                     ldy #3
18ab :                  tldax4   
                                set_stat 0
                       >            load_flag 0
18ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18ad : 48              >            pha         ;use stack to load status
18ae : 28              >            plp
                        
18af : a124                     lda (ind1,x)
18b1 : 08                       php         ;test stores do not alter flags
18b2 : 49c3                     eor #$c3
18b4 : 28                       plp
18b5 : 8130                     sta (indt,x)
18b7 : 08                       php         ;flags after load/store sequence
18b8 : 49c3                     eor #$c3
18ba : d91702                   cmp abs1,y  ;test result
                                trap_ne
18bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
18bf : 68                       pla         ;load status
                                eor_flag 0
18c0 : 0908            >            ora #decmode        ;ignore decimal mode bit
18c2 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
18c4 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
18c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18c9 : ca                       dex
18ca : ca                       dex
18cb : 88                       dey
18cc : 10dd                     bpl tldax4                  
                        
18ce : a206                     ldx #6
18d0 : a003                     ldy #3
18d2 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
18d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18d4 : 48              >            pha         ;use stack to load status
18d5 : 28              >            plp
                        
18d6 : a124                     lda (ind1,x)
18d8 : 08                       php         ;test stores do not alter flags
18d9 : 49c3                     eor #$c3
18db : 28                       plp
18dc : 8130                     sta (indt,x)
18de : 08                       php         ;flags after load/store sequence
18df : 49c3                     eor #$c3
18e1 : d91702                   cmp abs1,y  ;test result
                                trap_ne
18e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  101
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

18e6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18e7 : 0908            >            ora #decmode        ;ignore decimal mode bit
18e9 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
18eb : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
18ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
18f0 : ca                       dex
18f1 : ca                       dex
18f2 : 88                       dey
18f3 : 10dd                     bpl tldax5
                        
18f5 : a003                     ldy #3      ;testing store result
18f7 : a200                     ldx #0
18f9 : b90302           tstay2  lda abst,y
18fc : 49c3                     eor #$c3
18fe : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1901 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1903 : 8a                       txa
1904 : 990302                   sta abst,y  ;clear                
1907 : 88                       dey
1908 : 10ef                     bpl tstay2
                                next_test
190a : ad0002          >            lda test_case   ;previous test
190d : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
190f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
1911 : a917            >            lda #test_num   ;*** next tests' number
1913 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1916 : a2fd                     ldx #3+$fa
1918 : b519             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
191a : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
191d : ca                       dex
191e : e0fa                     cpx #$fa
1920 : b0f6                     bcs tldax6                  
1922 : a2fd                     ldx #3+$fa
1924 : bd1d01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1927 : 9512                     sta zpt-$fa&$ff,x
1929 : ca                       dex
192a : e0fa                     cpx #$fa
192c : b0f6                     bcs tldax7
                                                  
192e : a203                     ldx #3      ;testing wraparound result
1930 : a000                     ldy #0
1932 : b50c             tstax1  lda zpt,x
1934 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1936 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1938 : 940c                     sty zpt,x   ;clear                
193a : bd0302                   lda abst,x
193d : dd1702                   cmp abs1,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  102
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne     ;store to abs,x data
1940 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1942 : 8a                       txa
1943 : 9d0302                   sta abst,x  ;clear                
1946 : ca                       dex
1947 : 10e9                     bpl tstax1
                        
1949 : a0fb                     ldy #3+$f8
194b : a2fe                     ldx #6+$f8
194d : a12c             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
194f : 990b01                   sta abst-$f8,y
1952 : ca                       dex
1953 : ca                       dex
1954 : 88                       dey
1955 : c0f8                     cpy #$f8
1957 : b0f4                     bcs tlday4
1959 : a003                     ldy #3      ;testing wraparound result
195b : a200                     ldx #0
195d : b90302           tstay4  lda abst,y
1960 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1963 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1965 : 8a                       txa
1966 : 990302                   sta abst,y  ;clear                
1969 : 88                       dey
196a : 10f1                     bpl tstay4
                                
196c : a0fb                     ldy #3+$f8
196e : b91f01           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
1971 : 9138                     sta (inwt),y
1973 : 88                       dey
1974 : c0f8                     cpy #$f8
1976 : b0f6                     bcs tlday5                  
1978 : a003                     ldy #3      ;testing wraparound result
197a : a200                     ldx #0
197c : b90302           tstay5  lda abst,y
197f : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1982 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1984 : 8a                       txa
1985 : 990302                   sta abst,y  ;clear                
1988 : 88                       dey
1989 : 10f1                     bpl tstay5
                        
198b : a0fb                     ldy #3+$f8
198d : a2fe                     ldx #6+$f8
198f : b12e             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
1991 : 8138                     sta (indt-$f8&$ff,x)
1993 : ca                       dex
1994 : ca                       dex
1995 : 88                       dey
1996 : c0f8                     cpy #$f8
1998 : b0f5                     bcs tlday6
199a : a003                     ldy #3      ;testing wraparound result
199c : a200                     ldx #0
199e : b90302           tstay6  lda abst,y
19a1 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
19a4 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  103
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
19a6 : 8a                       txa
19a7 : 990302                   sta abst,y  ;clear                
19aa : 88                       dey
19ab : 10f1                     bpl tstay6
                                next_test
19ad : ad0002          >            lda test_case   ;previous test
19b0 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
19b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
19b4 : a918            >            lda #test_num   ;*** next tests' number
19b6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
19b9 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
19bb : 48              >            pha         ;use stack to load status
19bc : 28              >            plp
                        
19bd : a513                     lda zp1
19bf : 08                       php         ;test stores do not alter flags
19c0 : 49c3                     eor #$c3
19c2 : 28                       plp
19c3 : 8d0302                   sta abst
19c6 : 08                       php         ;flags after load/store sequence
19c7 : 49c3                     eor #$c3
19c9 : c9c3                     cmp #$c3    ;test result
                                trap_ne
19cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
19cd : 68                       pla         ;load status
                                eor_flag 0
19ce : 0908            >            ora #decmode        ;ignore decimal mode bit
19d0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
19d2 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
19d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
19d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19d9 : 48              >            pha         ;use stack to load status
19da : 28              >            plp
                        
19db : a514                     lda zp1+1
19dd : 08                       php         ;test stores do not alter flags
19de : 49c3                     eor #$c3
19e0 : 28                       plp
19e1 : 8d0402                   sta abst+1
19e4 : 08                       php         ;flags after load/store sequence
19e5 : 49c3                     eor #$c3
19e7 : c982                     cmp #$82    ;test result
                                trap_ne
19e9 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  104
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
19eb : 68                       pla         ;load status
                                eor_flag 0
19ec : 0908            >            ora #decmode        ;ignore decimal mode bit
19ee : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
19f0 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
19f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
19f5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19f7 : 48              >            pha         ;use stack to load status
19f8 : 28              >            plp
                        
19f9 : a515                     lda zp1+2
19fb : 08                       php         ;test stores do not alter flags
19fc : 49c3                     eor #$c3
19fe : 28                       plp
19ff : 8d0502                   sta abst+2
1a02 : 08                       php         ;flags after load/store sequence
1a03 : 49c3                     eor #$c3
1a05 : c941                     cmp #$41    ;test result
                                trap_ne
1a07 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a09 : 68                       pla         ;load status
                                eor_flag 0
1a0a : 0908            >            ora #decmode        ;ignore decimal mode bit
1a0c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a0e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1a11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a13 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a15 : 48              >            pha         ;use stack to load status
1a16 : 28              >            plp
                        
1a17 : a516                     lda zp1+3
1a19 : 08                       php         ;test stores do not alter flags
1a1a : 49c3                     eor #$c3
1a1c : 28                       plp
1a1d : 8d0602                   sta abst+3
1a20 : 08                       php         ;flags after load/store sequence
1a21 : 49c3                     eor #$c3
1a23 : c900                     cmp #0      ;test result
                                trap_ne
1a25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a27 : 68                       pla         ;load status
                                eor_flag 0
1a28 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a2a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a2c : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  105
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1a2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a31 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a33 : 48              >            pha         ;use stack to load status
1a34 : 28              >            plp
                        
1a35 : a513                     lda zp1  
1a37 : 08                       php         ;test stores do not alter flags
1a38 : 49c3                     eor #$c3
1a3a : 28                       plp
1a3b : 8d0302                   sta abst  
1a3e : 08                       php         ;flags after load/store sequence
1a3f : 49c3                     eor #$c3
1a41 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1a43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a45 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a46 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a48 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a4a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1a4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a51 : 48              >            pha         ;use stack to load status
1a52 : 28              >            plp
                        
1a53 : a514                     lda zp1+1
1a55 : 08                       php         ;test stores do not alter flags
1a56 : 49c3                     eor #$c3
1a58 : 28                       plp
1a59 : 8d0402                   sta abst+1
1a5c : 08                       php         ;flags after load/store sequence
1a5d : 49c3                     eor #$c3
1a5f : c982                     cmp #$82    ;test result
                                trap_ne
1a61 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a63 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a64 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a66 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a68 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1a6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a6d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a6f : 48              >            pha         ;use stack to load status
1a70 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  106
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1a71 : a515                     lda zp1+2
1a73 : 08                       php         ;test stores do not alter flags
1a74 : 49c3                     eor #$c3
1a76 : 28                       plp
1a77 : 8d0502                   sta abst+2
1a7a : 08                       php         ;flags after load/store sequence
1a7b : 49c3                     eor #$c3
1a7d : c941                     cmp #$41    ;test result
                                trap_ne
1a7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a81 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a84 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a86 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1a89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a8b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a8d : 48              >            pha         ;use stack to load status
1a8e : 28              >            plp
                        
1a8f : a516                     lda zp1+3
1a91 : 08                       php         ;test stores do not alter flags
1a92 : 49c3                     eor #$c3
1a94 : 28                       plp
1a95 : 8d0602                   sta abst+3
1a98 : 08                       php         ;flags after load/store sequence
1a99 : 49c3                     eor #$c3
1a9b : c900                     cmp #0      ;test result
                                trap_ne
1a9d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a9f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1aa0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1aa2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1aa4 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1aa7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1aa9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1aab : 48              >            pha         ;use stack to load status
1aac : 28              >            plp
                        
1aad : ad1702                   lda abs1  
1ab0 : 08                       php         ;test stores do not alter flags
1ab1 : 49c3                     eor #$c3
1ab3 : 28                       plp
1ab4 : 850c                     sta zpt  
1ab6 : 08                       php         ;flags after load/store sequence
1ab7 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  107
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1ab9 : c513                     cmp zp1     ;test result
                                trap_ne
1abb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1abd : 68                       pla         ;load status
                                eor_flag 0
1abe : 0908            >            ora #decmode        ;ignore decimal mode bit
1ac0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1ac2 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1ac5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ac7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ac9 : 48              >            pha         ;use stack to load status
1aca : 28              >            plp
                        
1acb : ad1802                   lda abs1+1
1ace : 08                       php         ;test stores do not alter flags
1acf : 49c3                     eor #$c3
1ad1 : 28                       plp
1ad2 : 850d                     sta zpt+1
1ad4 : 08                       php         ;flags after load/store sequence
1ad5 : 49c3                     eor #$c3
1ad7 : c514                     cmp zp1+1   ;test result
                                trap_ne
1ad9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1adb : 68                       pla         ;load status
                                eor_flag 0
1adc : 0908            >            ora #decmode        ;ignore decimal mode bit
1ade : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1ae0 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ae5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ae7 : 48              >            pha         ;use stack to load status
1ae8 : 28              >            plp
                        
1ae9 : ad1902                   lda abs1+2
1aec : 08                       php         ;test stores do not alter flags
1aed : 49c3                     eor #$c3
1aef : 28                       plp
1af0 : 850e                     sta zpt+2
1af2 : 08                       php         ;flags after load/store sequence
1af3 : 49c3                     eor #$c3
1af5 : c515                     cmp zp1+2   ;test result
                                trap_ne
1af7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1af9 : 68                       pla         ;load status
                                eor_flag 0
1afa : 0908            >            ora #decmode        ;ignore decimal mode bit
1afc : 4938            >            eor #0|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  108
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1afe : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1b01 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b03 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b05 : 48              >            pha         ;use stack to load status
1b06 : 28              >            plp
                        
1b07 : ad1a02                   lda abs1+3
1b0a : 08                       php         ;test stores do not alter flags
1b0b : 49c3                     eor #$c3
1b0d : 28                       plp
1b0e : 850f                     sta zpt+3
1b10 : 08                       php         ;flags after load/store sequence
1b11 : 49c3                     eor #$c3
1b13 : c516                     cmp zp1+3   ;test result
                                trap_ne
1b15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b17 : 68                       pla         ;load status
                                eor_flag 0
1b18 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b1a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b1c : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1b1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b21 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b23 : 48              >            pha         ;use stack to load status
1b24 : 28              >            plp
                        
1b25 : ad1702                   lda abs1  
1b28 : 08                       php         ;test stores do not alter flags
1b29 : 49c3                     eor #$c3
1b2b : 28                       plp
1b2c : 850c                     sta zpt  
1b2e : 08                       php         ;flags after load/store sequence
1b2f : 49c3                     eor #$c3
1b31 : c513                     cmp zp1     ;test result
                                trap_ne
1b33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b35 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b36 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b38 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b3a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1b3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b3f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  109
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
1b41 : 48              >            pha         ;use stack to load status
1b42 : 28              >            plp
                        
1b43 : ad1802                   lda abs1+1
1b46 : 08                       php         ;test stores do not alter flags
1b47 : 49c3                     eor #$c3
1b49 : 28                       plp
1b4a : 850d                     sta zpt+1
1b4c : 08                       php         ;flags after load/store sequence
1b4d : 49c3                     eor #$c3
1b4f : c514                     cmp zp1+1   ;test result
                                trap_ne
1b51 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b53 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b54 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b56 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b58 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1b5b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b5d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b5f : 48              >            pha         ;use stack to load status
1b60 : 28              >            plp
                        
1b61 : ad1902                   lda abs1+2
1b64 : 08                       php         ;test stores do not alter flags
1b65 : 49c3                     eor #$c3
1b67 : 28                       plp
1b68 : 850e                     sta zpt+2
1b6a : 08                       php         ;flags after load/store sequence
1b6b : 49c3                     eor #$c3
1b6d : c515                     cmp zp1+2   ;test result
                                trap_ne
1b6f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b71 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b72 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b74 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b76 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1b79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b7b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b7d : 48              >            pha         ;use stack to load status
1b7e : 28              >            plp
                        
1b7f : ad1a02                   lda abs1+3
1b82 : 08                       php         ;test stores do not alter flags
1b83 : 49c3                     eor #$c3
1b85 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  110
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1b86 : 850f                     sta zpt+3
1b88 : 08                       php         ;flags after load/store sequence
1b89 : 49c3                     eor #$c3
1b8b : c516                     cmp zp1+3   ;test result
                                trap_ne
1b8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b8f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b90 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b92 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b94 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1b97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
1b99 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1b9b : 48              >            pha         ;use stack to load status
1b9c : 28              >            plp
                        
1b9d : a9c3                     lda #$c3
1b9f : 08                       php
1ba0 : cd1702                   cmp abs1    ;test result
                                trap_ne
1ba3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ba5 : 68                       pla         ;load status
                                eor_flag 0
1ba6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ba8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1baa : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1bad : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1baf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bb1 : 48              >            pha         ;use stack to load status
1bb2 : 28              >            plp
                        
1bb3 : a982                     lda #$82
1bb5 : 08                       php
1bb6 : cd1802                   cmp abs1+1  ;test result
                                trap_ne
1bb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bbb : 68                       pla         ;load status
                                eor_flag 0
1bbc : 0908            >            ora #decmode        ;ignore decimal mode bit
1bbe : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bc0 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1bc3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  111
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1bc5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bc7 : 48              >            pha         ;use stack to load status
1bc8 : 28              >            plp
                        
1bc9 : a941                     lda #$41
1bcb : 08                       php
1bcc : cd1902                   cmp abs1+2  ;test result
                                trap_ne
1bcf : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bd1 : 68                       pla         ;load status
                                eor_flag 0
1bd2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bd4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bd6 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1bd9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1bdb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bdd : 48              >            pha         ;use stack to load status
1bde : 28              >            plp
                        
1bdf : a900                     lda #0
1be1 : 08                       php
1be2 : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
1be5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1be7 : 68                       pla         ;load status
                                eor_flag 0
1be8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bea : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bec : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1bef : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1bf1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bf3 : 48              >            pha         ;use stack to load status
1bf4 : 28              >            plp
                        
1bf5 : a9c3                     lda #$c3  
1bf7 : 08                       php
1bf8 : cd1702                   cmp abs1    ;test result
                                trap_ne
1bfb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bfd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bfe : 0908            >            ora #decmode        ;ignore decimal mode bit
1c00 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c02 : cd1c02                   cmp fLDx    ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  112
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
1c05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c07 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c09 : 48              >            pha         ;use stack to load status
1c0a : 28              >            plp
                        
1c0b : a982                     lda #$82
1c0d : 08                       php
1c0e : cd1802                   cmp abs1+1  ;test result
                                trap_ne
1c11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c13 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c14 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c16 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c18 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1c1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c1f : 48              >            pha         ;use stack to load status
1c20 : 28              >            plp
                        
1c21 : a941                     lda #$41
1c23 : 08                       php
1c24 : cd1902                   cmp abs1+2  ;test result
                                trap_ne
1c27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c29 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c2a : 0908            >            ora #decmode        ;ignore decimal mode bit
1c2c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c2e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1c31 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c35 : 48              >            pha         ;use stack to load status
1c36 : 28              >            plp
                        
1c37 : a900                     lda #0
1c39 : 08                       php
1c3a : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
1c3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c3f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  113
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1c40 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c42 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c44 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1c47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
1c49 : a200                     ldx #0
1c4b : a50c                     lda zpt  
1c4d : 49c3                     eor #$c3
1c4f : c513                     cmp zp1  
                                trap_ne     ;store to zp data
1c51 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c53 : 860c                     stx zpt     ;clear                
1c55 : ad0302                   lda abst  
1c58 : 49c3                     eor #$c3
1c5a : cd1702                   cmp abs1  
                                trap_ne     ;store to abs data
1c5d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c5f : 8e0302                   stx abst    ;clear                
1c62 : a50d                     lda zpt+1
1c64 : 49c3                     eor #$c3
1c66 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
1c68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c6a : 860d                     stx zpt+1   ;clear                
1c6c : ad0402                   lda abst+1
1c6f : 49c3                     eor #$c3
1c71 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
1c74 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c76 : 8e0402                   stx abst+1  ;clear                
1c79 : a50e                     lda zpt+2
1c7b : 49c3                     eor #$c3
1c7d : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
1c7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c81 : 860e                     stx zpt+2   ;clear                
1c83 : ad0502                   lda abst+2
1c86 : 49c3                     eor #$c3
1c88 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
1c8b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c8d : 8e0502                   stx abst+2  ;clear                
1c90 : a50f                     lda zpt+3
1c92 : 49c3                     eor #$c3
1c94 : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
1c96 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c98 : 860f                     stx zpt+3   ;clear                
1c9a : ad0602                   lda abst+3
1c9d : 49c3                     eor #$c3
1c9f : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  114
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1ca2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ca4 : 8e0602                   stx abst+3  ;clear                
                                next_test
1ca7 : ad0002          >            lda test_case   ;previous test
1caa : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1cac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
1cae : a919            >            lda #test_num   ;*** next tests' number
1cb0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
1cb3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cb5 : 48              >            pha         ;use stack to load status
1cb6 : a9ff            >            lda #$ff     ;precharge accu
1cb8 : 28              >            plp
                        
1cb9 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1cbb : 08              >            php         ;save flags
1cbc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1cbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cc0 : 68              >            pla         ;load status
1cc1 : 48              >            pha
                       >            cmp_flag fz 
1cc2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1cc4 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1cc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cc8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1cc9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ccb : 48              >            pha         ;use stack to load status
1ccc : a901            >            lda #1     ;precharge accu
1cce : 28              >            plp
                        
1ccf : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1cd1 : 08              >            php         ;save flags
1cd2 : c901            >            cmp #1     ;test result
                       >            trap_ne
1cd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cd6 : 68              >            pla         ;load status
1cd7 : 48              >            pha
                       >            cmp_flag fv
1cd8 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  115
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1cda : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1cdc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cde : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1cdf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ce1 : 48              >            pha         ;use stack to load status
1ce2 : a901            >            lda #1     ;precharge accu
1ce4 : 28              >            plp
                        
1ce5 : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1ce7 : 08              >            php         ;save flags
1ce8 : c901            >            cmp #1     ;test result
                       >            trap_ne
1cea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cec : 68              >            pla         ;load status
1ced : 48              >            pha
                       >            cmp_flag fnz
1cee : 0908            >            ora #decmode        ;ignore decimal mode bit
1cf0 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1cf2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cf4 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1cf5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cf7 : 48              >            pha         ;use stack to load status
1cf8 : a901            >            lda #1     ;precharge accu
1cfa : 28              >            plp
                        
1cfb : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1cfd : 08              >            php         ;save flags
1cfe : c901            >            cmp #1     ;test result
                       >            trap_ne
1d00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d02 : 68              >            pla         ;load status
1d03 : 48              >            pha
                       >            cmp_flag fnv
1d04 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d06 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d0a : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  116
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1d0b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d0d : 48              >            pha         ;use stack to load status
1d0e : a9ff            >            lda #$ff     ;precharge accu
1d10 : 28              >            plp
                        
1d11 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1d13 : 08              >            php         ;save flags
1d14 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d18 : 68              >            pla         ;load status
1d19 : 48              >            pha
                       >            cmp_flag ~fnv 
1d1a : 0908            >            ora #decmode        ;ignore decimal mode bit
1d1c : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d20 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d21 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d23 : 48              >            pha         ;use stack to load status
1d24 : a901            >            lda #1     ;precharge accu
1d26 : 28              >            plp
                        
1d27 : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1d29 : 08              >            php         ;save flags
1d2a : c901            >            cmp #1     ;test result
                       >            trap_ne
1d2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d2e : 68              >            pla         ;load status
1d2f : 48              >            pha
                       >            cmp_flag ~fnz
1d30 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d32 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d36 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d37 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d39 : 48              >            pha         ;use stack to load status
1d3a : a901            >            lda #1     ;precharge accu
1d3c : 28              >            plp
                        
1d3d : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1d3f : 08              >            php         ;save flags
1d40 : c901            >            cmp #1     ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  117
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
1d42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d44 : 68              >            pla         ;load status
1d45 : 48              >            pha
                       >            cmp_flag ~fv
1d46 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d48 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d4c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d4d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d4f : 48              >            pha         ;use stack to load status
1d50 : a901            >            lda #1     ;precharge accu
1d52 : 28              >            plp
                        
1d53 : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1d55 : 08              >            php         ;save flags
1d56 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d5a : 68              >            pla         ;load status
1d5b : 48              >            pha
                       >            cmp_flag ~fz
1d5c : 0908            >            ora #decmode        ;ignore decimal mode bit
1d5e : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d62 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
1d63 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d65 : 48              >            pha         ;use stack to load status
1d66 : a9ff            >            lda #$ff     ;precharge accu
1d68 : 28              >            plp
                        
1d69 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1d6c : 08              >            php         ;save flags
1d6d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d6f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d71 : 68              >            pla         ;load status
1d72 : 48              >            pha
                       >            cmp_flag fz 
1d73 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d75 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  118
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
1d77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d79 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d7a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d7c : 48              >            pha         ;use stack to load status
1d7d : a901            >            lda #1     ;precharge accu
1d7f : 28              >            plp
                        
1d80 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1d83 : 08              >            php         ;save flags
1d84 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d88 : 68              >            pla         ;load status
1d89 : 48              >            pha
                       >            cmp_flag fv
1d8a : 0908            >            ora #decmode        ;ignore decimal mode bit
1d8c : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d90 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d91 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d93 : 48              >            pha         ;use stack to load status
1d94 : a901            >            lda #1     ;precharge accu
1d96 : 28              >            plp
                        
1d97 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1d9a : 08              >            php         ;save flags
1d9b : c901            >            cmp #1     ;test result
                       >            trap_ne
1d9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d9f : 68              >            pla         ;load status
1da0 : 48              >            pha
                       >            cmp_flag fnz
1da1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1da3 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1da5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1da7 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1da8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1daa : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  119
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1dab : a901            >            lda #1     ;precharge accu
1dad : 28              >            plp
                        
1dae : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1db1 : 08              >            php         ;save flags
1db2 : c901            >            cmp #1     ;test result
                       >            trap_ne
1db4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1db6 : 68              >            pla         ;load status
1db7 : 48              >            pha
                       >            cmp_flag fnv
1db8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1dba : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dbe : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1dbf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dc1 : 48              >            pha         ;use stack to load status
1dc2 : a9ff            >            lda #$ff     ;precharge accu
1dc4 : 28              >            plp
                        
1dc5 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1dc8 : 08              >            php         ;save flags
1dc9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1dcb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dcd : 68              >            pla         ;load status
1dce : 48              >            pha
                       >            cmp_flag ~fnv 
1dcf : 0908            >            ora #decmode        ;ignore decimal mode bit
1dd1 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dd3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dd5 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1dd6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dd8 : 48              >            pha         ;use stack to load status
1dd9 : a901            >            lda #1     ;precharge accu
1ddb : 28              >            plp
                        
1ddc : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1ddf : 08              >            php         ;save flags
1de0 : c901            >            cmp #1     ;test result
                       >            trap_ne
1de2 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  120
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
1de4 : 68              >            pla         ;load status
1de5 : 48              >            pha
                       >            cmp_flag ~fnz
1de6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1de8 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dec : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1ded : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1def : 48              >            pha         ;use stack to load status
1df0 : a901            >            lda #1     ;precharge accu
1df2 : 28              >            plp
                        
1df3 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1df6 : 08              >            php         ;save flags
1df7 : c901            >            cmp #1     ;test result
                       >            trap_ne
1df9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dfb : 68              >            pla         ;load status
1dfc : 48              >            pha
                       >            cmp_flag ~fv
1dfd : 0908            >            ora #decmode        ;ignore decimal mode bit
1dff : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e03 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e04 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e06 : 48              >            pha         ;use stack to load status
1e07 : a901            >            lda #1     ;precharge accu
1e09 : 28              >            plp
                        
1e0a : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1e0d : 08              >            php         ;save flags
1e0e : c901            >            cmp #1     ;test result
                       >            trap_ne
1e10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e12 : 68              >            pla         ;load status
1e13 : 48              >            pha
                       >            cmp_flag ~fz
1e14 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e16 : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  121
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1e1a : 28              >            plp         ;restore status
                        
                                next_test
1e1b : ad0002          >            lda test_case   ;previous test
1e1e : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1e20 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
1e22 : a91a            >            lda #test_num   ;*** next tests' number
1e24 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
1e27 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e29 : 48              >            pha         ;use stack to load status
1e2a : a280            >            ldx #$80     ;precharge index x
1e2c : 28              >            plp
                        
1e2d : e417                     cpx zp7f
                                tst_stat fc
1e2f : 08              >            php         ;save status
1e30 : 68              >            pla         ;use stack to retrieve status
1e31 : 48              >            pha
                       >            cmp_flag fc
1e32 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e34 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e38 : 28              >            plp         ;restore status
                        
1e39 : ca                       dex
1e3a : e417                     cpx zp7f
                                tst_stat fzc
1e3c : 08              >            php         ;save status
1e3d : 68              >            pla         ;use stack to retrieve status
1e3e : 48              >            pha
                       >            cmp_flag fzc
1e3f : 0908            >            ora #decmode        ;ignore decimal mode bit
1e41 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e45 : 28              >            plp         ;restore status
                        
1e46 : ca                       dex
1e47 : e417                     cpx zp7f
                                tst_x $7e,fn
1e49 : 08              >            php         ;save flags
1e4a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e4e : 68              >            pla         ;load status
1e4f : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  122
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag fn
1e50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e52 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e56 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1e57 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e59 : 48              >            pha         ;use stack to load status
1e5a : a280            >            ldx #$80     ;precharge index x
1e5c : 28              >            plp
                        
1e5d : e417                     cpx zp7f
                                tst_stat ~fnz
1e5f : 08              >            php         ;save status
1e60 : 68              >            pla         ;use stack to retrieve status
1e61 : 48              >            pha
                       >            cmp_flag ~fnz
1e62 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e64 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e68 : 28              >            plp         ;restore status
                        
1e69 : ca                       dex
1e6a : e417                     cpx zp7f
                                tst_stat ~fn
1e6c : 08              >            php         ;save status
1e6d : 68              >            pla         ;use stack to retrieve status
1e6e : 48              >            pha
                       >            cmp_flag ~fn
1e6f : 0908            >            ora #decmode        ;ignore decimal mode bit
1e71 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e75 : 28              >            plp         ;restore status
                        
1e76 : ca                       dex
1e77 : e417                     cpx zp7f
                                tst_x $7e,~fzc
1e79 : 08              >            php         ;save flags
1e7a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e7e : 68              >            pla         ;load status
1e7f : 48              >            pha
                       >            cmp_flag ~fzc
1e80 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e82 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e84 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  123
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
1e86 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1e87 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e89 : 48              >            pha         ;use stack to load status
1e8a : a280            >            ldx #$80     ;precharge index x
1e8c : 28              >            plp
                        
1e8d : ec1b02                   cpx abs7f
                                tst_stat fc
1e90 : 08              >            php         ;save status
1e91 : 68              >            pla         ;use stack to retrieve status
1e92 : 48              >            pha
                       >            cmp_flag fc
1e93 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e95 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e99 : 28              >            plp         ;restore status
                        
1e9a : ca                       dex
1e9b : ec1b02                   cpx abs7f
                                tst_stat fzc
1e9e : 08              >            php         ;save status
1e9f : 68              >            pla         ;use stack to retrieve status
1ea0 : 48              >            pha
                       >            cmp_flag fzc
1ea1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ea3 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ea5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ea7 : 28              >            plp         ;restore status
                        
1ea8 : ca                       dex
1ea9 : ec1b02                   cpx abs7f
                                tst_x $7e,fn
1eac : 08              >            php         ;save flags
1ead : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1eaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eb1 : 68              >            pla         ;load status
1eb2 : 48              >            pha
                       >            cmp_flag fn
1eb3 : 0908            >            ora #decmode        ;ignore decimal mode bit
1eb5 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eb7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eb9 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  124
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1eba : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ebc : 48              >            pha         ;use stack to load status
1ebd : a280            >            ldx #$80     ;precharge index x
1ebf : 28              >            plp
                        
1ec0 : ec1b02                   cpx abs7f
                                tst_stat ~fnz
1ec3 : 08              >            php         ;save status
1ec4 : 68              >            pla         ;use stack to retrieve status
1ec5 : 48              >            pha
                       >            cmp_flag ~fnz
1ec6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ec8 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ecc : 28              >            plp         ;restore status
                        
1ecd : ca                       dex
1ece : ec1b02                   cpx abs7f
                                tst_stat ~fn
1ed1 : 08              >            php         ;save status
1ed2 : 68              >            pla         ;use stack to retrieve status
1ed3 : 48              >            pha
                       >            cmp_flag ~fn
1ed4 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ed6 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ed8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eda : 28              >            plp         ;restore status
                        
1edb : ca                       dex
1edc : ec1b02                   cpx abs7f
                                tst_x $7e,~fzc
1edf : 08              >            php         ;save flags
1ee0 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1ee2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ee4 : 68              >            pla         ;load status
1ee5 : 48              >            pha
                       >            cmp_flag ~fzc
1ee6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ee8 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eec : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1eed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1eef : 48              >            pha         ;use stack to load status
1ef0 : a280            >            ldx #$80     ;precharge index x
1ef2 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  125
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1ef3 : e07f                     cpx #$7f
                                tst_stat fc
1ef5 : 08              >            php         ;save status
1ef6 : 68              >            pla         ;use stack to retrieve status
1ef7 : 48              >            pha
                       >            cmp_flag fc
1ef8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1efa : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1efc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1efe : 28              >            plp         ;restore status
                        
1eff : ca                       dex
1f00 : e07f                     cpx #$7f
                                tst_stat fzc
1f02 : 08              >            php         ;save status
1f03 : 68              >            pla         ;use stack to retrieve status
1f04 : 48              >            pha
                       >            cmp_flag fzc
1f05 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f07 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f0b : 28              >            plp         ;restore status
                        
1f0c : ca                       dex
1f0d : e07f                     cpx #$7f
                                tst_x $7e,fn
1f0f : 08              >            php         ;save flags
1f10 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f14 : 68              >            pla         ;load status
1f15 : 48              >            pha
                       >            cmp_flag fn
1f16 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f18 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f1c : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1f1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f1f : 48              >            pha         ;use stack to load status
1f20 : a280            >            ldx #$80     ;precharge index x
1f22 : 28              >            plp
                        
1f23 : e07f                     cpx #$7f
                                tst_stat ~fnz
1f25 : 08              >            php         ;save status
1f26 : 68              >            pla         ;use stack to retrieve status
1f27 : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  126
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag ~fnz
1f28 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f2a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f2e : 28              >            plp         ;restore status
                        
1f2f : ca                       dex
1f30 : e07f                     cpx #$7f
                                tst_stat ~fn
1f32 : 08              >            php         ;save status
1f33 : 68              >            pla         ;use stack to retrieve status
1f34 : 48              >            pha
                       >            cmp_flag ~fn
1f35 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f37 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f3b : 28              >            plp         ;restore status
                        
1f3c : ca                       dex
1f3d : e07f                     cpx #$7f
                                tst_x $7e,~fzc
1f3f : 08              >            php         ;save flags
1f40 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f44 : 68              >            pla         ;load status
1f45 : 48              >            pha
                       >            cmp_flag ~fzc
1f46 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f48 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f4c : 28              >            plp         ;restore status
                        
                                next_test
1f4d : ad0002          >            lda test_case   ;previous test
1f50 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
1f54 : a91b            >            lda #test_num   ;*** next tests' number
1f56 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
1f59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f5b : 48              >            pha         ;use stack to load status
1f5c : a080            >            ldy #$80     ;precharge index y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  127
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1f5e : 28              >            plp
                        
1f5f : c417                     cpy zp7f
                                tst_stat fc
1f61 : 08              >            php         ;save status
1f62 : 68              >            pla         ;use stack to retrieve status
1f63 : 48              >            pha
                       >            cmp_flag fc
1f64 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f66 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f6a : 28              >            plp         ;restore status
                        
1f6b : 88                       dey
1f6c : c417                     cpy zp7f
                                tst_stat fzc
1f6e : 08              >            php         ;save status
1f6f : 68              >            pla         ;use stack to retrieve status
1f70 : 48              >            pha
                       >            cmp_flag fzc
1f71 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f73 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f75 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f77 : 28              >            plp         ;restore status
                        
1f78 : 88                       dey
1f79 : c417                     cpy zp7f
                                tst_y $7e,fn
1f7b : 08              >            php         ;save flags
1f7c : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1f7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f80 : 68              >            pla         ;load status
1f81 : 48              >            pha
                       >            cmp_flag fn
1f82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f84 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f88 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
1f89 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f8b : 48              >            pha         ;use stack to load status
1f8c : a080            >            ldy #$80     ;precharge index y
1f8e : 28              >            plp
                        
1f8f : c417                     cpy zp7f
                                tst_stat ~fnz
1f91 : 08              >            php         ;save status
1f92 : 68              >            pla         ;use stack to retrieve status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  128
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1f93 : 48              >            pha
                       >            cmp_flag ~fnz
1f94 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f96 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f9a : 28              >            plp         ;restore status
                        
1f9b : 88                       dey
1f9c : c417                     cpy zp7f
                                tst_stat ~fn
1f9e : 08              >            php         ;save status
1f9f : 68              >            pla         ;use stack to retrieve status
1fa0 : 48              >            pha
                       >            cmp_flag ~fn
1fa1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fa3 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fa5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fa7 : 28              >            plp         ;restore status
                        
1fa8 : 88                       dey
1fa9 : c417                     cpy zp7f
                                tst_y $7e,~fzc
1fab : 08              >            php         ;save flags
1fac : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fb0 : 68              >            pla         ;load status
1fb1 : 48              >            pha
                       >            cmp_flag ~fzc
1fb2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fb4 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fb8 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
1fb9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1fbb : 48              >            pha         ;use stack to load status
1fbc : a080            >            ldy #$80     ;precharge index y
1fbe : 28              >            plp
                        
1fbf : cc1b02                   cpy abs7f
                                tst_stat fc
1fc2 : 08              >            php         ;save status
1fc3 : 68              >            pla         ;use stack to retrieve status
1fc4 : 48              >            pha
                       >            cmp_flag fc
1fc5 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fc7 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  129
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
1fc9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fcb : 28              >            plp         ;restore status
                        
1fcc : 88                       dey
1fcd : cc1b02                   cpy abs7f
                                tst_stat fzc
1fd0 : 08              >            php         ;save status
1fd1 : 68              >            pla         ;use stack to retrieve status
1fd2 : 48              >            pha
                       >            cmp_flag fzc
1fd3 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fd5 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fd9 : 28              >            plp         ;restore status
                        
1fda : 88                       dey
1fdb : cc1b02                   cpy abs7f
                                tst_y $7e,fn
1fde : 08              >            php         ;save flags
1fdf : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fe1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fe3 : 68              >            pla         ;load status
1fe4 : 48              >            pha
                       >            cmp_flag fn
1fe5 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fe7 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fe9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1feb : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
1fec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fee : 48              >            pha         ;use stack to load status
1fef : a080            >            ldy #$80     ;precharge index y
1ff1 : 28              >            plp
                        
1ff2 : cc1b02                   cpy abs7f
                                tst_stat ~fnz
1ff5 : 08              >            php         ;save status
1ff6 : 68              >            pla         ;use stack to retrieve status
1ff7 : 48              >            pha
                       >            cmp_flag ~fnz
1ff8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ffa : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ffc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ffe : 28              >            plp         ;restore status
                        
1fff : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  130
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2000 : cc1b02                   cpy abs7f
                                tst_stat ~fn
2003 : 08              >            php         ;save status
2004 : 68              >            pla         ;use stack to retrieve status
2005 : 48              >            pha
                       >            cmp_flag ~fn
2006 : 0908            >            ora #decmode        ;ignore decimal mode bit
2008 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
200a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
200c : 28              >            plp         ;restore status
                        
200d : 88                       dey
200e : cc1b02                   cpy abs7f
                                tst_y $7e,~fzc
2011 : 08              >            php         ;save flags
2012 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2014 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2016 : 68              >            pla         ;load status
2017 : 48              >            pha
                       >            cmp_flag ~fzc
2018 : 0908            >            ora #decmode        ;ignore decimal mode bit
201a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
201c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
201e : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
201f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2021 : 48              >            pha         ;use stack to load status
2022 : a080            >            ldy #$80     ;precharge index y
2024 : 28              >            plp
                        
2025 : c07f                     cpy #$7f
                                tst_stat fc
2027 : 08              >            php         ;save status
2028 : 68              >            pla         ;use stack to retrieve status
2029 : 48              >            pha
                       >            cmp_flag fc
202a : 0908            >            ora #decmode        ;ignore decimal mode bit
202c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
202e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2030 : 28              >            plp         ;restore status
                        
2031 : 88                       dey
2032 : c07f                     cpy #$7f
                                tst_stat fzc
2034 : 08              >            php         ;save status
2035 : 68              >            pla         ;use stack to retrieve status
2036 : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  131
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag fzc
2037 : 0908            >            ora #decmode        ;ignore decimal mode bit
2039 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
203b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
203d : 28              >            plp         ;restore status
                        
203e : 88                       dey
203f : c07f                     cpy #$7f
                                tst_y $7e,fn
2041 : 08              >            php         ;save flags
2042 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2044 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2046 : 68              >            pla         ;load status
2047 : 48              >            pha
                       >            cmp_flag fn
2048 : 0908            >            ora #decmode        ;ignore decimal mode bit
204a : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
204c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
204e : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
204f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2051 : 48              >            pha         ;use stack to load status
2052 : a080            >            ldy #$80     ;precharge index y
2054 : 28              >            plp
                        
2055 : c07f                     cpy #$7f
                                tst_stat ~fnz
2057 : 08              >            php         ;save status
2058 : 68              >            pla         ;use stack to retrieve status
2059 : 48              >            pha
                       >            cmp_flag ~fnz
205a : 0908            >            ora #decmode        ;ignore decimal mode bit
205c : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
205e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2060 : 28              >            plp         ;restore status
                        
2061 : 88                       dey
2062 : c07f                     cpy #$7f
                                tst_stat ~fn
2064 : 08              >            php         ;save status
2065 : 68              >            pla         ;use stack to retrieve status
2066 : 48              >            pha
                       >            cmp_flag ~fn
2067 : 0908            >            ora #decmode        ;ignore decimal mode bit
2069 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
206b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  132
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
206d : 28              >            plp         ;restore status
                        
206e : 88                       dey
206f : c07f                     cpy #$7f
                                tst_y $7e,~fzc
2071 : 08              >            php         ;save flags
2072 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2074 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2076 : 68              >            pla         ;load status
2077 : 48              >            pha
                       >            cmp_flag ~fzc
2078 : 0908            >            ora #decmode        ;ignore decimal mode bit
207a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
207c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
207e : 28              >            plp         ;restore status
                        
                                next_test
207f : ad0002          >            lda test_case   ;previous test
2082 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2084 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
2086 : a91c            >            lda #test_num   ;*** next tests' number
2088 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
208b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
208d : 48              >            pha         ;use stack to load status
208e : a980            >            lda #$80     ;precharge accu
2090 : 28              >            plp
                        
2091 : c517                     cmp zp7f
                                tst_a $80,fc
2093 : 08              >            php         ;save flags
2094 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2096 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2098 : 68              >            pla         ;load status
2099 : 48              >            pha
                       >            cmp_flag fc
209a : 0908            >            ora #decmode        ;ignore decimal mode bit
209c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
209e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20a0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  133
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
20a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20a3 : 48              >            pha         ;use stack to load status
20a4 : a97f            >            lda #$7f     ;precharge accu
20a6 : 28              >            plp
                        
20a7 : c517                     cmp zp7f
                                tst_a $7f,fzc
20a9 : 08              >            php         ;save flags
20aa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
20ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ae : 68              >            pla         ;load status
20af : 48              >            pha
                       >            cmp_flag fzc
20b0 : 0908            >            ora #decmode        ;ignore decimal mode bit
20b2 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20b6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
20b7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20b9 : 48              >            pha         ;use stack to load status
20ba : a97e            >            lda #$7e     ;precharge accu
20bc : 28              >            plp
                        
20bd : c517                     cmp zp7f
                                tst_a $7e,fn
20bf : 08              >            php         ;save flags
20c0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
20c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20c4 : 68              >            pla         ;load status
20c5 : 48              >            pha
                       >            cmp_flag fn
20c6 : 0908            >            ora #decmode        ;ignore decimal mode bit
20c8 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20cc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
20cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20cf : 48              >            pha         ;use stack to load status
20d0 : a980            >            lda #$80     ;precharge accu
20d2 : 28              >            plp
                        
20d3 : c517                     cmp zp7f
                                tst_a $80,~fnz
20d5 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  134
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

20d6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
20d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20da : 68              >            pla         ;load status
20db : 48              >            pha
                       >            cmp_flag ~fnz
20dc : 0908            >            ora #decmode        ;ignore decimal mode bit
20de : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20e2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
20e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20e5 : 48              >            pha         ;use stack to load status
20e6 : a97f            >            lda #$7f     ;precharge accu
20e8 : 28              >            plp
                        
20e9 : c517                     cmp zp7f
                                tst_a $7f,~fn
20eb : 08              >            php         ;save flags
20ec : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
20ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20f0 : 68              >            pla         ;load status
20f1 : 48              >            pha
                       >            cmp_flag ~fn
20f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
20f4 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20f8 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
20f9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20fb : 48              >            pha         ;use stack to load status
20fc : a97e            >            lda #$7e     ;precharge accu
20fe : 28              >            plp
                        
20ff : c517                     cmp zp7f
                                tst_a $7e,~fzc
2101 : 08              >            php         ;save flags
2102 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2104 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2106 : 68              >            pla         ;load status
2107 : 48              >            pha
                       >            cmp_flag ~fzc
2108 : 0908            >            ora #decmode        ;ignore decimal mode bit
210a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  135
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
210c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
210e : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
210f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2111 : 48              >            pha         ;use stack to load status
2112 : a980            >            lda #$80     ;precharge accu
2114 : 28              >            plp
                        
2115 : cd1b02                   cmp abs7f
                                tst_a $80,fc
2118 : 08              >            php         ;save flags
2119 : c980            >            cmp #$80     ;test result
                       >            trap_ne
211b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
211d : 68              >            pla         ;load status
211e : 48              >            pha
                       >            cmp_flag fc
211f : 0908            >            ora #decmode        ;ignore decimal mode bit
2121 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2123 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2125 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2126 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2128 : 48              >            pha         ;use stack to load status
2129 : a97f            >            lda #$7f     ;precharge accu
212b : 28              >            plp
                        
212c : cd1b02                   cmp abs7f
                                tst_a $7f,fzc
212f : 08              >            php         ;save flags
2130 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2132 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2134 : 68              >            pla         ;load status
2135 : 48              >            pha
                       >            cmp_flag fzc
2136 : 0908            >            ora #decmode        ;ignore decimal mode bit
2138 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
213a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
213c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
213d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  136
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

213f : 48              >            pha         ;use stack to load status
2140 : a97e            >            lda #$7e     ;precharge accu
2142 : 28              >            plp
                        
2143 : cd1b02                   cmp abs7f
                                tst_a $7e,fn
2146 : 08              >            php         ;save flags
2147 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2149 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
214b : 68              >            pla         ;load status
214c : 48              >            pha
                       >            cmp_flag fn
214d : 0908            >            ora #decmode        ;ignore decimal mode bit
214f : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2151 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2153 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2154 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2156 : 48              >            pha         ;use stack to load status
2157 : a980            >            lda #$80     ;precharge accu
2159 : 28              >            plp
                        
215a : cd1b02                   cmp abs7f
                                tst_a $80,~fnz
215d : 08              >            php         ;save flags
215e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2162 : 68              >            pla         ;load status
2163 : 48              >            pha
                       >            cmp_flag ~fnz
2164 : 0908            >            ora #decmode        ;ignore decimal mode bit
2166 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2168 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
216a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
216b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
216d : 48              >            pha         ;use stack to load status
216e : a97f            >            lda #$7f     ;precharge accu
2170 : 28              >            plp
                        
2171 : cd1b02                   cmp abs7f
                                tst_a $7f,~fn
2174 : 08              >            php         ;save flags
2175 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2177 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  137
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2179 : 68              >            pla         ;load status
217a : 48              >            pha
                       >            cmp_flag ~fn
217b : 0908            >            ora #decmode        ;ignore decimal mode bit
217d : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
217f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2181 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2182 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2184 : 48              >            pha         ;use stack to load status
2185 : a97e            >            lda #$7e     ;precharge accu
2187 : 28              >            plp
                        
2188 : cd1b02                   cmp abs7f
                                tst_a $7e,~fzc
218b : 08              >            php         ;save flags
218c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
218e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2190 : 68              >            pla         ;load status
2191 : 48              >            pha
                       >            cmp_flag ~fzc
2192 : 0908            >            ora #decmode        ;ignore decimal mode bit
2194 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2196 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2198 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2199 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
219b : 48              >            pha         ;use stack to load status
219c : a980            >            lda #$80     ;precharge accu
219e : 28              >            plp
                        
219f : c97f                     cmp #$7f
                                tst_a $80,fc
21a1 : 08              >            php         ;save flags
21a2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
21a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21a6 : 68              >            pla         ;load status
21a7 : 48              >            pha
                       >            cmp_flag fc
21a8 : 0908            >            ora #decmode        ;ignore decimal mode bit
21aa : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21ac : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  138
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
21ae : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
21af : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21b1 : 48              >            pha         ;use stack to load status
21b2 : a97f            >            lda #$7f     ;precharge accu
21b4 : 28              >            plp
                        
21b5 : c97f                     cmp #$7f
                                tst_a $7f,fzc
21b7 : 08              >            php         ;save flags
21b8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21bc : 68              >            pla         ;load status
21bd : 48              >            pha
                       >            cmp_flag fzc
21be : 0908            >            ora #decmode        ;ignore decimal mode bit
21c0 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21c4 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
21c5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21c7 : 48              >            pha         ;use stack to load status
21c8 : a97e            >            lda #$7e     ;precharge accu
21ca : 28              >            plp
                        
21cb : c97f                     cmp #$7f
                                tst_a $7e,fn
21cd : 08              >            php         ;save flags
21ce : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21d2 : 68              >            pla         ;load status
21d3 : 48              >            pha
                       >            cmp_flag fn
21d4 : 0908            >            ora #decmode        ;ignore decimal mode bit
21d6 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21da : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
21db : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21dd : 48              >            pha         ;use stack to load status
21de : a980            >            lda #$80     ;precharge accu
21e0 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  139
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
21e1 : c97f                     cmp #$7f
                                tst_a $80,~fnz
21e3 : 08              >            php         ;save flags
21e4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
21e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21e8 : 68              >            pla         ;load status
21e9 : 48              >            pha
                       >            cmp_flag ~fnz
21ea : 0908            >            ora #decmode        ;ignore decimal mode bit
21ec : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21f0 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
21f1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21f3 : 48              >            pha         ;use stack to load status
21f4 : a97f            >            lda #$7f     ;precharge accu
21f6 : 28              >            plp
                        
21f7 : c97f                     cmp #$7f
                                tst_a $7f,~fn
21f9 : 08              >            php         ;save flags
21fa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21fe : 68              >            pla         ;load status
21ff : 48              >            pha
                       >            cmp_flag ~fn
2200 : 0908            >            ora #decmode        ;ignore decimal mode bit
2202 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2204 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2206 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2207 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2209 : 48              >            pha         ;use stack to load status
220a : a97e            >            lda #$7e     ;precharge accu
220c : 28              >            plp
                        
220d : c97f                     cmp #$7f
                                tst_a $7e,~fzc
220f : 08              >            php         ;save flags
2210 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2212 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2214 : 68              >            pla         ;load status
2215 : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  140
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag ~fzc
2216 : 0908            >            ora #decmode        ;ignore decimal mode bit
2218 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
221a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
221c : 28              >            plp         ;restore status
                        
                        
221d : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
221f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2221 : 48              >            pha         ;use stack to load status
2222 : a980            >            lda #$80     ;precharge accu
2224 : 28              >            plp
                        
2225 : d513                     cmp zp1,x
                                tst_a $80,fc
2227 : 08              >            php         ;save flags
2228 : c980            >            cmp #$80     ;test result
                       >            trap_ne
222a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
222c : 68              >            pla         ;load status
222d : 48              >            pha
                       >            cmp_flag fc
222e : 0908            >            ora #decmode        ;ignore decimal mode bit
2230 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2232 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2234 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2235 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2237 : 48              >            pha         ;use stack to load status
2238 : a97f            >            lda #$7f     ;precharge accu
223a : 28              >            plp
                        
223b : d513                     cmp zp1,x
                                tst_a $7f,fzc
223d : 08              >            php         ;save flags
223e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2240 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2242 : 68              >            pla         ;load status
2243 : 48              >            pha
                       >            cmp_flag fzc
2244 : 0908            >            ora #decmode        ;ignore decimal mode bit
2246 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2248 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
224a : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  141
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_a $7e,0
                       >            load_flag 0
224b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
224d : 48              >            pha         ;use stack to load status
224e : a97e            >            lda #$7e     ;precharge accu
2250 : 28              >            plp
                        
2251 : d513                     cmp zp1,x
                                tst_a $7e,fn
2253 : 08              >            php         ;save flags
2254 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2256 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2258 : 68              >            pla         ;load status
2259 : 48              >            pha
                       >            cmp_flag fn
225a : 0908            >            ora #decmode        ;ignore decimal mode bit
225c : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
225e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2260 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2261 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2263 : 48              >            pha         ;use stack to load status
2264 : a980            >            lda #$80     ;precharge accu
2266 : 28              >            plp
                        
2267 : d513                     cmp zp1,x
                                tst_a $80,~fnz
2269 : 08              >            php         ;save flags
226a : c980            >            cmp #$80     ;test result
                       >            trap_ne
226c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
226e : 68              >            pla         ;load status
226f : 48              >            pha
                       >            cmp_flag ~fnz
2270 : 0908            >            ora #decmode        ;ignore decimal mode bit
2272 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2274 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2276 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2277 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2279 : 48              >            pha         ;use stack to load status
227a : a97f            >            lda #$7f     ;precharge accu
227c : 28              >            plp
                        
227d : d513                     cmp zp1,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  142
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_a $7f,~fn
227f : 08              >            php         ;save flags
2280 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2282 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2284 : 68              >            pla         ;load status
2285 : 48              >            pha
                       >            cmp_flag ~fn
2286 : 0908            >            ora #decmode        ;ignore decimal mode bit
2288 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
228a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
228c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
228d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
228f : 48              >            pha         ;use stack to load status
2290 : a97e            >            lda #$7e     ;precharge accu
2292 : 28              >            plp
                        
2293 : d513                     cmp zp1,x
                                tst_a $7e,~fzc
2295 : 08              >            php         ;save flags
2296 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2298 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
229a : 68              >            pla         ;load status
229b : 48              >            pha
                       >            cmp_flag ~fzc
229c : 0908            >            ora #decmode        ;ignore decimal mode bit
229e : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22a2 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
22a3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22a5 : 48              >            pha         ;use stack to load status
22a6 : a980            >            lda #$80     ;precharge accu
22a8 : 28              >            plp
                        
22a9 : dd1702                   cmp abs1,x
                                tst_a $80,fc
22ac : 08              >            php         ;save flags
22ad : c980            >            cmp #$80     ;test result
                       >            trap_ne
22af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22b1 : 68              >            pla         ;load status
22b2 : 48              >            pha
                       >            cmp_flag fc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  143
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

22b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
22b5 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22b9 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
22ba : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22bc : 48              >            pha         ;use stack to load status
22bd : a97f            >            lda #$7f     ;precharge accu
22bf : 28              >            plp
                        
22c0 : dd1702                   cmp abs1,x
                                tst_a $7f,fzc
22c3 : 08              >            php         ;save flags
22c4 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22c8 : 68              >            pla         ;load status
22c9 : 48              >            pha
                       >            cmp_flag fzc
22ca : 0908            >            ora #decmode        ;ignore decimal mode bit
22cc : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22d0 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
22d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22d3 : 48              >            pha         ;use stack to load status
22d4 : a97e            >            lda #$7e     ;precharge accu
22d6 : 28              >            plp
                        
22d7 : dd1702                   cmp abs1,x
                                tst_a $7e,fn
22da : 08              >            php         ;save flags
22db : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
22dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22df : 68              >            pla         ;load status
22e0 : 48              >            pha
                       >            cmp_flag fn
22e1 : 0908            >            ora #decmode        ;ignore decimal mode bit
22e3 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22e7 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  144
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

22e8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22ea : 48              >            pha         ;use stack to load status
22eb : a980            >            lda #$80     ;precharge accu
22ed : 28              >            plp
                        
22ee : dd1702                   cmp abs1,x
                                tst_a $80,~fnz
22f1 : 08              >            php         ;save flags
22f2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
22f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22f6 : 68              >            pla         ;load status
22f7 : 48              >            pha
                       >            cmp_flag ~fnz
22f8 : 0908            >            ora #decmode        ;ignore decimal mode bit
22fa : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22fe : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
22ff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2301 : 48              >            pha         ;use stack to load status
2302 : a97f            >            lda #$7f     ;precharge accu
2304 : 28              >            plp
                        
2305 : dd1702                   cmp abs1,x
                                tst_a $7f,~fn
2308 : 08              >            php         ;save flags
2309 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
230b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
230d : 68              >            pla         ;load status
230e : 48              >            pha
                       >            cmp_flag ~fn
230f : 0908            >            ora #decmode        ;ignore decimal mode bit
2311 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2313 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2315 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2316 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2318 : 48              >            pha         ;use stack to load status
2319 : a97e            >            lda #$7e     ;precharge accu
231b : 28              >            plp
                        
231c : dd1702                   cmp abs1,x
                                tst_a $7e,~fzc
231f : 08              >            php         ;save flags
2320 : c97e            >            cmp #$7e     ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  145
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
2322 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2324 : 68              >            pla         ;load status
2325 : 48              >            pha
                       >            cmp_flag ~fzc
2326 : 0908            >            ora #decmode        ;ignore decimal mode bit
2328 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
232a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
232c : 28              >            plp         ;restore status
                        
                        
232d : a004                     ldy #4          ;with indexing by Y
232f : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
2331 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2333 : 48              >            pha         ;use stack to load status
2334 : a980            >            lda #$80     ;precharge accu
2336 : 28              >            plp
                        
2337 : d91702                   cmp abs1,y
                                tst_a $80,fc
233a : 08              >            php         ;save flags
233b : c980            >            cmp #$80     ;test result
                       >            trap_ne
233d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
233f : 68              >            pla         ;load status
2340 : 48              >            pha
                       >            cmp_flag fc
2341 : 0908            >            ora #decmode        ;ignore decimal mode bit
2343 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2345 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2347 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2348 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
234a : 48              >            pha         ;use stack to load status
234b : a97f            >            lda #$7f     ;precharge accu
234d : 28              >            plp
                        
234e : d91702                   cmp abs1,y
                                tst_a $7f,fzc
2351 : 08              >            php         ;save flags
2352 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2354 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2356 : 68              >            pla         ;load status
2357 : 48              >            pha
                       >            cmp_flag fzc
2358 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  146
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

235a : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
235c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
235e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
235f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2361 : 48              >            pha         ;use stack to load status
2362 : a97e            >            lda #$7e     ;precharge accu
2364 : 28              >            plp
                        
2365 : d91702                   cmp abs1,y
                                tst_a $7e,fn
2368 : 08              >            php         ;save flags
2369 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
236b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
236d : 68              >            pla         ;load status
236e : 48              >            pha
                       >            cmp_flag fn
236f : 0908            >            ora #decmode        ;ignore decimal mode bit
2371 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2373 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2375 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2376 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2378 : 48              >            pha         ;use stack to load status
2379 : a980            >            lda #$80     ;precharge accu
237b : 28              >            plp
                        
237c : d91702                   cmp abs1,y
                                tst_a $80,~fnz
237f : 08              >            php         ;save flags
2380 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2382 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2384 : 68              >            pla         ;load status
2385 : 48              >            pha
                       >            cmp_flag ~fnz
2386 : 0908            >            ora #decmode        ;ignore decimal mode bit
2388 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
238a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
238c : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
238d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  147
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
238f : 48              >            pha         ;use stack to load status
2390 : a97f            >            lda #$7f     ;precharge accu
2392 : 28              >            plp
                        
2393 : d91702                   cmp abs1,y
                                tst_a $7f,~fn
2396 : 08              >            php         ;save flags
2397 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2399 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
239b : 68              >            pla         ;load status
239c : 48              >            pha
                       >            cmp_flag ~fn
239d : 0908            >            ora #decmode        ;ignore decimal mode bit
239f : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23a3 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
23a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23a6 : 48              >            pha         ;use stack to load status
23a7 : a97e            >            lda #$7e     ;precharge accu
23a9 : 28              >            plp
                        
23aa : d91702                   cmp abs1,y
                                tst_a $7e,~fzc
23ad : 08              >            php         ;save flags
23ae : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23b2 : 68              >            pla         ;load status
23b3 : 48              >            pha
                       >            cmp_flag ~fzc
23b4 : 0908            >            ora #decmode        ;ignore decimal mode bit
23b6 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23ba : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
23bb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23bd : 48              >            pha         ;use stack to load status
23be : a980            >            lda #$80     ;precharge accu
23c0 : 28              >            plp
                        
23c1 : c124                     cmp (ind1,x)
                                tst_a $80,fc
23c3 : 08              >            php         ;save flags
23c4 : c980            >            cmp #$80     ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  148
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
23c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23c8 : 68              >            pla         ;load status
23c9 : 48              >            pha
                       >            cmp_flag fc
23ca : 0908            >            ora #decmode        ;ignore decimal mode bit
23cc : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23d0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
23d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23d3 : 48              >            pha         ;use stack to load status
23d4 : a97f            >            lda #$7f     ;precharge accu
23d6 : 28              >            plp
                        
23d7 : c124                     cmp (ind1,x)
                                tst_a $7f,fzc
23d9 : 08              >            php         ;save flags
23da : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
23dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23de : 68              >            pla         ;load status
23df : 48              >            pha
                       >            cmp_flag fzc
23e0 : 0908            >            ora #decmode        ;ignore decimal mode bit
23e2 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23e6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
23e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23e9 : 48              >            pha         ;use stack to load status
23ea : a97e            >            lda #$7e     ;precharge accu
23ec : 28              >            plp
                        
23ed : c124                     cmp (ind1,x)
                                tst_a $7e,fn
23ef : 08              >            php         ;save flags
23f0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23f4 : 68              >            pla         ;load status
23f5 : 48              >            pha
                       >            cmp_flag fn
23f6 : 0908            >            ora #decmode        ;ignore decimal mode bit
23f8 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  149
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

23fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23fc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
23fd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23ff : 48              >            pha         ;use stack to load status
2400 : a980            >            lda #$80     ;precharge accu
2402 : 28              >            plp
                        
2403 : c124                     cmp (ind1,x)
                                tst_a $80,~fnz
2405 : 08              >            php         ;save flags
2406 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2408 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
240a : 68              >            pla         ;load status
240b : 48              >            pha
                       >            cmp_flag ~fnz
240c : 0908            >            ora #decmode        ;ignore decimal mode bit
240e : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2410 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2412 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2413 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2415 : 48              >            pha         ;use stack to load status
2416 : a97f            >            lda #$7f     ;precharge accu
2418 : 28              >            plp
                        
2419 : c124                     cmp (ind1,x)
                                tst_a $7f,~fn
241b : 08              >            php         ;save flags
241c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
241e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2420 : 68              >            pla         ;load status
2421 : 48              >            pha
                       >            cmp_flag ~fn
2422 : 0908            >            ora #decmode        ;ignore decimal mode bit
2424 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2426 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2428 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2429 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
242b : 48              >            pha         ;use stack to load status
242c : a97e            >            lda #$7e     ;precharge accu
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  150
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

242e : 28              >            plp
                        
242f : c124                     cmp (ind1,x)
                                tst_a $7e,~fzc
2431 : 08              >            php         ;save flags
2432 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2434 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2436 : 68              >            pla         ;load status
2437 : 48              >            pha
                       >            cmp_flag ~fzc
2438 : 0908            >            ora #decmode        ;ignore decimal mode bit
243a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
243c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
243e : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
243f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2441 : 48              >            pha         ;use stack to load status
2442 : a980            >            lda #$80     ;precharge accu
2444 : 28              >            plp
                        
2445 : d124                     cmp (ind1),y
                                tst_a $80,fc
2447 : 08              >            php         ;save flags
2448 : c980            >            cmp #$80     ;test result
                       >            trap_ne
244a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
244c : 68              >            pla         ;load status
244d : 48              >            pha
                       >            cmp_flag fc
244e : 0908            >            ora #decmode        ;ignore decimal mode bit
2450 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2452 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2454 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2455 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2457 : 48              >            pha         ;use stack to load status
2458 : a97f            >            lda #$7f     ;precharge accu
245a : 28              >            plp
                        
245b : d124                     cmp (ind1),y
                                tst_a $7f,fzc
245d : 08              >            php         ;save flags
245e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2460 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  151
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2462 : 68              >            pla         ;load status
2463 : 48              >            pha
                       >            cmp_flag fzc
2464 : 0908            >            ora #decmode        ;ignore decimal mode bit
2466 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2468 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
246a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
246b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
246d : 48              >            pha         ;use stack to load status
246e : a97e            >            lda #$7e     ;precharge accu
2470 : 28              >            plp
                        
2471 : d124                     cmp (ind1),y
                                tst_a $7e,fn
2473 : 08              >            php         ;save flags
2474 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2476 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2478 : 68              >            pla         ;load status
2479 : 48              >            pha
                       >            cmp_flag fn
247a : 0908            >            ora #decmode        ;ignore decimal mode bit
247c : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
247e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2480 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2481 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2483 : 48              >            pha         ;use stack to load status
2484 : a980            >            lda #$80     ;precharge accu
2486 : 28              >            plp
                        
2487 : d124                     cmp (ind1),y
                                tst_a $80,~fnz
2489 : 08              >            php         ;save flags
248a : c980            >            cmp #$80     ;test result
                       >            trap_ne
248c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
248e : 68              >            pla         ;load status
248f : 48              >            pha
                       >            cmp_flag ~fnz
2490 : 0908            >            ora #decmode        ;ignore decimal mode bit
2492 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2494 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2496 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  152
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_a $7f,$ff
                       >            load_flag $ff
2497 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2499 : 48              >            pha         ;use stack to load status
249a : a97f            >            lda #$7f     ;precharge accu
249c : 28              >            plp
                        
249d : d124                     cmp (ind1),y
                                tst_a $7f,~fn
249f : 08              >            php         ;save flags
24a0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
24a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24a4 : 68              >            pla         ;load status
24a5 : 48              >            pha
                       >            cmp_flag ~fn
24a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
24a8 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24ac : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
24ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24af : 48              >            pha         ;use stack to load status
24b0 : a97e            >            lda #$7e     ;precharge accu
24b2 : 28              >            plp
                        
24b3 : d124                     cmp (ind1),y
                                tst_a $7e,~fzc
24b5 : 08              >            php         ;save flags
24b6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
24b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24ba : 68              >            pla         ;load status
24bb : 48              >            pha
                       >            cmp_flag ~fzc
24bc : 0908            >            ora #decmode        ;ignore decimal mode bit
24be : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24c2 : 28              >            plp         ;restore status
                        
                                next_test
24c3 : ad0002          >            lda test_case   ;previous test
24c6 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
24c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
24ca : a91d            >            lda #test_num   ;*** next tests' number
24cc : 8d0002          >            sta test_case
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  153
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
24cf : a203                     ldx #3
24d1 :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
24d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24d3 : 48              >            pha         ;use stack to load status
24d4 : b513            >            lda zp1,x    ;precharge accu
24d6 : 28              >            plp
                        
24d7 : 0a                       asl a
                                tst_ax rASL,fASL,0
24d8 : 08              >            php         ;save flags
24d9 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
24dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24de : 68              >            pla         ;load status
                       >            eor_flag 0
24df : 0908            >            ora #decmode        ;ignore decimal mode bit
24e1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
24e3 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
24e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
24e8 : ca                       dex
24e9 : 10e6                     bpl tasl
24eb : a203                     ldx #3
24ed :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
24ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24ef : 48              >            pha         ;use stack to load status
24f0 : b513            >            lda zp1,x    ;precharge accu
24f2 : 28              >            plp
                        
24f3 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
24f4 : 08              >            php         ;save flags
24f5 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
24f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24fa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
24fb : 0908            >            ora #decmode        ;ignore decimal mode bit
24fd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
24ff : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2502 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2504 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  154
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2505 : 10e6                     bpl tasl1
                        
2507 : a203                     ldx #3
2509 :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
2509 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
250b : 48              >            pha         ;use stack to load status
250c : b513            >            lda zp1,x    ;precharge accu
250e : 28              >            plp
                        
250f : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2510 : 08              >            php         ;save flags
2511 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2514 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2516 : 68              >            pla         ;load status
                       >            eor_flag 0
2517 : 0908            >            ora #decmode        ;ignore decimal mode bit
2519 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
251b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
251e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2520 : ca                       dex
2521 : 10e6                     bpl tlsr
2523 : a203                     ldx #3
2525 :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
2525 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2527 : 48              >            pha         ;use stack to load status
2528 : b513            >            lda zp1,x    ;precharge accu
252a : 28              >            plp
                        
252b : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
252c : 08              >            php         ;save flags
252d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2530 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2532 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2533 : 0908            >            ora #decmode        ;ignore decimal mode bit
2535 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2537 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
253a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
253c : ca                       dex
253d : 10e6                     bpl tlsr1
                        
253f : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  155
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2541 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
2541 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2543 : 48              >            pha         ;use stack to load status
2544 : b513            >            lda zp1,x    ;precharge accu
2546 : 28              >            plp
                        
2547 : 2a                       rol a
                                tst_ax rROL,fROL,0
2548 : 08              >            php         ;save flags
2549 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
254c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
254e : 68              >            pla         ;load status
                       >            eor_flag 0
254f : 0908            >            ora #decmode        ;ignore decimal mode bit
2551 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2553 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2556 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2558 : ca                       dex
2559 : 10e6                     bpl trol
255b : a203                     ldx #3
255d :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
255d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
255f : 48              >            pha         ;use stack to load status
2560 : b513            >            lda zp1,x    ;precharge accu
2562 : 28              >            plp
                        
2563 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
2564 : 08              >            php         ;save flags
2565 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2568 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
256a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
256b : 0908            >            ora #decmode        ;ignore decimal mode bit
256d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
256f : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2572 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2574 : ca                       dex
2575 : 10e6                     bpl trol1
                        
2577 : a203                     ldx #3
2579 :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  156
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2579 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
257b : 48              >            pha         ;use stack to load status
257c : b513            >            lda zp1,x    ;precharge accu
257e : 28              >            plp
                        
257f : 2a                       rol a
                                tst_ax rROLc,fROLc,0
2580 : 08              >            php         ;save flags
2581 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2584 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2586 : 68              >            pla         ;load status
                       >            eor_flag 0
2587 : 0908            >            ora #decmode        ;ignore decimal mode bit
2589 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
258b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
258e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2590 : ca                       dex
2591 : 10e6                     bpl trolc
2593 : a203                     ldx #3
2595 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
2595 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2597 : 48              >            pha         ;use stack to load status
2598 : b513            >            lda zp1,x    ;precharge accu
259a : 28              >            plp
                        
259b : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
259c : 08              >            php         ;save flags
259d : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
25a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25a2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
25a5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25a7 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25ac : ca                       dex
25ad : 10e6                     bpl trolc1
                        
25af : a203                     ldx #3
25b1 :                  tror
                                set_ax zp1,0
                       >            load_flag 0
25b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25b3 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  157
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

25b4 : b513            >            lda zp1,x    ;precharge accu
25b6 : 28              >            plp
                        
25b7 : 6a                       ror a
                                tst_ax rROR,fROR,0
25b8 : 08              >            php         ;save flags
25b9 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
25bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25be : 68              >            pla         ;load status
                       >            eor_flag 0
25bf : 0908            >            ora #decmode        ;ignore decimal mode bit
25c1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25c3 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
25c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25c8 : ca                       dex
25c9 : 10e6                     bpl tror
25cb : a203                     ldx #3
25cd :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
25cd : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
25cf : 48              >            pha         ;use stack to load status
25d0 : b513            >            lda zp1,x    ;precharge accu
25d2 : 28              >            plp
                        
25d3 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
25d4 : 08              >            php         ;save flags
25d5 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
25d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25db : 0908            >            ora #decmode        ;ignore decimal mode bit
25dd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25df : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
25e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25e4 : ca                       dex
25e5 : 10e6                     bpl tror1
                        
25e7 : a203                     ldx #3
25e9 :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
25e9 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
25eb : 48              >            pha         ;use stack to load status
25ec : b513            >            lda zp1,x    ;precharge accu
25ee : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  158
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

25ef : 6a                       ror a
                                tst_ax rRORc,fRORc,0
25f0 : 08              >            php         ;save flags
25f1 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
25f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25f6 : 68              >            pla         ;load status
                       >            eor_flag 0
25f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
25f9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25fb : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
25fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2600 : ca                       dex
2601 : 10e6                     bpl trorc
2603 : a203                     ldx #3
2605 :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
2605 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2607 : 48              >            pha         ;use stack to load status
2608 : b513            >            lda zp1,x    ;precharge accu
260a : 28              >            plp
                        
260b : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
260c : 08              >            php         ;save flags
260d : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2610 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2612 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2613 : 0908            >            ora #decmode        ;ignore decimal mode bit
2615 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2617 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
261a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
261c : ca                       dex
261d : 10e6                     bpl trorc1
                                next_test
261f : ad0002          >            lda test_case   ;previous test
2622 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2624 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
2626 : a91e            >            lda #test_num   ;*** next tests' number
2628 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
262b : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  159
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

262d :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
262d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
262f : 48              >            pha         ;use stack to load status
2630 : b513            >            lda zp1,x    ;load to zeropage
2632 : 850c            >            sta zpt
2634 : 28              >            plp
                        
2635 : 060c                     asl zpt
                                tst_z rASL,fASL,0
2637 : 08              >            php         ;save flags
2638 : a50c            >            lda zpt
263a : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
263d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
263f : 68              >            pla         ;load status
                       >            eor_flag 0
2640 : 0908            >            ora #decmode        ;ignore decimal mode bit
2642 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2644 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2647 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2649 : ca                       dex
264a : 10e1                     bpl tasl2
264c : a203                     ldx #3
264e :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
264e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2650 : 48              >            pha         ;use stack to load status
2651 : b513            >            lda zp1,x    ;load to zeropage
2653 : 850c            >            sta zpt
2655 : 28              >            plp
                        
2656 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2658 : 08              >            php         ;save flags
2659 : a50c            >            lda zpt
265b : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
265e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2660 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2661 : 0908            >            ora #decmode        ;ignore decimal mode bit
2663 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2665 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2668 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
266a : ca                       dex
266b : 10e1                     bpl tasl3
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  160
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

266d : a203                     ldx #3
266f :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
266f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2671 : 48              >            pha         ;use stack to load status
2672 : b513            >            lda zp1,x    ;load to zeropage
2674 : 850c            >            sta zpt
2676 : 28              >            plp
                        
2677 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
2679 : 08              >            php         ;save flags
267a : a50c            >            lda zpt
267c : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
267f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2681 : 68              >            pla         ;load status
                       >            eor_flag 0
2682 : 0908            >            ora #decmode        ;ignore decimal mode bit
2684 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2686 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2689 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
268b : ca                       dex
268c : 10e1                     bpl tlsr2
268e : a203                     ldx #3
2690 :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
2690 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2692 : 48              >            pha         ;use stack to load status
2693 : b513            >            lda zp1,x    ;load to zeropage
2695 : 850c            >            sta zpt
2697 : 28              >            plp
                        
2698 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
269a : 08              >            php         ;save flags
269b : a50c            >            lda zpt
269d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
26a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26a2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
26a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
26a5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26a7 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26ac : ca                       dex
26ad : 10e1                     bpl tlsr3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  161
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
26af : a203                     ldx #3
26b1 :                  trol2
                                set_z zp1,0
                       >            load_flag 0
26b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26b3 : 48              >            pha         ;use stack to load status
26b4 : b513            >            lda zp1,x    ;load to zeropage
26b6 : 850c            >            sta zpt
26b8 : 28              >            plp
                        
26b9 : 260c                     rol zpt
                                tst_z rROL,fROL,0
26bb : 08              >            php         ;save flags
26bc : a50c            >            lda zpt
26be : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
26c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26c3 : 68              >            pla         ;load status
                       >            eor_flag 0
26c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
26c6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26c8 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
26cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26cd : ca                       dex
26ce : 10e1                     bpl trol2
26d0 : a203                     ldx #3
26d2 :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
26d2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
26d4 : 48              >            pha         ;use stack to load status
26d5 : b513            >            lda zp1,x    ;load to zeropage
26d7 : 850c            >            sta zpt
26d9 : 28              >            plp
                        
26da : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
26dc : 08              >            php         ;save flags
26dd : a50c            >            lda zpt
26df : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
26e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26e4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
26e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
26e7 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26e9 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
26ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26ee : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  162
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

26ef : 10e1                     bpl trol3
                        
26f1 : a203                     ldx #3
26f3 :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
26f3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
26f5 : 48              >            pha         ;use stack to load status
26f6 : b513            >            lda zp1,x    ;load to zeropage
26f8 : 850c            >            sta zpt
26fa : 28              >            plp
                        
26fb : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
26fd : 08              >            php         ;save flags
26fe : a50c            >            lda zpt
2700 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2703 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2705 : 68              >            pla         ;load status
                       >            eor_flag 0
2706 : 0908            >            ora #decmode        ;ignore decimal mode bit
2708 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
270a : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
270d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
270f : ca                       dex
2710 : 10e1                     bpl trolc2
2712 : a203                     ldx #3
2714 :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
2714 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2716 : 48              >            pha         ;use stack to load status
2717 : b513            >            lda zp1,x    ;load to zeropage
2719 : 850c            >            sta zpt
271b : 28              >            plp
                        
271c : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
271e : 08              >            php         ;save flags
271f : a50c            >            lda zpt
2721 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2724 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2726 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2727 : 0908            >            ora #decmode        ;ignore decimal mode bit
2729 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
272b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
272e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  163
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2730 : ca                       dex
2731 : 10e1                     bpl trolc3
                        
2733 : a203                     ldx #3
2735 :                  tror2
                                set_z zp1,0
                       >            load_flag 0
2735 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2737 : 48              >            pha         ;use stack to load status
2738 : b513            >            lda zp1,x    ;load to zeropage
273a : 850c            >            sta zpt
273c : 28              >            plp
                        
273d : 660c                     ror zpt
                                tst_z rROR,fROR,0
273f : 08              >            php         ;save flags
2740 : a50c            >            lda zpt
2742 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2745 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2747 : 68              >            pla         ;load status
                       >            eor_flag 0
2748 : 0908            >            ora #decmode        ;ignore decimal mode bit
274a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
274c : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
274f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2751 : ca                       dex
2752 : 10e1                     bpl tror2
2754 : a203                     ldx #3
2756 :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
2756 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2758 : 48              >            pha         ;use stack to load status
2759 : b513            >            lda zp1,x    ;load to zeropage
275b : 850c            >            sta zpt
275d : 28              >            plp
                        
275e : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2760 : 08              >            php         ;save flags
2761 : a50c            >            lda zpt
2763 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2766 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2768 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2769 : 0908            >            ora #decmode        ;ignore decimal mode bit
276b : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
276d : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2770 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  164
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2772 : ca                       dex
2773 : 10e1                     bpl tror3
                        
2775 : a203                     ldx #3
2777 :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
2777 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2779 : 48              >            pha         ;use stack to load status
277a : b513            >            lda zp1,x    ;load to zeropage
277c : 850c            >            sta zpt
277e : 28              >            plp
                        
277f : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
2781 : 08              >            php         ;save flags
2782 : a50c            >            lda zpt
2784 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2787 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2789 : 68              >            pla         ;load status
                       >            eor_flag 0
278a : 0908            >            ora #decmode        ;ignore decimal mode bit
278c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
278e : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2791 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2793 : ca                       dex
2794 : 10e1                     bpl trorc2
2796 : a203                     ldx #3
2798 :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
2798 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
279a : 48              >            pha         ;use stack to load status
279b : b513            >            lda zp1,x    ;load to zeropage
279d : 850c            >            sta zpt
279f : 28              >            plp
                        
27a0 : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
27a2 : 08              >            php         ;save flags
27a3 : a50c            >            lda zpt
27a5 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
27a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27aa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27ab : 0908            >            ora #decmode        ;ignore decimal mode bit
27ad : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
27af : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27b2 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  165
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                        
27b4 : ca                       dex
27b5 : 10e1                     bpl trorc3
                                next_test
27b7 : ad0002          >            lda test_case   ;previous test
27ba : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
27bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
27be : a91f            >            lda #test_num   ;*** next tests' number
27c0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
27c3 : a203                     ldx #3
27c5 :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
27c5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27c7 : 48              >            pha         ;use stack to load status
27c8 : b513            >            lda zp1,x    ;load to memory
27ca : 8d0302          >            sta abst
27cd : 28              >            plp
                        
27ce : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
27d1 : 08              >            php         ;save flags
27d2 : ad0302          >            lda abst
27d5 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
27d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27da : 68              >            pla         ;load status
                       >            eor_flag 0
27db : 0908            >            ora #decmode        ;ignore decimal mode bit
27dd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
27df : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
27e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27e4 : ca                       dex
27e5 : 10de                     bpl tasl4
27e7 : a203                     ldx #3
27e9 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
27e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27eb : 48              >            pha         ;use stack to load status
27ec : b513            >            lda zp1,x    ;load to memory
27ee : 8d0302          >            sta abst
27f1 : 28              >            plp
                        
27f2 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
27f5 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  166
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

27f6 : ad0302          >            lda abst
27f9 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
27fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27fe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27ff : 0908            >            ora #decmode        ;ignore decimal mode bit
2801 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2803 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2806 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2808 : ca                       dex
2809 : 10de                     bpl tasl5
                        
280b : a203                     ldx #3
280d :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
280d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
280f : 48              >            pha         ;use stack to load status
2810 : b513            >            lda zp1,x    ;load to memory
2812 : 8d0302          >            sta abst
2815 : 28              >            plp
                        
2816 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2819 : 08              >            php         ;save flags
281a : ad0302          >            lda abst
281d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2820 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2822 : 68              >            pla         ;load status
                       >            eor_flag 0
2823 : 0908            >            ora #decmode        ;ignore decimal mode bit
2825 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2827 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
282a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
282c : ca                       dex
282d : 10de                     bpl tlsr4
282f : a203                     ldx #3
2831 :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
2831 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2833 : 48              >            pha         ;use stack to load status
2834 : b513            >            lda zp1,x    ;load to memory
2836 : 8d0302          >            sta abst
2839 : 28              >            plp
                        
283a : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  167
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

283d : 08              >            php         ;save flags
283e : ad0302          >            lda abst
2841 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2846 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2847 : 0908            >            ora #decmode        ;ignore decimal mode bit
2849 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
284b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
284e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2850 : ca                       dex
2851 : 10de                     bpl tlsr5
                        
2853 : a203                     ldx #3
2855 :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
2855 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2857 : 48              >            pha         ;use stack to load status
2858 : b513            >            lda zp1,x    ;load to memory
285a : 8d0302          >            sta abst
285d : 28              >            plp
                        
285e : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
2861 : 08              >            php         ;save flags
2862 : ad0302          >            lda abst
2865 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2868 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
286a : 68              >            pla         ;load status
                       >            eor_flag 0
286b : 0908            >            ora #decmode        ;ignore decimal mode bit
286d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
286f : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2872 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2874 : ca                       dex
2875 : 10de                     bpl trol4
2877 : a203                     ldx #3
2879 :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
2879 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
287b : 48              >            pha         ;use stack to load status
287c : b513            >            lda zp1,x    ;load to memory
287e : 8d0302          >            sta abst
2881 : 28              >            plp
                        
2882 : 2e0302                   rol abst
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  168
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_abs rROL,fROL,$ff-fnzc
2885 : 08              >            php         ;save flags
2886 : ad0302          >            lda abst
2889 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
288c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
288e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
288f : 0908            >            ora #decmode        ;ignore decimal mode bit
2891 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2893 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2896 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2898 : ca                       dex
2899 : 10de                     bpl trol5
                        
289b : a203                     ldx #3
289d :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
289d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
289f : 48              >            pha         ;use stack to load status
28a0 : b513            >            lda zp1,x    ;load to memory
28a2 : 8d0302          >            sta abst
28a5 : 28              >            plp
                        
28a6 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
28a9 : 08              >            php         ;save flags
28aa : ad0302          >            lda abst
28ad : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
28b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28b2 : 68              >            pla         ;load status
                       >            eor_flag 0
28b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
28b5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28b7 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28bc : ca                       dex
28bd : 10de                     bpl trolc4
28bf : a203                     ldx #3
28c1 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
28c1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28c3 : 48              >            pha         ;use stack to load status
28c4 : b513            >            lda zp1,x    ;load to memory
28c6 : 8d0302          >            sta abst
28c9 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  169
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

28ca : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
28cd : 08              >            php         ;save flags
28ce : ad0302          >            lda abst
28d1 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
28d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28d6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
28d9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
28db : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28e0 : ca                       dex
28e1 : 10de                     bpl trolc5
                        
28e3 : a203                     ldx #3
28e5 :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
28e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28e7 : 48              >            pha         ;use stack to load status
28e8 : b513            >            lda zp1,x    ;load to memory
28ea : 8d0302          >            sta abst
28ed : 28              >            plp
                        
28ee : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
28f1 : 08              >            php         ;save flags
28f2 : ad0302          >            lda abst
28f5 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
28f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28fa : 68              >            pla         ;load status
                       >            eor_flag 0
28fb : 0908            >            ora #decmode        ;ignore decimal mode bit
28fd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28ff : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2902 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2904 : ca                       dex
2905 : 10de                     bpl tror4
2907 : a203                     ldx #3
2909 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
2909 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
290b : 48              >            pha         ;use stack to load status
290c : b513            >            lda zp1,x    ;load to memory
290e : 8d0302          >            sta abst
2911 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  170
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2912 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
2915 : 08              >            php         ;save flags
2916 : ad0302          >            lda abst
2919 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
291c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
291e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
291f : 0908            >            ora #decmode        ;ignore decimal mode bit
2921 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2923 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2926 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2928 : ca                       dex
2929 : 10de                     bpl tror5
                        
292b : a203                     ldx #3
292d :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
292d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
292f : 48              >            pha         ;use stack to load status
2930 : b513            >            lda zp1,x    ;load to memory
2932 : 8d0302          >            sta abst
2935 : 28              >            plp
                        
2936 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2939 : 08              >            php         ;save flags
293a : ad0302          >            lda abst
293d : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2940 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2942 : 68              >            pla         ;load status
                       >            eor_flag 0
2943 : 0908            >            ora #decmode        ;ignore decimal mode bit
2945 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2947 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
294a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
294c : ca                       dex
294d : 10de                     bpl trorc4
294f : a203                     ldx #3
2951 :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
2951 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2953 : 48              >            pha         ;use stack to load status
2954 : b513            >            lda zp1,x    ;load to memory
2956 : 8d0302          >            sta abst
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  171
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2959 : 28              >            plp
                        
295a : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
295d : 08              >            php         ;save flags
295e : ad0302          >            lda abst
2961 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2964 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2966 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2967 : 0908            >            ora #decmode        ;ignore decimal mode bit
2969 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
296b : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
296e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2970 : ca                       dex
2971 : 10de                     bpl trorc5
                                next_test
2973 : ad0002          >            lda test_case   ;previous test
2976 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2978 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
297a : a920            >            lda #test_num   ;*** next tests' number
297c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
297f : a203                     ldx #3
2981 :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
2981 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2983 : 48              >            pha         ;use stack to load status
2984 : b513            >            lda zp1,x    ;load to indexed zeropage
2986 : 950c            >            sta zpt,x
2988 : 28              >            plp
                        
2989 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
298b : 08              >            php         ;save flags
298c : b50c            >            lda zpt,x
298e : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2991 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2993 : 68              >            pla         ;load status
                       >            eor_flag 0
2994 : 0908            >            ora #decmode        ;ignore decimal mode bit
2996 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2998 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
299b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  172
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                        
299d : ca                       dex
299e : 10e1                     bpl tasl6
29a0 : a203                     ldx #3
29a2 :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
29a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29a4 : 48              >            pha         ;use stack to load status
29a5 : b513            >            lda zp1,x    ;load to indexed zeropage
29a7 : 950c            >            sta zpt,x
29a9 : 28              >            plp
                        
29aa : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
29ac : 08              >            php         ;save flags
29ad : b50c            >            lda zpt,x
29af : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
29b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29b4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29b5 : 0908            >            ora #decmode        ;ignore decimal mode bit
29b7 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29b9 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
29bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29be : ca                       dex
29bf : 10e1                     bpl tasl7
                        
29c1 : a203                     ldx #3
29c3 :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
29c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29c5 : 48              >            pha         ;use stack to load status
29c6 : b513            >            lda zp1,x    ;load to indexed zeropage
29c8 : 950c            >            sta zpt,x
29ca : 28              >            plp
                        
29cb : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
29cd : 08              >            php         ;save flags
29ce : b50c            >            lda zpt,x
29d0 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
29d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29d5 : 68              >            pla         ;load status
                       >            eor_flag 0
29d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
29d8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
29da : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  173
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

29dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29df : ca                       dex
29e0 : 10e1                     bpl tlsr6
29e2 : a203                     ldx #3
29e4 :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
29e4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29e6 : 48              >            pha         ;use stack to load status
29e7 : b513            >            lda zp1,x    ;load to indexed zeropage
29e9 : 950c            >            sta zpt,x
29eb : 28              >            plp
                        
29ec : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
29ee : 08              >            php         ;save flags
29ef : b50c            >            lda zpt,x
29f1 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
29f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
29f9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29fb : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
29fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a00 : ca                       dex
2a01 : 10e1                     bpl tlsr7
                        
2a03 : a203                     ldx #3
2a05 :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
2a05 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a07 : 48              >            pha         ;use stack to load status
2a08 : b513            >            lda zp1,x    ;load to indexed zeropage
2a0a : 950c            >            sta zpt,x
2a0c : 28              >            plp
                        
2a0d : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
2a0f : 08              >            php         ;save flags
2a10 : b50c            >            lda zpt,x
2a12 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2a15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a17 : 68              >            pla         ;load status
                       >            eor_flag 0
2a18 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a1a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a1c : dd3002          >            cmp fROL,x    ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  174
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
2a1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a21 : ca                       dex
2a22 : 10e1                     bpl trol6
2a24 : a203                     ldx #3
2a26 :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
2a26 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2a28 : 48              >            pha         ;use stack to load status
2a29 : b513            >            lda zp1,x    ;load to indexed zeropage
2a2b : 950c            >            sta zpt,x
2a2d : 28              >            plp
                        
2a2e : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
2a30 : 08              >            php         ;save flags
2a31 : b50c            >            lda zpt,x
2a33 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2a36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a38 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a39 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a3b : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a3d : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a42 : ca                       dex
2a43 : 10e1                     bpl trol7
                        
2a45 : a203                     ldx #3
2a47 :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
2a47 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2a49 : 48              >            pha         ;use stack to load status
2a4a : b513            >            lda zp1,x    ;load to indexed zeropage
2a4c : 950c            >            sta zpt,x
2a4e : 28              >            plp
                        
2a4f : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
2a51 : 08              >            php         ;save flags
2a52 : b50c            >            lda zpt,x
2a54 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a59 : 68              >            pla         ;load status
                       >            eor_flag 0
2a5a : 0908            >            ora #decmode        ;ignore decimal mode bit
2a5c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  175
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2a5e : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2a61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a63 : ca                       dex
2a64 : 10e1                     bpl trolc6
2a66 : a203                     ldx #3
2a68 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
2a68 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a6a : 48              >            pha         ;use stack to load status
2a6b : b513            >            lda zp1,x    ;load to indexed zeropage
2a6d : 950c            >            sta zpt,x
2a6f : 28              >            plp
                        
2a70 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
2a72 : 08              >            php         ;save flags
2a73 : b50c            >            lda zpt,x
2a75 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a7a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a7b : 0908            >            ora #decmode        ;ignore decimal mode bit
2a7d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a7f : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2a82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a84 : ca                       dex
2a85 : 10e1                     bpl trolc7
                        
2a87 : a203                     ldx #3
2a89 :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
2a89 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a8b : 48              >            pha         ;use stack to load status
2a8c : b513            >            lda zp1,x    ;load to indexed zeropage
2a8e : 950c            >            sta zpt,x
2a90 : 28              >            plp
                        
2a91 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
2a93 : 08              >            php         ;save flags
2a94 : b50c            >            lda zpt,x
2a96 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2a99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a9b : 68              >            pla         ;load status
                       >            eor_flag 0
2a9c : 0908            >            ora #decmode        ;ignore decimal mode bit
2a9e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  176
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2aa0 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2aa3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2aa5 : ca                       dex
2aa6 : 10e1                     bpl tror6
2aa8 : a203                     ldx #3
2aaa :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
2aaa : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2aac : 48              >            pha         ;use stack to load status
2aad : b513            >            lda zp1,x    ;load to indexed zeropage
2aaf : 950c            >            sta zpt,x
2ab1 : 28              >            plp
                        
2ab2 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
2ab4 : 08              >            php         ;save flags
2ab5 : b50c            >            lda zpt,x
2ab7 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2aba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2abc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2abd : 0908            >            ora #decmode        ;ignore decimal mode bit
2abf : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2ac1 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2ac4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ac6 : ca                       dex
2ac7 : 10e1                     bpl tror7
                        
2ac9 : a203                     ldx #3
2acb :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
2acb : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2acd : 48              >            pha         ;use stack to load status
2ace : b513            >            lda zp1,x    ;load to indexed zeropage
2ad0 : 950c            >            sta zpt,x
2ad2 : 28              >            plp
                        
2ad3 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
2ad5 : 08              >            php         ;save flags
2ad6 : b50c            >            lda zpt,x
2ad8 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2adb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2add : 68              >            pla         ;load status
                       >            eor_flag 0
2ade : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  177
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2ae0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ae2 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2ae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ae7 : ca                       dex
2ae8 : 10e1                     bpl trorc6
2aea : a203                     ldx #3
2aec :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
2aec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2aee : 48              >            pha         ;use stack to load status
2aef : b513            >            lda zp1,x    ;load to indexed zeropage
2af1 : 950c            >            sta zpt,x
2af3 : 28              >            plp
                        
2af4 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
2af6 : 08              >            php         ;save flags
2af7 : b50c            >            lda zpt,x
2af9 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2afc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2afe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2aff : 0908            >            ora #decmode        ;ignore decimal mode bit
2b01 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b03 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b08 : ca                       dex
2b09 : 10e1                     bpl trorc7
                                next_test
2b0b : ad0002          >            lda test_case   ;previous test
2b0e : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2b10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
2b12 : a921            >            lda #test_num   ;*** next tests' number
2b14 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
2b17 : a203                     ldx #3
2b19 :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
2b19 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b1b : 48              >            pha         ;use stack to load status
2b1c : b513            >            lda zp1,x    ;load to indexed memory
2b1e : 9d0302          >            sta abst,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  178
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2b21 : 28              >            plp
                        
2b22 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
2b25 : 08              >            php         ;save flags
2b26 : bd0302          >            lda abst,x
2b29 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2b2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b2e : 68              >            pla         ;load status
                       >            eor_flag 0
2b2f : 0908            >            ora #decmode        ;ignore decimal mode bit
2b31 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b33 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b38 : ca                       dex
2b39 : 10de                     bpl tasl8
2b3b : a203                     ldx #3
2b3d :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
2b3d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b3f : 48              >            pha         ;use stack to load status
2b40 : b513            >            lda zp1,x    ;load to indexed memory
2b42 : 9d0302          >            sta abst,x
2b45 : 28              >            plp
                        
2b46 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
2b49 : 08              >            php         ;save flags
2b4a : bd0302          >            lda abst,x
2b4d : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2b50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b52 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b53 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b55 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b57 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b5c : ca                       dex
2b5d : 10de                     bpl tasl9
                        
2b5f : a203                     ldx #3
2b61 :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
2b61 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b63 : 48              >            pha         ;use stack to load status
2b64 : b513            >            lda zp1,x    ;load to indexed memory
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  179
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2b66 : 9d0302          >            sta abst,x
2b69 : 28              >            plp
                        
2b6a : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
2b6d : 08              >            php         ;save flags
2b6e : bd0302          >            lda abst,x
2b71 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2b74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b76 : 68              >            pla         ;load status
                       >            eor_flag 0
2b77 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b79 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b7b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2b7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b80 : ca                       dex
2b81 : 10de                     bpl tlsr8
2b83 : a203                     ldx #3
2b85 :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
2b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b87 : 48              >            pha         ;use stack to load status
2b88 : b513            >            lda zp1,x    ;load to indexed memory
2b8a : 9d0302          >            sta abst,x
2b8d : 28              >            plp
                        
2b8e : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
2b91 : 08              >            php         ;save flags
2b92 : bd0302          >            lda abst,x
2b95 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2b98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b9a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b9b : 0908            >            ora #decmode        ;ignore decimal mode bit
2b9d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b9f : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2ba2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ba4 : ca                       dex
2ba5 : 10de                     bpl tlsr9
                        
2ba7 : a203                     ldx #3
2ba9 :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
2ba9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bab : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  180
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2bac : b513            >            lda zp1,x    ;load to indexed memory
2bae : 9d0302          >            sta abst,x
2bb1 : 28              >            plp
                        
2bb2 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
2bb5 : 08              >            php         ;save flags
2bb6 : bd0302          >            lda abst,x
2bb9 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2bbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bbe : 68              >            pla         ;load status
                       >            eor_flag 0
2bbf : 0908            >            ora #decmode        ;ignore decimal mode bit
2bc1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2bc3 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2bc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bc8 : ca                       dex
2bc9 : 10de                     bpl trol8
2bcb : a203                     ldx #3
2bcd :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
2bcd : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2bcf : 48              >            pha         ;use stack to load status
2bd0 : b513            >            lda zp1,x    ;load to indexed memory
2bd2 : 9d0302          >            sta abst,x
2bd5 : 28              >            plp
                        
2bd6 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
2bd9 : 08              >            php         ;save flags
2bda : bd0302          >            lda abst,x
2bdd : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2be0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2be2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2be3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2be5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2be7 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2bea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bec : ca                       dex
2bed : 10de                     bpl trol9
                        
2bef : a203                     ldx #3
2bf1 :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
2bf1 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  181
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2bf3 : 48              >            pha         ;use stack to load status
2bf4 : b513            >            lda zp1,x    ;load to indexed memory
2bf6 : 9d0302          >            sta abst,x
2bf9 : 28              >            plp
                        
2bfa : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
2bfd : 08              >            php         ;save flags
2bfe : bd0302          >            lda abst,x
2c01 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c06 : 68              >            pla         ;load status
                       >            eor_flag 0
2c07 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c09 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c0b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c10 : ca                       dex
2c11 : 10de                     bpl trolc8
2c13 : a203                     ldx #3
2c15 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
2c15 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c17 : 48              >            pha         ;use stack to load status
2c18 : b513            >            lda zp1,x    ;load to indexed memory
2c1a : 9d0302          >            sta abst,x
2c1d : 28              >            plp
                        
2c1e : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
2c21 : 08              >            php         ;save flags
2c22 : bd0302          >            lda abst,x
2c25 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c2a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c2b : 0908            >            ora #decmode        ;ignore decimal mode bit
2c2d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c2f : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c34 : ca                       dex
2c35 : 10de                     bpl trolc9
                        
2c37 : a203                     ldx #3
2c39 :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
2c39 : a900            >            lda #0             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  182
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2c3b : 48              >            pha         ;use stack to load status
2c3c : b513            >            lda zp1,x    ;load to indexed memory
2c3e : 9d0302          >            sta abst,x
2c41 : 28              >            plp
                        
2c42 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
2c45 : 08              >            php         ;save flags
2c46 : bd0302          >            lda abst,x
2c49 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2c4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c4e : 68              >            pla         ;load status
                       >            eor_flag 0
2c4f : 0908            >            ora #decmode        ;ignore decimal mode bit
2c51 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c53 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c58 : ca                       dex
2c59 : 10de                     bpl tror8
2c5b : a203                     ldx #3
2c5d :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
2c5d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2c5f : 48              >            pha         ;use stack to load status
2c60 : b513            >            lda zp1,x    ;load to indexed memory
2c62 : 9d0302          >            sta abst,x
2c65 : 28              >            plp
                        
2c66 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
2c69 : 08              >            php         ;save flags
2c6a : bd0302          >            lda abst,x
2c6d : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2c70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c72 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c73 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c75 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c77 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c7c : ca                       dex
2c7d : 10de                     bpl tror9
                        
2c7f : a203                     ldx #3
2c81 :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  183
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2c81 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2c83 : 48              >            pha         ;use stack to load status
2c84 : b513            >            lda zp1,x    ;load to indexed memory
2c86 : 9d0302          >            sta abst,x
2c89 : 28              >            plp
                        
2c8a : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
2c8d : 08              >            php         ;save flags
2c8e : bd0302          >            lda abst,x
2c91 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2c94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c96 : 68              >            pla         ;load status
                       >            eor_flag 0
2c97 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c99 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c9b : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2c9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ca0 : ca                       dex
2ca1 : 10de                     bpl trorc8
2ca3 : a203                     ldx #3
2ca5 :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
2ca5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ca7 : 48              >            pha         ;use stack to load status
2ca8 : b513            >            lda zp1,x    ;load to indexed memory
2caa : 9d0302          >            sta abst,x
2cad : 28              >            plp
                        
2cae : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
2cb1 : 08              >            php         ;save flags
2cb2 : bd0302          >            lda abst,x
2cb5 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cba : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cbb : 0908            >            ora #decmode        ;ignore decimal mode bit
2cbd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2cbf : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cc4 : ca                       dex
2cc5 : 10de                     bpl trorc9
                                next_test
2cc7 : ad0002          >            lda test_case   ;previous test
2cca : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  184
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2ccc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
2cce : a922            >            lda #test_num   ;*** next tests' number
2cd0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
2cd3 : a200                     ldx #0
2cd5 : a97e                     lda #$7e
2cd7 : 850c                     sta zpt
2cd9 :                  tinc    
                                set_stat 0
                       >            load_flag 0
2cd9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cdb : 48              >            pha         ;use stack to load status
2cdc : 28              >            plp
                        
2cdd : e60c                     inc zpt
                                tst_z rINC,fINC,0
2cdf : 08              >            php         ;save flags
2ce0 : a50c            >            lda zpt
2ce2 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2ce5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ce7 : 68              >            pla         ;load status
                       >            eor_flag 0
2ce8 : 0908            >            ora #decmode        ;ignore decimal mode bit
2cea : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2cec : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2cef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cf1 : e8                       inx
2cf2 : e002                     cpx #2
2cf4 : d004                     bne tinc1
2cf6 : a9fe                     lda #$fe
2cf8 : 850c                     sta zpt
2cfa : e005             tinc1   cpx #5
2cfc : d0db                     bne tinc
2cfe : ca                       dex
2cff : e60c                     inc zpt
2d01 :                  tdec    
                                set_stat 0
                       >            load_flag 0
2d01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d03 : 48              >            pha         ;use stack to load status
2d04 : 28              >            plp
                        
2d05 : c60c                     dec zpt
                                tst_z rINC,fINC,0
2d07 : 08              >            php         ;save flags
2d08 : a50c            >            lda zpt
2d0a : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  185
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2d0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d0f : 68              >            pla         ;load status
                       >            eor_flag 0
2d10 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d12 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d14 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d19 : ca                       dex
2d1a : 300a                     bmi tdec1
2d1c : e001                     cpx #1
2d1e : d0e1                     bne tdec
2d20 : a981                     lda #$81
2d22 : 850c                     sta zpt
2d24 : d0db                     bne tdec
2d26 :                  tdec1
2d26 : a200                     ldx #0
2d28 : a97e                     lda #$7e
2d2a : 850c                     sta zpt
2d2c :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
2d2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d2e : 48              >            pha         ;use stack to load status
2d2f : 28              >            plp
                        
2d30 : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
2d32 : 08              >            php         ;save flags
2d33 : a50c            >            lda zpt
2d35 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d3a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d3b : 0908            >            ora #decmode        ;ignore decimal mode bit
2d3d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d3f : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d44 : e8                       inx
2d45 : e002                     cpx #2
2d47 : d004                     bne tinc11
2d49 : a9fe                     lda #$fe
2d4b : 850c                     sta zpt
2d4d : e005             tinc11  cpx #5
2d4f : d0db                     bne tinc10
2d51 : ca                       dex
2d52 : e60c                     inc zpt
2d54 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
2d54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  186
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2d56 : 48              >            pha         ;use stack to load status
2d57 : 28              >            plp
                        
2d58 : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
2d5a : 08              >            php         ;save flags
2d5b : a50c            >            lda zpt
2d5d : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d63 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d65 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d67 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d6c : ca                       dex
2d6d : 300a                     bmi tdec11
2d6f : e001                     cpx #1
2d71 : d0e1                     bne tdec10
2d73 : a981                     lda #$81
2d75 : 850c                     sta zpt
2d77 : d0db                     bne tdec10
2d79 :                  tdec11
                                next_test
2d79 : ad0002          >            lda test_case   ;previous test
2d7c : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2d7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
2d80 : a923            >            lda #test_num   ;*** next tests' number
2d82 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
2d85 : a200                     ldx #0
2d87 : a97e                     lda #$7e
2d89 : 8d0302                   sta abst
2d8c :                  tinc2    
                                set_stat 0
                       >            load_flag 0
2d8c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d8e : 48              >            pha         ;use stack to load status
2d8f : 28              >            plp
                        
2d90 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
2d93 : 08              >            php         ;save flags
2d94 : ad0302          >            lda abst
2d97 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  187
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2d9c : 68              >            pla         ;load status
                       >            eor_flag 0
2d9d : 0908            >            ora #decmode        ;ignore decimal mode bit
2d9f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2da1 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2da4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2da6 : e8                       inx
2da7 : e002                     cpx #2
2da9 : d005                     bne tinc3
2dab : a9fe                     lda #$fe
2dad : 8d0302                   sta abst
2db0 : e005             tinc3   cpx #5
2db2 : d0d8                     bne tinc2
2db4 : ca                       dex
2db5 : ee0302                   inc abst
2db8 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
2db8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2dba : 48              >            pha         ;use stack to load status
2dbb : 28              >            plp
                        
2dbc : ce0302                   dec abst
                                tst_abs rINC,fINC,0
2dbf : 08              >            php         ;save flags
2dc0 : ad0302          >            lda abst
2dc3 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2dc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2dc8 : 68              >            pla         ;load status
                       >            eor_flag 0
2dc9 : 0908            >            ora #decmode        ;ignore decimal mode bit
2dcb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2dcd : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2dd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dd2 : ca                       dex
2dd3 : 300b                     bmi tdec3
2dd5 : e001                     cpx #1
2dd7 : d0df                     bne tdec2
2dd9 : a981                     lda #$81
2ddb : 8d0302                   sta abst
2dde : d0d8                     bne tdec2
2de0 :                  tdec3
2de0 : a200                     ldx #0
2de2 : a97e                     lda #$7e
2de4 : 8d0302                   sta abst
2de7 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
2de7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2de9 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  188
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2dea : 28              >            plp
                        
2deb : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
2dee : 08              >            php         ;save flags
2def : ad0302          >            lda abst
2df2 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2df5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2df7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2df8 : 0908            >            ora #decmode        ;ignore decimal mode bit
2dfa : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2dfc : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2dff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e01 : e8                       inx
2e02 : e002                     cpx #2
2e04 : d005                     bne tinc13
2e06 : a9fe                     lda #$fe
2e08 : 8d0302                   sta abst
2e0b : e005             tinc13   cpx #5
2e0d : d0d8                     bne tinc12
2e0f : ca                       dex
2e10 : ee0302                   inc abst
2e13 :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
2e13 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e15 : 48              >            pha         ;use stack to load status
2e16 : 28              >            plp
                        
2e17 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
2e1a : 08              >            php         ;save flags
2e1b : ad0302          >            lda abst
2e1e : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e23 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e24 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e26 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e28 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e2d : ca                       dex
2e2e : 300b                     bmi tdec13
2e30 : e001                     cpx #1
2e32 : d0df                     bne tdec12
2e34 : a981                     lda #$81
2e36 : 8d0302                   sta abst
2e39 : d0d8                     bne tdec12
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  189
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2e3b :                  tdec13
                                next_test
2e3b : ad0002          >            lda test_case   ;previous test
2e3e : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2e40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
2e42 : a924            >            lda #test_num   ;*** next tests' number
2e44 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
2e47 : a200                     ldx #0
2e49 : a97e                     lda #$7e
2e4b : 950c             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
2e4d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e4f : 48              >            pha         ;use stack to load status
2e50 : 28              >            plp
                        
2e51 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
2e53 : 08              >            php         ;save flags
2e54 : b50c            >            lda zpt,x
2e56 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e5b : 68              >            pla         ;load status
                       >            eor_flag 0
2e5c : 0908            >            ora #decmode        ;ignore decimal mode bit
2e5e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e60 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e65 : b50c                     lda zpt,x
2e67 : e8                       inx
2e68 : e002                     cpx #2
2e6a : d002                     bne tinc5
2e6c : a9fe                     lda #$fe
2e6e : e005             tinc5   cpx #5
2e70 : d0d9                     bne tinc4
2e72 : ca                       dex
2e73 : a902                     lda #2
2e75 : 950c             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
2e77 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e79 : 48              >            pha         ;use stack to load status
2e7a : 28              >            plp
                        
2e7b : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
2e7d : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  190
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2e7e : b50c            >            lda zpt,x
2e80 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e85 : 68              >            pla         ;load status
                       >            eor_flag 0
2e86 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e88 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e8a : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e8d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e8f : b50c                     lda zpt,x
2e91 : ca                       dex
2e92 : 3008                     bmi tdec5
2e94 : e001                     cpx #1
2e96 : d0dd                     bne tdec4
2e98 : a981                     lda #$81
2e9a : d0d9                     bne tdec4
2e9c :                  tdec5
2e9c : a200                     ldx #0
2e9e : a97e                     lda #$7e
2ea0 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
2ea2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ea4 : 48              >            pha         ;use stack to load status
2ea5 : 28              >            plp
                        
2ea6 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ea8 : 08              >            php         ;save flags
2ea9 : b50c            >            lda zpt,x
2eab : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2eae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2eb0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2eb1 : 0908            >            ora #decmode        ;ignore decimal mode bit
2eb3 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2eb5 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2eb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2eba : b50c                     lda zpt,x
2ebc : e8                       inx
2ebd : e002                     cpx #2
2ebf : d002                     bne tinc15
2ec1 : a9fe                     lda #$fe
2ec3 : e005             tinc15  cpx #5
2ec5 : d0d9                     bne tinc14
2ec7 : ca                       dex
2ec8 : a902                     lda #2
2eca : 950c             tdec14  sta zpt,x 
                                set_stat $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  191
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag $ff
2ecc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ece : 48              >            pha         ;use stack to load status
2ecf : 28              >            plp
                        
2ed0 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ed2 : 08              >            php         ;save flags
2ed3 : b50c            >            lda zpt,x
2ed5 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2ed8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2eda : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2edb : 0908            >            ora #decmode        ;ignore decimal mode bit
2edd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2edf : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ee2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ee4 : b50c                     lda zpt,x
2ee6 : ca                       dex
2ee7 : 3008                     bmi tdec15
2ee9 : e001                     cpx #1
2eeb : d0dd                     bne tdec14
2eed : a981                     lda #$81
2eef : d0d9                     bne tdec14
2ef1 :                  tdec15
                                next_test
2ef1 : ad0002          >            lda test_case   ;previous test
2ef4 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2ef6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
2ef8 : a925            >            lda #test_num   ;*** next tests' number
2efa : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
2efd : a200                     ldx #0
2eff : a97e                     lda #$7e
2f01 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
2f04 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f06 : 48              >            pha         ;use stack to load status
2f07 : 28              >            plp
                        
2f08 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
2f0b : 08              >            php         ;save flags
2f0c : bd0302          >            lda abst,x
2f0f : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f12 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  192
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2f14 : 68              >            pla         ;load status
                       >            eor_flag 0
2f15 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f17 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f19 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f1e : bd0302                   lda abst,x
2f21 : e8                       inx
2f22 : e002                     cpx #2
2f24 : d002                     bne tinc7
2f26 : a9fe                     lda #$fe
2f28 : e005             tinc7   cpx #5
2f2a : d0d5                     bne tinc6
2f2c : ca                       dex
2f2d : a902                     lda #2
2f2f : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
2f32 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f34 : 48              >            pha         ;use stack to load status
2f35 : 28              >            plp
                        
2f36 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
2f39 : 08              >            php         ;save flags
2f3a : bd0302          >            lda abst,x
2f3d : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f42 : 68              >            pla         ;load status
                       >            eor_flag 0
2f43 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f45 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f47 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f4c : bd0302                   lda abst,x
2f4f : ca                       dex
2f50 : 3008                     bmi tdec7
2f52 : e001                     cpx #1
2f54 : d0d9                     bne tdec6
2f56 : a981                     lda #$81
2f58 : d0d5                     bne tdec6
2f5a :                  tdec7
2f5a : a200                     ldx #0
2f5c : a97e                     lda #$7e
2f5e : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
2f61 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f63 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  193
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2f64 : 28              >            plp
                        
2f65 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
2f68 : 08              >            php         ;save flags
2f69 : bd0302          >            lda abst,x
2f6c : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f6f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f71 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2f72 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f74 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2f76 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f7b : bd0302                   lda abst,x
2f7e : e8                       inx
2f7f : e002                     cpx #2
2f81 : d002                     bne tinc17
2f83 : a9fe                     lda #$fe
2f85 : e005             tinc17  cpx #5
2f87 : d0d5                     bne tinc16
2f89 : ca                       dex
2f8a : a902                     lda #2
2f8c : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
2f8f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f91 : 48              >            pha         ;use stack to load status
2f92 : 28              >            plp
                        
2f93 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
2f96 : 08              >            php         ;save flags
2f97 : bd0302          >            lda abst,x
2f9a : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f9f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fa0 : 0908            >            ora #decmode        ;ignore decimal mode bit
2fa2 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2fa4 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fa7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fa9 : bd0302                   lda abst,x
2fac : ca                       dex
2fad : 3008                     bmi tdec17
2faf : e001                     cpx #1
2fb1 : d0d9                     bne tdec16
2fb3 : a981                     lda #$81
2fb5 : d0d5                     bne tdec16
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  194
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2fb7 :                  tdec17
                                next_test
2fb7 : ad0002          >            lda test_case   ;previous test
2fba : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2fbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
2fbe : a926            >            lda #test_num   ;*** next tests' number
2fc0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
2fc3 : a203                     ldx #3          ;immediate
2fc5 : b51c             tand    lda zpAN,x
2fc7 : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
2fca : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fcc : 48              >            pha         ;use stack to load status
2fcd : bd5a02          >            lda absANa,x    ;precharge accu
2fd0 : 28              >            plp
                        
2fd1 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
2fd4 : 08              >            php         ;save flags
2fd5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
2fd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fda : 68              >            pla         ;load status
                       >            eor_flag 0
2fdb : 0908            >            ora #decmode        ;ignore decimal mode bit
2fdd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2fdf : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
2fe2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fe4 : ca                       dex
2fe5 : 10de                     bpl tand
2fe7 : a203                     ldx #3
2fe9 : b51c             tand1   lda zpAN,x
2feb : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
2fee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ff0 : 48              >            pha         ;use stack to load status
2ff1 : bd5a02          >            lda absANa,x    ;precharge accu
2ff4 : 28              >            plp
                        
2ff5 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
2ff8 : 08              >            php         ;save flags
2ff9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
2ffc : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  195
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
2ffe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fff : 0908            >            ora #decmode        ;ignore decimal mode bit
3001 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3003 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3006 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3008 : ca                       dex
3009 : 10de                     bpl tand1
                            
300b : a203                     ldx #3      ;zp
300d : b51c             tand2   lda zpAN,x
300f : 850c                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
3011 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3013 : 48              >            pha         ;use stack to load status
3014 : bd5a02          >            lda absANa,x    ;precharge accu
3017 : 28              >            plp
                        
3018 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
301a : 08              >            php         ;save flags
301b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
301e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3020 : 68              >            pla         ;load status
                       >            eor_flag 0
3021 : 0908            >            ora #decmode        ;ignore decimal mode bit
3023 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3025 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3028 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
302a : ca                       dex
302b : 10e0                     bpl tand2
302d : a203                     ldx #3
302f : b51c             tand3   lda zpAN,x
3031 : 850c                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
3033 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3035 : 48              >            pha         ;use stack to load status
3036 : bd5a02          >            lda absANa,x    ;precharge accu
3039 : 28              >            plp
                        
303a : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
303c : 08              >            php         ;save flags
303d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3040 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  196
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3042 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3043 : 0908            >            ora #decmode        ;ignore decimal mode bit
3045 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3047 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
304a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
304c : ca                       dex
304d : 10e0                     bpl tand3
                        
304f : a203                     ldx #3      ;abs
3051 : b51c             tand4   lda zpAN,x
3053 : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
3056 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3058 : 48              >            pha         ;use stack to load status
3059 : bd5a02          >            lda absANa,x    ;precharge accu
305c : 28              >            plp
                        
305d : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
3060 : 08              >            php         ;save flags
3061 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3064 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3066 : 68              >            pla         ;load status
                       >            eor_flag 0
3067 : 0908            >            ora #decmode        ;ignore decimal mode bit
3069 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
306b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
306e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3070 : ca                       dex
3071 : 10de                     bpl tand4
3073 : a203                     ldx #3
3075 : b51c             tand5   lda zpAN,x
3077 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
307a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
307c : 48              >            pha         ;use stack to load status
307d : bd5a02          >            lda absANa,x    ;precharge accu
3080 : 28              >            plp
                        
3081 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
3084 : 08              >            php         ;save flags
3085 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3088 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
308a : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  197
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            eor_flag $ff-fnz
308b : 0908            >            ora #decmode        ;ignore decimal mode bit
308d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
308f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3092 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3094 : ca                       dex
3095 : 1002                     bpl tand6
                        
3097 : a203                     ldx #3      ;zp,x
3099 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
3099 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
309b : 48              >            pha         ;use stack to load status
309c : bd5a02          >            lda absANa,x    ;precharge accu
309f : 28              >            plp
                        
30a0 : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,0
30a2 : 08              >            php         ;save flags
30a3 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30a8 : 68              >            pla         ;load status
                       >            eor_flag 0
30a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
30ab : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30ad : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30b2 : ca                       dex
30b3 : 10e4                     bpl tand6
30b5 : a203                     ldx #3
30b7 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
30b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30b9 : 48              >            pha         ;use stack to load status
30ba : bd5a02          >            lda absANa,x    ;precharge accu
30bd : 28              >            plp
                        
30be : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
30c0 : 08              >            php         ;save flags
30c1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30c6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30c7 : 0908            >            ora #decmode        ;ignore decimal mode bit
30c9 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  198
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
30cb : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30d0 : ca                       dex
30d1 : 10e4                     bpl tand7
                        
30d3 : a203                     ldx #3      ;abs,x
30d5 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
30d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30d7 : 48              >            pha         ;use stack to load status
30d8 : bd5a02          >            lda absANa,x    ;precharge accu
30db : 28              >            plp
                        
30dc : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,0
30df : 08              >            php         ;save flags
30e0 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30e5 : 68              >            pla         ;load status
                       >            eor_flag 0
30e6 : 0908            >            ora #decmode        ;ignore decimal mode bit
30e8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30ea : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30ef : ca                       dex
30f0 : 10e3                     bpl tand8
30f2 : a203                     ldx #3
30f4 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
30f4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30f6 : 48              >            pha         ;use stack to load status
30f7 : bd5a02          >            lda absANa,x    ;precharge accu
30fa : 28              >            plp
                        
30fb : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
30fe : 08              >            php         ;save flags
30ff : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3102 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3104 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3105 : 0908            >            ora #decmode        ;ignore decimal mode bit
3107 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3109 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  199
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

310c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
310e : ca                       dex
310f : 10e3                     bpl tand9
                        
3111 : a003                     ldy #3      ;abs,y
3113 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
3113 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3115 : 48              >            pha         ;use stack to load status
3116 : b95a02          >            lda absANa,y    ;precharge accu
3119 : 28              >            plp
                        
311a : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,0
311d : 08              >            php         ;save flags
311e : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3121 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3123 : 68              >            pla         ;load status
                       >            eor_flag 0
3124 : 0908            >            ora #decmode        ;ignore decimal mode bit
3126 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3128 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
312b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
312d : 88                       dey
312e : 10e3                     bpl tand10
3130 : a003                     ldy #3
3132 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
3132 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3134 : 48              >            pha         ;use stack to load status
3135 : b95a02          >            lda absANa,y    ;precharge accu
3138 : 28              >            plp
                        
3139 : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
313c : 08              >            php         ;save flags
313d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3140 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3142 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3143 : 0908            >            ora #decmode        ;ignore decimal mode bit
3145 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3147 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
314a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  200
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

314c : 88                       dey
314d : 10e3                     bpl tand11
                        
314f : a206                     ldx #6      ;(zp,x)
3151 : a003                     ldy #3
3153 :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
3153 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3155 : 48              >            pha         ;use stack to load status
3156 : b95a02          >            lda absANa,y    ;precharge accu
3159 : 28              >            plp
                        
315a : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
315c : 08              >            php         ;save flags
315d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3162 : 68              >            pla         ;load status
                       >            eor_flag 0
3163 : 0908            >            ora #decmode        ;ignore decimal mode bit
3165 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3167 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
316a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
316c : ca                       dex
316d : ca                       dex
316e : 88                       dey
316f : 10e2                     bpl tand12
3171 : a206                     ldx #6
3173 : a003                     ldy #3
3175 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
3175 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3177 : 48              >            pha         ;use stack to load status
3178 : b95a02          >            lda absANa,y    ;precharge accu
317b : 28              >            plp
                        
317c : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
317e : 08              >            php         ;save flags
317f : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3182 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3184 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3185 : 0908            >            ora #decmode        ;ignore decimal mode bit
3187 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3189 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
318c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  201
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
318e : ca                       dex
318f : ca                       dex
3190 : 88                       dey
3191 : 10e2                     bpl tand13
                        
3193 : a003                     ldy #3      ;(zp),y
3195 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
3195 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3197 : 48              >            pha         ;use stack to load status
3198 : b95a02          >            lda absANa,y    ;precharge accu
319b : 28              >            plp
                        
319c : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,0
319e : 08              >            php         ;save flags
319f : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31a4 : 68              >            pla         ;load status
                       >            eor_flag 0
31a5 : 0908            >            ora #decmode        ;ignore decimal mode bit
31a7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31a9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
31ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ae : 88                       dey
31af : 10e4                     bpl tand14
31b1 : a003                     ldy #3
31b3 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
31b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31b5 : 48              >            pha         ;use stack to load status
31b6 : b95a02          >            lda absANa,y    ;precharge accu
31b9 : 28              >            plp
                        
31ba : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
31bc : 08              >            php         ;save flags
31bd : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31c2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
31c5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31c7 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
31ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  202
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

31cc : 88                       dey
31cd : 10e4                     bpl tand15
                                next_test
31cf : ad0002          >            lda test_case   ;previous test
31d2 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
31d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
31d6 : a927            >            lda #test_num   ;*** next tests' number
31d8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
31db : a203                     ldx #3          ;immediate - self modifying code
31dd : b520             teor    lda zpEO,x
31df : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
31e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31e4 : 48              >            pha         ;use stack to load status
31e5 : bd5e02          >            lda absEOa,x    ;precharge accu
31e8 : 28              >            plp
                        
31e9 : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
31ec : 08              >            php         ;save flags
31ed : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
31f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31f2 : 68              >            pla         ;load status
                       >            eor_flag 0
31f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
31f5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31f7 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
31fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31fc : ca                       dex
31fd : 10de                     bpl teor
31ff : a203                     ldx #3
3201 : b520             teor1   lda zpEO,x
3203 : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3206 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3208 : 48              >            pha         ;use stack to load status
3209 : bd5e02          >            lda absEOa,x    ;precharge accu
320c : 28              >            plp
                        
320d : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3210 : 08              >            php         ;save flags
3211 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3214 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  203
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
3216 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3217 : 0908            >            ora #decmode        ;ignore decimal mode bit
3219 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
321b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
321e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3220 : ca                       dex
3221 : 10de                     bpl teor1
                            
3223 : a203                     ldx #3      ;zp
3225 : b520             teor2    lda zpEO,x
3227 : 850c                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
3229 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
322b : 48              >            pha         ;use stack to load status
322c : bd5e02          >            lda absEOa,x    ;precharge accu
322f : 28              >            plp
                        
3230 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
3232 : 08              >            php         ;save flags
3233 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3236 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3238 : 68              >            pla         ;load status
                       >            eor_flag 0
3239 : 0908            >            ora #decmode        ;ignore decimal mode bit
323b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
323d : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3240 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3242 : ca                       dex
3243 : 10e0                     bpl teor2
3245 : a203                     ldx #3
3247 : b520             teor3   lda zpEO,x
3249 : 850c                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
324b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
324d : 48              >            pha         ;use stack to load status
324e : bd5e02          >            lda absEOa,x    ;precharge accu
3251 : 28              >            plp
                        
3252 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3254 : 08              >            php         ;save flags
3255 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3258 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  204
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

325a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
325b : 0908            >            ora #decmode        ;ignore decimal mode bit
325d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
325f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3262 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3264 : ca                       dex
3265 : 10e0                     bpl teor3
                        
3267 : a203                     ldx #3      ;abs
3269 : b520             teor4   lda zpEO,x
326b : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
326e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3270 : 48              >            pha         ;use stack to load status
3271 : bd5e02          >            lda absEOa,x    ;precharge accu
3274 : 28              >            plp
                        
3275 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
3278 : 08              >            php         ;save flags
3279 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
327c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
327e : 68              >            pla         ;load status
                       >            eor_flag 0
327f : 0908            >            ora #decmode        ;ignore decimal mode bit
3281 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3283 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3286 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3288 : ca                       dex
3289 : 10de                     bpl teor4
328b : a203                     ldx #3
328d : b520             teor5   lda zpEO,x
328f : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3292 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3294 : 48              >            pha         ;use stack to load status
3295 : bd5e02          >            lda absEOa,x    ;precharge accu
3298 : 28              >            plp
                        
3299 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
329c : 08              >            php         ;save flags
329d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32a2 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  205
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            eor_flag $ff-fnz
32a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
32a5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
32a7 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32ac : ca                       dex
32ad : 1002                     bpl teor6
                        
32af : a203                     ldx #3      ;zp,x
32b1 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
32b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32b3 : 48              >            pha         ;use stack to load status
32b4 : bd5e02          >            lda absEOa,x    ;precharge accu
32b7 : 28              >            plp
                        
32b8 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
32ba : 08              >            php         ;save flags
32bb : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32c0 : 68              >            pla         ;load status
                       >            eor_flag 0
32c1 : 0908            >            ora #decmode        ;ignore decimal mode bit
32c3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32c5 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32ca : ca                       dex
32cb : 10e4                     bpl teor6
32cd : a203                     ldx #3
32cf :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32cf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32d1 : 48              >            pha         ;use stack to load status
32d2 : bd5e02          >            lda absEOa,x    ;precharge accu
32d5 : 28              >            plp
                        
32d6 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
32d8 : 08              >            php         ;save flags
32d9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32de : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
32df : 0908            >            ora #decmode        ;ignore decimal mode bit
32e1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  206
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
32e3 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32e8 : ca                       dex
32e9 : 10e4                     bpl teor7
                        
32eb : a203                     ldx #3      ;abs,x
32ed :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
32ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32ef : 48              >            pha         ;use stack to load status
32f0 : bd5e02          >            lda absEOa,x    ;precharge accu
32f3 : 28              >            plp
                        
32f4 : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,0
32f7 : 08              >            php         ;save flags
32f8 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32fd : 68              >            pla         ;load status
                       >            eor_flag 0
32fe : 0908            >            ora #decmode        ;ignore decimal mode bit
3300 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3302 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3305 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3307 : ca                       dex
3308 : 10e3                     bpl teor8
330a : a203                     ldx #3
330c :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
330c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
330e : 48              >            pha         ;use stack to load status
330f : bd5e02          >            lda absEOa,x    ;precharge accu
3312 : 28              >            plp
                        
3313 : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3316 : 08              >            php         ;save flags
3317 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
331a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
331c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
331d : 0908            >            ora #decmode        ;ignore decimal mode bit
331f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3321 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  207
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3324 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3326 : ca                       dex
3327 : 10e3                     bpl teor9
                        
3329 : a003                     ldy #3      ;abs,y
332b :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
332b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
332d : 48              >            pha         ;use stack to load status
332e : b95e02          >            lda absEOa,y    ;precharge accu
3331 : 28              >            plp
                        
3332 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3335 : 08              >            php         ;save flags
3336 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3339 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
333b : 68              >            pla         ;load status
                       >            eor_flag 0
333c : 0908            >            ora #decmode        ;ignore decimal mode bit
333e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3340 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3343 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3345 : 88                       dey
3346 : 10e3                     bpl teor10
3348 : a003                     ldy #3
334a :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
334a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
334c : 48              >            pha         ;use stack to load status
334d : b95e02          >            lda absEOa,y    ;precharge accu
3350 : 28              >            plp
                        
3351 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3354 : 08              >            php         ;save flags
3355 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3358 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
335a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
335b : 0908            >            ora #decmode        ;ignore decimal mode bit
335d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
335f : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3362 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  208
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3364 : 88                       dey
3365 : 10e3                     bpl teor11
                        
3367 : a206                     ldx #6      ;(zp,x)
3369 : a003                     ldy #3
336b :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
336b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
336d : 48              >            pha         ;use stack to load status
336e : b95e02          >            lda absEOa,y    ;precharge accu
3371 : 28              >            plp
                        
3372 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
3374 : 08              >            php         ;save flags
3375 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3378 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
337a : 68              >            pla         ;load status
                       >            eor_flag 0
337b : 0908            >            ora #decmode        ;ignore decimal mode bit
337d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
337f : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3382 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3384 : ca                       dex
3385 : ca                       dex
3386 : 88                       dey
3387 : 10e2                     bpl teor12
3389 : a206                     ldx #6
338b : a003                     ldy #3
338d :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
338d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
338f : 48              >            pha         ;use stack to load status
3390 : b95e02          >            lda absEOa,y    ;precharge accu
3393 : 28              >            plp
                        
3394 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3396 : 08              >            php         ;save flags
3397 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
339a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
339c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
339d : 0908            >            ora #decmode        ;ignore decimal mode bit
339f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33a1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  209
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
33a6 : ca                       dex
33a7 : ca                       dex
33a8 : 88                       dey
33a9 : 10e2                     bpl teor13
                        
33ab : a003                     ldy #3      ;(zp),y
33ad :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
33ad : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33af : 48              >            pha         ;use stack to load status
33b0 : b95e02          >            lda absEOa,y    ;precharge accu
33b3 : 28              >            plp
                        
33b4 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
33b6 : 08              >            php         ;save flags
33b7 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33bc : 68              >            pla         ;load status
                       >            eor_flag 0
33bd : 0908            >            ora #decmode        ;ignore decimal mode bit
33bf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33c1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33c6 : 88                       dey
33c7 : 10e4                     bpl teor14
33c9 : a003                     ldy #3
33cb :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33cb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33cd : 48              >            pha         ;use stack to load status
33ce : b95e02          >            lda absEOa,y    ;precharge accu
33d1 : 28              >            plp
                        
33d2 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
33d4 : 08              >            php         ;save flags
33d5 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33db : 0908            >            ora #decmode        ;ignore decimal mode bit
33dd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33df : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  210
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

33e4 : 88                       dey
33e5 : 10e4                     bpl teor15
                                next_test
33e7 : ad0002          >            lda test_case   ;previous test
33ea : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
33ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
33ee : a928            >            lda #test_num   ;*** next tests' number
33f0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
33f3 : a203                     ldx #3          ;immediate - self modifying code
33f5 : b518             tora    lda zpOR,x
33f7 : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
33fa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33fc : 48              >            pha         ;use stack to load status
33fd : bd5602          >            lda absORa,x    ;precharge accu
3400 : 28              >            plp
                        
3401 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
3404 : 08              >            php         ;save flags
3405 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3408 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
340a : 68              >            pla         ;load status
                       >            eor_flag 0
340b : 0908            >            ora #decmode        ;ignore decimal mode bit
340d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
340f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3412 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3414 : ca                       dex
3415 : 10de                     bpl tora
3417 : a203                     ldx #3
3419 : b518             tora1   lda zpOR,x
341b : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
341e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3420 : 48              >            pha         ;use stack to load status
3421 : bd5602          >            lda absORa,x    ;precharge accu
3424 : 28              >            plp
                        
3425 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3428 : 08              >            php         ;save flags
3429 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
342c : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  211
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
342e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
342f : 0908            >            ora #decmode        ;ignore decimal mode bit
3431 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3433 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3436 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3438 : ca                       dex
3439 : 10de                     bpl tora1
                            
343b : a203                     ldx #3      ;zp
343d : b518             tora2   lda zpOR,x
343f : 850c                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3441 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3443 : 48              >            pha         ;use stack to load status
3444 : bd5602          >            lda absORa,x    ;precharge accu
3447 : 28              >            plp
                        
3448 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
344a : 08              >            php         ;save flags
344b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
344e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3450 : 68              >            pla         ;load status
                       >            eor_flag 0
3451 : 0908            >            ora #decmode        ;ignore decimal mode bit
3453 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3455 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3458 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
345a : ca                       dex
345b : 10e0                     bpl tora2
345d : a203                     ldx #3
345f : b518             tora3   lda zpOR,x
3461 : 850c                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
3463 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3465 : 48              >            pha         ;use stack to load status
3466 : bd5602          >            lda absORa,x    ;precharge accu
3469 : 28              >            plp
                        
346a : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
346c : 08              >            php         ;save flags
346d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3470 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  212
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3472 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3473 : 0908            >            ora #decmode        ;ignore decimal mode bit
3475 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3477 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
347a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
347c : ca                       dex
347d : 10e0                     bpl tora3
                        
347f : a203                     ldx #3      ;abs
3481 : b518             tora4   lda zpOR,x
3483 : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
3486 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3488 : 48              >            pha         ;use stack to load status
3489 : bd5602          >            lda absORa,x    ;precharge accu
348c : 28              >            plp
                        
348d : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
3490 : 08              >            php         ;save flags
3491 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3494 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3496 : 68              >            pla         ;load status
                       >            eor_flag 0
3497 : 0908            >            ora #decmode        ;ignore decimal mode bit
3499 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
349b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
349e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34a0 : ca                       dex
34a1 : 10de                     bpl tora4
34a3 : a203                     ldx #3
34a5 : b518             tora5   lda zpOR,x
34a7 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
34aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34ac : 48              >            pha         ;use stack to load status
34ad : bd5602          >            lda absORa,x    ;precharge accu
34b0 : 28              >            plp
                        
34b1 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
34b4 : 08              >            php         ;save flags
34b5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34ba : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  213
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            eor_flag $ff-fnz
34bb : 0908            >            ora #decmode        ;ignore decimal mode bit
34bd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
34bf : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34c4 : ca                       dex
34c5 : 1002                     bpl tora6
                        
34c7 : a203                     ldx #3      ;zp,x
34c9 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
34c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34cb : 48              >            pha         ;use stack to load status
34cc : bd5602          >            lda absORa,x    ;precharge accu
34cf : 28              >            plp
                        
34d0 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
34d2 : 08              >            php         ;save flags
34d3 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34d8 : 68              >            pla         ;load status
                       >            eor_flag 0
34d9 : 0908            >            ora #decmode        ;ignore decimal mode bit
34db : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
34dd : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34e2 : ca                       dex
34e3 : 10e4                     bpl tora6
34e5 : a203                     ldx #3
34e7 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
34e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34e9 : 48              >            pha         ;use stack to load status
34ea : bd5602          >            lda absORa,x    ;precharge accu
34ed : 28              >            plp
                        
34ee : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
34f0 : 08              >            php         ;save flags
34f1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
34f9 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  214
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
34fb : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3500 : ca                       dex
3501 : 10e4                     bpl tora7
                        
3503 : a203                     ldx #3      ;abs,x
3505 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3505 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3507 : 48              >            pha         ;use stack to load status
3508 : bd5602          >            lda absORa,x    ;precharge accu
350b : 28              >            plp
                        
350c : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
350f : 08              >            php         ;save flags
3510 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3513 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3515 : 68              >            pla         ;load status
                       >            eor_flag 0
3516 : 0908            >            ora #decmode        ;ignore decimal mode bit
3518 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
351a : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
351d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
351f : ca                       dex
3520 : 10e3                     bpl tora8
3522 : a203                     ldx #3
3524 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3524 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3526 : 48              >            pha         ;use stack to load status
3527 : bd5602          >            lda absORa,x    ;precharge accu
352a : 28              >            plp
                        
352b : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
352e : 08              >            php         ;save flags
352f : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3532 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3534 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3535 : 0908            >            ora #decmode        ;ignore decimal mode bit
3537 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3539 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  215
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

353c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
353e : ca                       dex
353f : 10e3                     bpl tora9
                        
3541 : a003                     ldy #3      ;abs,y
3543 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
3543 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3545 : 48              >            pha         ;use stack to load status
3546 : b95602          >            lda absORa,y    ;precharge accu
3549 : 28              >            plp
                        
354a : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
354d : 08              >            php         ;save flags
354e : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3551 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3553 : 68              >            pla         ;load status
                       >            eor_flag 0
3554 : 0908            >            ora #decmode        ;ignore decimal mode bit
3556 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3558 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
355b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
355d : 88                       dey
355e : 10e3                     bpl tora10
3560 : a003                     ldy #3
3562 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
3562 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3564 : 48              >            pha         ;use stack to load status
3565 : b95602          >            lda absORa,y    ;precharge accu
3568 : 28              >            plp
                        
3569 : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
356c : 08              >            php         ;save flags
356d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3570 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3572 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3573 : 0908            >            ora #decmode        ;ignore decimal mode bit
3575 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3577 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
357a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  216
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

357c : 88                       dey
357d : 10e3                     bpl tora11
                        
357f : a206                     ldx #6      ;(zp,x)
3581 : a003                     ldy #3
3583 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
3583 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3585 : 48              >            pha         ;use stack to load status
3586 : b95602          >            lda absORa,y    ;precharge accu
3589 : 28              >            plp
                        
358a : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
358c : 08              >            php         ;save flags
358d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3590 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3592 : 68              >            pla         ;load status
                       >            eor_flag 0
3593 : 0908            >            ora #decmode        ;ignore decimal mode bit
3595 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3597 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
359a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
359c : ca                       dex
359d : ca                       dex
359e : 88                       dey
359f : 10e2                     bpl tora12
35a1 : a206                     ldx #6
35a3 : a003                     ldy #3
35a5 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
35a5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35a7 : 48              >            pha         ;use stack to load status
35a8 : b95602          >            lda absORa,y    ;precharge accu
35ab : 28              >            plp
                        
35ac : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
35ae : 08              >            php         ;save flags
35af : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35b4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35b5 : 0908            >            ora #decmode        ;ignore decimal mode bit
35b7 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35b9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  217
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
35be : ca                       dex
35bf : ca                       dex
35c0 : 88                       dey
35c1 : 10e2                     bpl tora13
                        
35c3 : a003                     ldy #3      ;(zp),y
35c5 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
35c5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35c7 : 48              >            pha         ;use stack to load status
35c8 : b95602          >            lda absORa,y    ;precharge accu
35cb : 28              >            plp
                        
35cc : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
35ce : 08              >            php         ;save flags
35cf : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35d4 : 68              >            pla         ;load status
                       >            eor_flag 0
35d5 : 0908            >            ora #decmode        ;ignore decimal mode bit
35d7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
35d9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35de : 88                       dey
35df : 10e4                     bpl tora14
35e1 : a003                     ldy #3
35e3 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
35e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35e5 : 48              >            pha         ;use stack to load status
35e6 : b95602          >            lda absORa,y    ;precharge accu
35e9 : 28              >            plp
                        
35ea : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
35ec : 08              >            php         ;save flags
35ed : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
35f5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35f7 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  218
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

35fc : 88                       dey
35fd : 10e4                     bpl tora15
                            if I_flag = 3
35ff : 58                       cli
                            endif                
                                next_test
3600 : ad0002          >            lda test_case   ;previous test
3603 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3605 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
3607 : a929            >            lda #test_num   ;*** next tests' number
3609 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
360c : d8                       cld
360d : a20e                     ldx #ad2        ;for indexed test
360f : a0ff                     ldy #$ff        ;max range
3611 : a900                     lda #0          ;start with adding zeroes & no carry
3613 : 850c                     sta adfc        ;carry in - for diag
3615 : 850d                     sta ad1         ;operand 1 - accumulator
3617 : 850e                     sta ad2         ;operand 2 - memory or immediate
3619 : 8d0302                   sta ada2        ;non zp
361c : 850f                     sta adrl        ;expected result bits 0-7
361e : 8510                     sta adrh        ;expected result bit 8 (carry out)
3620 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3622 : 8512                     sta sb2
3624 : 8d0402                   sta sba2        ;non zp
3627 : a902                     lda #2          ;expected Z-flag
3629 : 8511                     sta adrf
362b : 18               tadd    clc             ;test with carry clear
362c : 207736                   jsr chkadd
362f : e60c                     inc adfc        ;now with carry
3631 : e60f                     inc adrl        ;result +1
3633 : 08                       php             ;save N & Z from low result
3634 : 08                       php
3635 : 68                       pla             ;accu holds expected flags
3636 : 2982                     and #$82        ;mask N & Z
3638 : 28                       plp
3639 : d002                     bne tadd1
363b : e610                     inc adrh        ;result bit 8 - carry
363d : 0510             tadd1   ora adrh        ;merge C to expected flags
363f : 8511                     sta adrf        ;save expected flags except overflow
3641 : 38                       sec             ;test with carry set
3642 : 207736                   jsr chkadd
3645 : c60c                     dec adfc        ;same for operand +1 but no carry
3647 : e60d                     inc ad1
3649 : d0e0                     bne tadd        ;iterate op1
364b : a900                     lda #0          ;preset result to op2 when op1 = 0
364d : 8510                     sta adrh
364f : ee0302                   inc ada2
3652 : e60e                     inc ad2
3654 : 08                       php             ;save NZ as operand 2 becomes the new result
3655 : 68                       pla
3656 : 2982                     and #$82        ;mask N00000Z0
3658 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
365a : c612                     dec sb2         ;complement subtract operand 2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  219
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

365c : ce0402                   dec sba2
365f : a50e                     lda ad2         
3661 : 850f                     sta adrl
3663 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  220
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  221
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
3665 : ad0002                   lda test_case
3668 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
366a : d0fe            >        bne *           ;failed not equal (non zero)
                        
366c : a9f0                     lda #$f0        ;mark opcode testing complete
366e : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
3671 : 4c7136          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
3674 : 4c0004                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  222
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  223
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  224
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  225
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3677 : a511             chkadd  lda adrf        ;add V-flag if overflow
3679 : 2983                     and #$83        ;keep N-----ZC / clear V
367b : 48                       pha
367c : a50d                     lda ad1         ;test sign unequal between operands
367e : 450e                     eor ad2
3680 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
3682 : a50d                     lda ad1         ;test sign equal between operands and result
3684 : 450f                     eor adrl
3686 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
3688 : 68                       pla
3689 : 0940                     ora #$40        ;set V
368b : 48                       pha
368c : 68               ckad1   pla
368d : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
368f : 08                       php             ;save carry for subtract
3690 : a50d                     lda ad1
3692 : 650e                     adc ad2         ;perform add
3694 : 08                       php          
3695 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3697 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3699 : 68                       pla             ;check flags
369a : 29c3                     and #$c3        ;mask NV----ZC
369c : c511                     cmp adrf
                                trap_ne         ;bad flags
369e : d0fe            >        bne *           ;failed not equal (non zero)
                        
36a0 : 28                       plp
36a1 : 08                       php             ;save carry for next add
36a2 : a50d                     lda ad1
36a4 : e512                     sbc sb2         ;perform subtract
36a6 : 08                       php          
36a7 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36ab : 68                       pla             ;check flags
36ac : 29c3                     and #$c3        ;mask NV----ZC
36ae : c511                     cmp adrf
                                trap_ne         ;bad flags
36b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36b2 : 28                       plp
                        ; binary ADC / SBC abs
36b3 : 08                       php             ;save carry for subtract
36b4 : a50d                     lda ad1
36b6 : 6d0302                   adc ada2        ;perform add
36b9 : 08                       php          
36ba : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
36be : 68                       pla             ;check flags
36bf : 29c3                     and #$c3        ;mask NV----ZC
36c1 : c511                     cmp adrf
                                trap_ne         ;bad flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  226
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

36c3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36c5 : 28                       plp
36c6 : 08                       php             ;save carry for next add
36c7 : a50d                     lda ad1
36c9 : ed0402                   sbc sba2        ;perform subtract
36cc : 08                       php          
36cd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
36d1 : 68                       pla             ;check flags
36d2 : 29c3                     and #$c3        ;mask NV----ZC
36d4 : c511                     cmp adrf
                                trap_ne         ;bad flags
36d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36d8 : 28                       plp
                        ; binary ADC / SBC #
36d9 : 08                       php             ;save carry for subtract
36da : a50e                     lda ad2
36dc : 8d1202                   sta ex_adci+1   ;set ADC # operand
36df : a50d                     lda ad1
36e1 : 201102                   jsr ex_adci     ;execute ADC # in RAM
36e4 : 08                       php          
36e5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36e9 : 68                       pla             ;check flags
36ea : 29c3                     and #$c3        ;mask NV----ZC
36ec : c511                     cmp adrf
                                trap_ne         ;bad flags
36ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
36f0 : 28                       plp
36f1 : 08                       php             ;save carry for next add
36f2 : a512                     lda sb2
36f4 : 8d1502                   sta ex_sbci+1   ;set SBC # operand
36f7 : a50d                     lda ad1
36f9 : 201402                   jsr ex_sbci     ;execute SBC # in RAM
36fc : 08                       php          
36fd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
3701 : 68                       pla             ;check flags
3702 : 29c3                     and #$c3        ;mask NV----ZC
3704 : c511                     cmp adrf
                                trap_ne         ;bad flags
3706 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3708 : 28                       plp
                        ; binary ADC / SBC zp,x
3709 : 08                       php             ;save carry for subtract
370a : a50d                     lda ad1
370c : 7500                     adc 0,x         ;perform add
370e : 08                       php          
370f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3711 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  227
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3713 : 68                       pla             ;check flags
3714 : 29c3                     and #$c3        ;mask NV----ZC
3716 : c511                     cmp adrf
                                trap_ne         ;bad flags
3718 : d0fe            >        bne *           ;failed not equal (non zero)
                        
371a : 28                       plp
371b : 08                       php             ;save carry for next add
371c : a50d                     lda ad1
371e : f504                     sbc sb2-ad2,x   ;perform subtract
3720 : 08                       php          
3721 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3723 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3725 : 68                       pla             ;check flags
3726 : 29c3                     and #$c3        ;mask NV----ZC
3728 : c511                     cmp adrf
                                trap_ne         ;bad flags
372a : d0fe            >        bne *           ;failed not equal (non zero)
                        
372c : 28                       plp
                        ; binary ADC / SBC abs,x
372d : 08                       php             ;save carry for subtract
372e : a50d                     lda ad1
3730 : 7df501                   adc ada2-ad2,x  ;perform add
3733 : 08                       php          
3734 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3736 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3738 : 68                       pla             ;check flags
3739 : 29c3                     and #$c3        ;mask NV----ZC
373b : c511                     cmp adrf
                                trap_ne         ;bad flags
373d : d0fe            >        bne *           ;failed not equal (non zero)
                        
373f : 28                       plp
3740 : 08                       php             ;save carry for next add
3741 : a50d                     lda ad1
3743 : fdf601                   sbc sba2-ad2,x  ;perform subtract
3746 : 08                       php          
3747 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3749 : d0fe            >        bne *           ;failed not equal (non zero)
                        
374b : 68                       pla             ;check flags
374c : 29c3                     and #$c3        ;mask NV----ZC
374e : c511                     cmp adrf
                                trap_ne         ;bad flags
3750 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3752 : 28                       plp
                        ; binary ADC / SBC abs,y
3753 : 08                       php             ;save carry for subtract
3754 : a50d                     lda ad1
3756 : 790401                   adc ada2-$ff,y  ;perform add
3759 : 08                       php          
375a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
375c : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  228
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

375e : 68                       pla             ;check flags
375f : 29c3                     and #$c3        ;mask NV----ZC
3761 : c511                     cmp adrf
                                trap_ne         ;bad flags
3763 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3765 : 28                       plp
3766 : 08                       php             ;save carry for next add
3767 : a50d                     lda ad1
3769 : f90501                   sbc sba2-$ff,y  ;perform subtract
376c : 08                       php          
376d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
376f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3771 : 68                       pla             ;check flags
3772 : 29c3                     and #$c3        ;mask NV----ZC
3774 : c511                     cmp adrf
                                trap_ne         ;bad flags
3776 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3778 : 28                       plp
                        ; binary ADC / SBC (zp,x)
3779 : 08                       php             ;save carry for subtract
377a : a50d                     lda ad1
377c : 6144                     adc (lo adi2-ad2,x) ;perform add
377e : 08                       php          
377f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3781 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3783 : 68                       pla             ;check flags
3784 : 29c3                     and #$c3        ;mask NV----ZC
3786 : c511                     cmp adrf
                                trap_ne         ;bad flags
3788 : d0fe            >        bne *           ;failed not equal (non zero)
                        
378a : 28                       plp
378b : 08                       php             ;save carry for next add
378c : a50d                     lda ad1
378e : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
3790 : 08                       php          
3791 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3793 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3795 : 68                       pla             ;check flags
3796 : 29c3                     and #$c3        ;mask NV----ZC
3798 : c511                     cmp adrf
                                trap_ne         ;bad flags
379a : d0fe            >        bne *           ;failed not equal (non zero)
                        
379c : 28                       plp
                        ; binary ADC / SBC (abs),y
379d : 08                       php             ;save carry for subtract
379e : a50d                     lda ad1
37a0 : 7156                     adc (adiy2),y   ;perform add
37a2 : 08                       php          
37a3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  229
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

37a7 : 68                       pla             ;check flags
37a8 : 29c3                     and #$c3        ;mask NV----ZC
37aa : c511                     cmp adrf
                                trap_ne         ;bad flags
37ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
37ae : 28                       plp
37af : 08                       php             ;save carry for next add
37b0 : a50d                     lda ad1
37b2 : f158                     sbc (sbiy2),y   ;perform subtract
37b4 : 08                       php          
37b5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37b9 : 68                       pla             ;check flags
37ba : 29c3                     and #$c3        ;mask NV----ZC
37bc : c511                     cmp adrf
                                trap_ne         ;bad flags
37be : d0fe            >        bne *           ;failed not equal (non zero)
                        
37c0 : 28                       plp
37c1 : 60                       rts
                        
                        ; target for the jump absolute test
37c2 : 88                       dey
37c3 : 88                       dey
37c4 :                  test_far
37c4 : 08                       php             ;either SP or Y count will fail, if we do not hit
37c5 : 88                       dey
37c6 : 88                       dey
37c7 : 88                       dey
37c8 : 28                       plp
                                trap_cs         ;flags loaded?
37c9 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
37cb : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
37cd : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
37cf : f0fe            >        beq *           ;failed equal (zero)
                        
37d1 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
37d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d5 : e041                     cpx #'A'
                                trap_ne        
37d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d9 : c04f                     cpy #('R'-3)
                                trap_ne
37db : d0fe            >        bne *           ;failed not equal (non zero)
                        
37dd : 48                       pha             ;save a,x
37de : 8a                       txa
37df : 48                       pha
37e0 : ba                       tsx
37e1 : e0fd                     cpx #$fd        ;check SP
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  230
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
37e3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37e5 : 68                       pla             ;restore x
37e6 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
37e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37e9 : 48              >            pha         ;use stack to load status
37ea : 28              >            plp
                        
37eb : 68                       pla             ;restore a
37ec : e8                       inx             ;return registers with modifications
37ed : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
37ef : 4c3309                   jmp far_ret
                                
                        ; target for the jump indirect test
                                align
37f2 : fb37             ptr_tst_ind dw test_ind
37f4 : 8809             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
37f6 : 4cf637          >        jmp *           ;failed anyway
                        
37f9 : 88                       dey
37fa : 88                       dey
37fb :                  test_ind
37fb : 08                       php             ;either SP or Y count will fail, if we do not hit
37fc : 88                       dey
37fd : 88                       dey
37fe : 88                       dey
37ff : 28                       plp
                                trap_cs         ;flags loaded?
3800 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3802 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3804 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3806 : f0fe            >        beq *           ;failed equal (zero)
                        
3808 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
380a : d0fe            >        bne *           ;failed not equal (non zero)
                        
380c : e04e                     cpx #'N'
                                trap_ne        
380e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3810 : c041                     cpy #('D'-3)
                                trap_ne
3812 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3814 : 48                       pha             ;save a,x
3815 : 8a                       txa
3816 : 48                       pha
3817 : ba                       tsx
3818 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  231
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

381a : d0fe            >        bne *           ;failed not equal (non zero)
                        
381c : 68                       pla             ;restore x
381d : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
381e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3820 : 48              >            pha         ;use stack to load status
3821 : 28              >            plp
                        
3822 : 68                       pla             ;restore a
3823 : e8                       inx             ;return registers with modifications
3824 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3826 : 6cf437                   jmp (ptr_ind_ret)
                                trap            ;runover protection
3829 : 4c2938          >        jmp *           ;failed anyway
                        
                        
                        ; target for the jump subroutine test
382c : 88                       dey
382d : 88                       dey
382e :                  test_jsr
382e : 08                       php             ;either SP or Y count will fail, if we do not hit
382f : 88                       dey
3830 : 88                       dey
3831 : 88                       dey
3832 : 28                       plp
                                trap_cs         ;flags loaded?
3833 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3835 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3837 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3839 : f0fe            >        beq *           ;failed equal (zero)
                        
383b : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
383d : d0fe            >        bne *           ;failed not equal (non zero)
                        
383f : e053                     cpx #'S'
                                trap_ne        
3841 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3843 : c04f                     cpy #('R'-3)
                                trap_ne
3845 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3847 : 48                       pha             ;save a,x
3848 : 8a                       txa
3849 : 48                       pha       
384a : ba                       tsx             ;sp -4? (return addr,a,x)
384b : e0fb                     cpx #$fb
                                trap_ne
384d : d0fe            >        bne *           ;failed not equal (non zero)
                        
384f : adff01                   lda $1ff        ;propper return on stack
3852 : c909                     cmp #hi(jsr_ret)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  232
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
3854 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3856 : adfe01                   lda $1fe
3859 : c9be                     cmp #lo(jsr_ret)
                                trap_ne
385b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
385d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
385f : 48              >            pha         ;use stack to load status
3860 : 28              >            plp
                        
3861 : 68                       pla             ;pull x,a
3862 : aa                       tax
3863 : 68                       pla
3864 : e8                       inx             ;return registers with modifications
3865 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3867 : 60                       rts
                                trap            ;runover protection
3868 : 4c6838          >        jmp *           ;failed anyway
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
386b :                  nmi_trap
                                trap            ;check stack for conditions at NMI
386b : 4c6b38          >        jmp *           ;failed anyway
                        
386e :                  res_trap
                                trap            ;unexpected RESET
386e : 4c6e38          >        jmp *           ;failed anyway
                        
                                
3871 : 88                       dey
3872 : 88                       dey
3873 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
3873 : 08                       php             ;either SP or Y count will fail, if we do not hit
3874 : 88                       dey
3875 : 88                       dey
3876 : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
3877 : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
3879 : d0fe            >        bne *           ;failed not equal (non zero)
                        
387b : e052                     cpx #'R'
                                trap_ne        
387d : d0fe            >        bne *           ;failed not equal (non zero)
                        
387f : c048                     cpy #('K'-3)
                                trap_ne
3881 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3883 : 850a                     sta irq_a       ;save registers during break test
3885 : 860b                     stx irq_x
3887 : ba                       tsx             ;test break on stack
3888 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  233
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

388b : 0908            >            ora #decmode        ;ignore decimal mode bit
388d : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
388f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3891 : 68                       pla
3892 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
3894 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3896 : ba                       tsx
3897 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
3899 : d0fe            >        bne *           ;failed not equal (non zero)
                        
389b : adff01                   lda $1ff        ;propper return on stack
389e : c909                     cmp #hi(brk_ret)
                                trap_ne
38a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38a2 : adfe01                   lda $1fe
38a5 : c9f5                     cmp #lo(brk_ret)
                                trap_ne
38a7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
38a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38ab : 48              >            pha         ;use stack to load status
38ac : 28              >            plp
                        
38ad : a60b                     ldx irq_x
38af : e8                       inx             ;return registers with modifications
38b0 : a50a                     lda irq_a
38b2 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
38b4 : 40                       rti
                                trap            ;runover protection
38b5 : 4cb538          >        jmp *           ;failed anyway
                        
                                
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  234
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  235
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : 6b38                     dw  nmi_trap
fffc : 6e38                     dw  res_trap
fffe : 7338                     dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
                        
No errors in pass 2.
